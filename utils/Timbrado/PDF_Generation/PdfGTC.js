/*var fonts = {
    Roboto: {
      normal: 'C:/GTC/Fonts/Montserrat-Regular.ttf',
      bold: 'C:/GTC/Fonts/Montserrat-Bold.ttf',
      italics: 'C:/GTC/Fonts/Montserrat-Italic.ttf',
      bolditalics: 'C:/GTC/Fonts/Montserrat-BoldItalic.ttf'
    }
};*/

var fonts = {
    Roboto: {
      normal: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Regular.ttf',
      bold: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Bold.ttf',
      italics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Italic.ttf',
      bolditalics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-BoldItalic.ttf'
    }
};

var convert = require('xml-js');
var PdfPrinter = require('pdfmake');
var printer = new PdfPrinter(fonts);
const { AwesomeQR } = require("awesome-qr");
const fs = require("fs");

const xml = require('../../xml.js')
const pdf2base64 = require('pdf-to-base64');

const dbcatcatalogs = require('../../../controllers/cat-catalogs')
const dbcatgeneralparameters = require('../../../controllers/cat-general-parameters');
const e = require('connect-timeout');
const logger = require('../../logger.js');

var xml64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5MDA3MSIgRmVjaGE9IjIwMjItMDMtMDhUMTc6MDQ6MTgiIFNlbGxvPSIiIEZvcm1hUGFnbz0iOTkiIE5vQ2VydGlmaWNhZG89IiIgQ2VydGlmaWNhZG89IiIgQ29uZGljaW9uZXNEZVBhZ289IjYwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSI1MDU1NCIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSI1ODY0Mi42NCIgVGlwb0RlQ29tcHJvYmFudGU9IkkiIE1ldG9kb1BhZ289IlBQRCIgTHVnYXJFeHBlZGljaW9uPSI3NjI0NiI+Cgk8Y2ZkaTpFbWlzb3IgUmZjPSJJUE02MjAzMjI2QjQiIE5vbWJyZT0iSVRXIFBvbHltZXggUyBERSBSTCBERSBDViIgUmVnaW1lbkZpc2NhbD0iNjAxIi8+Cgk8Y2ZkaTpSZWNlcHRvciBSZmM9IkRNQTk4MDcyNTJWQSIgTm9tYnJlPSJESVNUUklCVUlET1JBIE1BUlBWRUwgREUgQVVUT1BBUlRFUyBTQSAgREUgQ1YiIFVzb0NGREk9IkcwMSIvPgoJPGNmZGk6Q29uY2VwdG9zPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjMxIiBOb0lkZW50aWZpY2FjaW9uPSIxMDMtQSIgQ2FudGlkYWQ9IjEwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iSU5GTEEtTExBTlRBUyBRVEYgMzQxRyIgVmFsb3JVbml0YXJpbz0iNzgzLjMwMDAiIEltcG9ydGU9Ijc4MzMuMDAiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSI3ODMzLjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMTI1My4yOCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMzEyMDE2MjciIE5vSWRlbnRpZmljYWNpb249IjE0LUEiIENhbnRpZGFkPSIxMCIgQ2xhdmVVbmlkYWQ9Ilg0RyIgVW5pZGFkPSJDQSIgRGVzY3JpcGNpb249IkZJSkFET1IgVEYgMjQ1IEFaVUwgNk1MIiBWYWxvclVuaXRhcmlvPSIxOTAxLjIwMDAiIEltcG9ydGU9IjE5MDEyLjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iMTkwMTIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSIzMDQxLjkyIiAvPgoJCQk8L2NmZGk6VHJhc2xhZG9zPgoJCQk8L2NmZGk6SW1wdWVzdG9zPgoJCTwvY2ZkaTpDb25jZXB0bz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIzMTIwMTYwMCIgTm9JZGVudGlmaWNhY2lvbj0iMjItQyIgQ2FudGlkYWQ9IjEwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iU0VMTEEgRlVHQVMgUkFESUFET1IgMzU1TUwiIFZhbG9yVW5pdGFyaW89IjQwMS44MDAwIiBJbXBvcnRlPSI0MDE4LjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iNDAxOC4wMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjY0Mi44OCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNDcxMzE4MjEiIE5vSWRlbnRpZmljYWNpb249IjI1MTA4IiBDYW50aWRhZD0iMTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJGQVNUIE9SQU5HRSBMSU1QSUFET1IgTUFOT1MgNy4iIFZhbG9yVW5pdGFyaW89IjYyNy4yMDAwIiBJbXBvcnRlPSI2MjcyLjAwIiA+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iNjI3Mi4wMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjEwMDMuNTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjMxMjAxNjAwIiBOb0lkZW50aWZpY2FjaW9uPSI2MS1BIiBDYW50aWRhZD0iMTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJTT0xEQURVUkEgRU4gRlJJTyBUIDcwRyIgVmFsb3JVbml0YXJpbz0iMTM0MS45MDAwIiBJbXBvcnRlPSIxMzQxOS4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjEzNDE5LjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMjE0Ny4wNCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjgwODguNjQiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjgwODguNjQiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXMgVmVyc2lvbj0iMS4wIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOmxleWVuZGFzRmlzYz0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2xleWVuZGFzRmlzY2FsZXMiIHRhcmdldE5hbWVzcGFjZT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2xleWVuZGFzRmlzY2FsZXMiPgoJCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGEgZGlzcG9zaWNpb25GaXNjYWw9IlJHQ0UiIG5vcm1hPSI1LjIuNi4iIHRleHRvTGV5ZW5kYT0iRGUgY29uZm9ybWlkYWQgYWwgYXJ0w61jdWxvIDI5LCBmcmFjY2nDs24gSSBkZSBsYSBMZXkgZGVsIElWQSB5IGxhIHJlZ2xhIDUuMi41LiwgZnJhY2Npw7NuIElJLCBkZSBsYXMgUmVnbGFzIEdlbmVyYWxlcyBkZSBDb21lcmNpbyBFeHRlcmlvciBwYXJhIDIwMjIgc2UgcmVhbGl6YSBsYSBwcmVzZW50ZSBvcGVyYWNpw7NuIGN1bXBsaWVuZG8gY29uIGxvIGVzdGFibGVjaWRvIGVuIGxhcyByZWdsYXMgNC4zLjIxLiB5IDUuMi42LiBTZSB0cmFuc2ZpZXJlIGxhIG1lcmNhbmPDrWEgYSBERUxNRVggREUgSlVBUkVaIFMgREUgUkwgREUgQ1YgcXVpZW4gY3VlbnRhIGNvbiBuw7ptZXJvIGRlIHJlZ2lzdHJvIElNTUVYIDcwMi0yMDA2LiIvPgoJCTwvbGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXM+Cgk8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xml642 = ""
var xml643 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz48Y2ZkaTpDb21wcm9iYW50ZSB4bWxuczpjZmRpPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvY2ZkLzMiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvMy9jZmR2MzMueHNkIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9sZXllbmRhc0Zpc2NhbGVzIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvbGV5ZW5kYXNGaXNjYWxlcy9sZXllbmRhc0Zpc2MueHNkIiB4bWxuczpsZXllbmRhc0Zpc2M9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9sZXllbmRhc0Zpc2NhbGVzIiBWZXJzaW9uPSIzLjMiIFNlcmllPSJSSSIgRm9saW89IjkxODI5IiBGZWNoYT0iMjAyMi0wNC0xMVQxMTo0NDozNSIgU2VsbG89Im5lL1YyQTU5WTBNZ1JBeXlqWFU2bHNlNWZFZlBxbU5BbjlaSHBlNmFYNmVBdHVQSjhOcWhlZ1VVbHVFNm1YMWsxSGFuV1VLS3NzOHNOdG85SW11ak1tWTg1d2dhNUY4b0IwM1RiUFNtblp2MFhqSCtVMlRpQzBWUGUzRmNvSFQ0Ris5R2JSUGMxaUJ3WUhZRzIwaGk5aFZLSWdLTmRlQjBFMW1PTWtUSW05d1M4U0psbXVVV21QQVQxei82R2JmcmViTWh4ZjRvbGxBTHFuYjRpOHhsVHVPRkgrTUdYejd4R3Zxb1pEQk9RYjlaQStJV3drL2FTdk1GUXBhSE1XRktCM3A1dHhvOXRqQ1VQdnF5RVpzeE5KVVNYVmYvekpFUW5YeGhReUxEekRTek5RTzk0QXhZYjZ1MmprQWd6NElPTFl0NmNtL081aGE2cWJjaWhzVEJNdz09IiBGb3JtYVBhZ289Ijk5IiBOb0NlcnRpZmljYWRvPSIwMDAwMTAwMDAwMDUwNjc0MjMwOCIgQ2VydGlmaWNhZG89Ik1JSUYvRENDQStTZ0F3SUJBZ0lVTURBd01ERXdNREF3TURBMU1EWTNOREl6TURnd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z2dHRU1TQXdIZ1lEVlFRRERCZEJWVlJQVWtsRVFVUWdRMFZTVkVsR1NVTkJSRTlTUVRFdU1Dd0dBMVVFQ2d3bFUwVlNWa2xEU1U4Z1JFVWdRVVJOU1U1SlUxUlNRVU5KVDA0Z1ZGSkpRbFZVUVZKSlFURWFNQmdHQTFVRUN3d1JVMEZVTFVsRlV5QkJkWFJvYjNKcGRIa3hLakFvQmdrcWhraUc5dzBCQ1FFV0cyTnZiblJoWTNSdkxuUmxZMjVwWTI5QWMyRjBMbWR2WWk1dGVERW1NQ1FHQTFVRUNRd2RRVll1SUVoSlJFRk1SMDhnTnpjc0lFTlBUQzRnUjFWRlVsSkZVazh4RGpBTUJnTlZCQkVNQlRBMk16QXdNUXN3Q1FZRFZRUUdFd0pOV0RFWk1CY0dBMVVFQ0F3UVEwbFZSRUZFSUVSRklFMUZXRWxEVHpFVE1CRUdBMVVFQnd3S1ExVkJWVWhVUlUxUFF6RVZNQk1HQTFVRUxSTU1VMEZVT1Rjd056QXhUazR6TVZ3d1dnWUpLb1pJaHZjTkFRa0NFMDF5WlhOd2IyNXpZV0pzWlRvZ1FVUk5TVTVKVTFSU1FVTkpUMDRnUTBWT1ZGSkJUQ0JFUlNCVFJWSldTVU5KVDFNZ1ZGSkpRbFZVUVZKSlQxTWdRVXdnUTA5T1ZGSkpRbFZaUlU1VVJUQWVGdzB5TVRBek1USXdNRE0zTlROYUZ3MHlOVEF6TVRJd01ETTNOVE5hTUlIS01TTXdJUVlEVlFRREV4cEpWRmNnVUU5TVdTQk5SVmdnVXlCRVJTQlNUQ0JFUlNCRFZqRWpNQ0VHQTFVRUtSTWFTVlJYSUZCUFRGa2dUVVZZSUZNZ1JFVWdVa3dnUkVVZ1ExWXhJekFoQmdOVkJBb1RHa2xVVnlCUVQweFpJRTFGV0NCVElFUkZJRkpNSUVSRklFTldNU1V3SXdZRFZRUXRFeHhKVUUwMk1qQXpNakkyUWpRZ0x5Qk1TVkpCT0RFd05UQTNVVEl5TVI0d0hBWURWUVFGRXhVZ0x5Qk1TVkpCT0RFd05UQTNUVlphUTAxTU1EZ3hFakFRQmdOVkJBc1RDVkJTU1U1RFNWQkJURENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMcTNTMFZNU240MW5DUXR0WFgvcUNKTE5QS3NmN01GVThMUUlMOVBtNGF4bXRRazNNSVdSczR2dDVnbHlmUUJPWCsxWUlNY0RLTUhNU1d6SXJKZHJxSEx4b1BJWXFHbFE1dTg4WlNLSjZ4SHlrSC9CanhXOHZ0TTJFcmlGeHo0U3doeTJEQ0hWbEFONnZudjQxMXVjbTJ2NWFLUGNPUlNYalN6dGhVNnYrSDhodFN6T2V1KzYzQTFzRW5Eb0hlRW5XV1I3UjFVakhYNUd0SkxpdlZiWGMraFdLcDVUNk5PbGlpNEMvMTdZcTk1b2dXSWlLUFJ6VUxNaUhXampIbkhqdDRGRDFLMEtkOWYxYWZmYjZLZ3E1SWVQbHlXcVpNTzlmVDhlU1laOUZtcWxTamlWTGJIS3dlS2RhZ2ROeE9POEZ3Wld4QVdINEpWVkx1dXZnTVFxWnNDQXdFQUFhTWRNQnN3REFZRFZSMFRBUUgvQkFJd0FEQUxCZ05WSFE4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUQ3bzFoQldic1FOREpsT1dKRkR3aG10azF5a0l6YVZHSWVibHVYMVZIUHJPN1NOSjBTUnVPWk5CS0FYRUxCRjJHUm5kaXlJMWFPdWwzaWdEUVc0c1l2SEc4ZExGcXgyUVRXd2V2Z2xKSm43eEF5QUdQZ1NnWXA3a0N0M3dmRnc0NVY5TFF4RFVaa0tsTGtYR2ZNbFJzR0I1ejM1V3Z5R0xaQW9ZZEYwbUVQYW1iTVRWcUJHRlVBSlIxY29uQ0diTlFPUEg0M0lOeHFFN0x2VUYydzNieEEvU21TU0RRQXc5MnFQTE53WHJhaitXUERjUTdtWVUxQXJBVkdRczZvTjVPOVZSK0V6RDNWNzhwbFZweGNsdllxdk9GdG5Pa3p0NFRFdVNJTmM1dGJkMVd1Tm5SWHZUYzJ0UzBFT1F2SU5pWXhyNTRmcFl2eHZDVW40UDRoUnpheVRORFhCNDlUNldqbnMwOXFGZ0ZWOWQzZk5kcWRoVWQ1KzFTMzFCc0YrdFd6YjhpMEFzLzR3QzdTUkhxOC9aUlFKbDhpaUhwa1Q5N0NWUUNkeUV1SHNDVUh2YmkyRDkwMGt6NGNBQXVCQUpvVFF2Q2F4VTUyUVJmTmdXZk9FaWNjQVRZSlJ5TGR4ZXdKZ1RlRHo4UEZQb2NMcnZLUEU3bHROdE42Nzd5Y3JNcysrUGhRV3JqVTFMcURBWEk0Y2Ixb1VhUzM5TWRHZzcrRkVpVk9BYUVMelJwZDBleDNtYVNubVNnZHpLNEJoVzJYWWhLMElWcHFjaFpWdHdhNytYRFJlYk85WTZFWjFWeDFzcHpPbHdJR2Y4WlZNa3laOU56Qm1WQUtHSHFDczIwMHd4Q3M1MmYvdWJJQ25DV0hCd3RpYTJ5emJNalZ1bldRVG1NaTRlWlhsIiBDb25kaWNpb25lc0RlUGFnbz0iMzAgRElBUyBORVRPUyIgU3ViVG90YWw9IjI1ODkxLjgwIiBNb25lZGE9IlVTRCIgVGlwb0NhbWJpbz0iMTkuNzQ0MzAwIiBUb3RhbD0iMjU4OTEuODAiIFRpcG9EZUNvbXByb2JhbnRlPSJJIiBNZXRvZG9QYWdvPSJQUEQiIEx1Z2FyRXhwZWRpY2lvbj0iNjQ5ODgiPjxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiIC8+PGNmZGk6UmVjZXB0b3IgUmZjPSJYQVhYMDEwMTAxMDAwIiBOb21icmU9IlZBTEVPIE5PUlRIIEFNRVJJQ0EgSU5DIiBVc29DRkRJPSJHMDEiIC8+PGNmZGk6Q29uY2VwdG9zPjxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjE1MTIxNTEzIiBOb0lkZW50aWZpY2FjaW9uPSIwNjIwMzU1IiBDYW50aWRhZD0iMyIgQ2xhdmVVbmlkYWQ9Ikg4NyIgVW5pZGFkPSJFQSIgRGVzY3JpcGNpb249IlJFQ1VCUklNSUVOVE8gTFJDIFRBTUJPUiA1NUdBTCIgVmFsb3JVbml0YXJpbz0iODYzMC42MDAwIiBJbXBvcnRlPSIyNTg5MS44MCI+PGNmZGk6SW1wdWVzdG9zPjxjZmRpOlRyYXNsYWRvcz48Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyNTg5MS44MCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+PC9jZmRpOlRyYXNsYWRvcz48L2NmZGk6SW1wdWVzdG9zPjwvY2ZkaTpDb25jZXB0bz48L2NmZGk6Q29uY2VwdG9zPjxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSIwIj48Y2ZkaTpUcmFzbGFkb3M+PGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+PC9jZmRpOlRyYXNsYWRvcz48L2NmZGk6SW1wdWVzdG9zPjxjZmRpOkNvbXBsZW1lbnRvPjx0ZmQ6VGltYnJlRmlzY2FsRGlnaXRhbCB4bWxuczp0ZmQ9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgVmVyc2lvbj0iMS4xIiBVVUlEPSIwQjg3ODUwOS1FQkRDLTQxMzEtODAxMy1DMjZGMjUzNDIyQjUiIEZlY2hhVGltYnJhZG89IjIwMjItMDQtMTFUMTM6MTM6MDIiIFJmY1Byb3ZDZXJ0aWY9IlNFRDExMDIwODhKNyIgU2VsbG9DRkQ9Im5lL1YyQTU5WTBNZ1JBeXlqWFU2bHNlNWZFZlBxbU5BbjlaSHBlNmFYNmVBdHVQSjhOcWhlZ1VVbHVFNm1YMWsxSGFuV1VLS3NzOHNOdG85SW11ak1tWTg1d2dhNUY4b0IwM1RiUFNtblp2MFhqSCtVMlRpQzBWUGUzRmNvSFQ0Ris5R2JSUGMxaUJ3WUhZRzIwaGk5aFZLSWdLTmRlQjBFMW1PTWtUSW05d1M4U0psbXVVV21QQVQxei82R2JmcmViTWh4ZjRvbGxBTHFuYjRpOHhsVHVPRkgrTUdYejd4R3Zxb1pEQk9RYjlaQStJV3drL2FTdk1GUXBhSE1XRktCM3A1dHhvOXRqQ1VQdnF5RVpzeE5KVVNYVmYvekpFUW5YeGhReUxEekRTek5RTzk0QXhZYjZ1MmprQWd6NElPTFl0NmNtL081aGE2cWJjaWhzVEJNdz09IiBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwMzkzODAwMSIgU2VsbG9TQVQ9IlluQy9KRlAzTkxiZHBBQ3kwVm9QRFNPekJlZTBKZmJwWmNhY2l4cTVnNmhabFpXUjNFanNRZmRnV1dpeVIwY2J0VmNsakY2cUx6TXRXQ2dVMi9tWC9WNTBFZkFvQUdpbGM5MVdWeDRBUENUV1RVN3RjOGJpRlk1cFcwcDdVZ00rWUExR1hkWFFCVmlNY2RmVVR1VGdUNkFVOEpoUVoyVzBvVnRxYzNZTGZqTmFaKzlvQURneHh5WmVHQThkK2tGb2R5Wm9YUjk2SW1jdnJ4UG9oNHJCRWZTcnRRSmNFei9XZFVBNDJ1aVNUSHVDV3hjTDcrYnFYT1RBVng4a3dCM1NkOHZublRwVWlybWY3d0ZHdGlUNHNDQ1liYy9hT0FWOEhRSEwrYk81Q0RYd1g5Y1JHcDFjVzhHWUs3SWhHMCs1ajg0MXhCUjhGSzg1QW5lSWxsMGRxZz09IiAvPjxsZXllbmRhc0Zpc2M6TGV5ZW5kYXNGaXNjYWxlcyB2ZXJzaW9uPSIxLjAiPjxsZXllbmRhc0Zpc2M6TGV5ZW5kYSBkaXNwb3NpY2lvbkZpc2NhbD0iUkdDRSIgbm9ybWE9IjUuMi42LiIgdGV4dG9MZXllbmRhPSJEZSBjb25mb3JtaWRhZCBhbCBhcnTDrWN1bG8gMjksIGZyYWNjacOzbiBJIGRlIGxhIExleSBkZWwgSVZBIHkgbGEgcmVnbGEgNS4yLjUuLCBmcmFjY2nDs24gSUksIGRlIGxhcyBSZWdsYXMgR2VuZXJhbGVzIGRlIENvbWVyY2lvIEV4dGVyaW9yIHBhcmEgMjAyMiBzZSByZWFsaXphIGxhIHByZXNlbnRlIG9wZXJhY2nDs24gY3VtcGxpZW5kbyBjb24gbG8gZXN0YWJsZWNpZG8gZW4gbGFzIHJlZ2xhcyA0LjMuMjEuIHkgNS4yLjYuICBTZSB0cmFuc2ZpZXJlIGxhIG1lcmNhbmPDrWEgYSBERUxNRVggREUgSlVBUkVaIFMgREUgUkwgREUgQ1YgcXVpZW4gY3VlbnRhIGNvbiBuw7ptZXJvIGRlIHJlZ2lzdHJvIElNTUVYIDcwMi0yMDA2LiIgLz48L2xleWVuZGFzRmlzYzpMZXllbmRhc0Zpc2NhbGVzPjwvY2ZkaTpDb21wbGVtZW50bz48L2NmZGk6Q29tcHJvYmFudGU+"
var xml644 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCBodHRwOi8vd3d3LnNhdC5nb2IubXgvbGV5ZW5kYXNGaXNjYWxlcyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL2xleWVuZGFzRmlzY2FsZXMvbGV5ZW5kYXNGaXNjLnhzZCIgeG1sbnM6bGV5ZW5kYXNGaXNjPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvbGV5ZW5kYXNGaXNjYWxlcyIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5NDQ3OSIgRmVjaGE9IjIwMjItMDYtMTRUMTA6NTI6NTEiIFNlbGxvPSJBclpkVVJQSmpqajR0V0s4ODdDYWZpN2VXNnUrUHpydUJ1WEtIbUV0eS9RNURONEF1cTJsU0ZYUDNsMW9EdStyVW9rYXJFNzhEalIyWUp1V2RoZElRSkhpSXUzSVEraEpuNkVVUWJRVHliaVRvbmNCYmk5RW5LVUFxNVVseDZjTUlHS0tWNVBnL3BiakMzVERMcEdRd25OVThwNEN3Kzdnd0xoQzdjS1V3Q1dqaXk5Z0ZYV1ZvbEhsem4waGt1SWlMUURWd1lQSzJ5c3kwZFd2QnFMZUowYlhXM2JHK2dlNnJMT25wdDRKVmhGWmZlS0VweEIwT2JPNGgyYmNlNElEamRMV3JncHQ2QzZpMVhYZzlySXZtVWJsV0ZLRjlPejZ5YktLdDEybnRMd1NPNm9oUGRxZzZWL0J6cDR6anpSbk5TcUpUTDhET3hXNXYyQ0paVm1lVmc9PSIgRm9ybWFQYWdvPSI5OSIgTm9DZXJ0aWZpY2Fkbz0iMDAwMDEwMDAwMDA1MDY3NDIzMDgiIENlcnRpZmljYWRvPSJNSUlGL0RDQ0ErU2dBd0lCQWdJVU1EQXdNREV3TURBd01EQTFNRFkzTkRJek1EZ3dEUVlKS29aSWh2Y05BUUVMQlFBd2dnR0VNU0F3SGdZRFZRUUREQmRCVlZSUFVrbEVRVVFnUTBWU1ZFbEdTVU5CUkU5U1FURXVNQ3dHQTFVRUNnd2xVMFZTVmtsRFNVOGdSRVVnUVVSTlNVNUpVMVJTUVVOSlQwNGdWRkpKUWxWVVFWSkpRVEVhTUJnR0ExVUVDd3dSVTBGVUxVbEZVeUJCZFhSb2IzSnBkSGt4S2pBb0Jna3Foa2lHOXcwQkNRRVdHMk52Ym5SaFkzUnZMblJsWTI1cFkyOUFjMkYwTG1kdllpNXRlREVtTUNRR0ExVUVDUXdkUVZZdUlFaEpSRUZNUjA4Z056Y3NJRU5QVEM0Z1IxVkZVbEpGVWs4eERqQU1CZ05WQkJFTUJUQTJNekF3TVFzd0NRWURWUVFHRXdKTldERVpNQmNHQTFVRUNBd1FRMGxWUkVGRUlFUkZJRTFGV0VsRFR6RVRNQkVHQTFVRUJ3d0tRMVZCVlVoVVJVMVBRekVWTUJNR0ExVUVMUk1NVTBGVU9UY3dOekF4VGs0ek1Wd3dXZ1lKS29aSWh2Y05BUWtDRTAxeVpYTndiMjV6WVdKc1pUb2dRVVJOU1U1SlUxUlNRVU5KVDA0Z1EwVk9WRkpCVENCRVJTQlRSVkpXU1VOSlQxTWdWRkpKUWxWVVFWSkpUMU1nUVV3Z1EwOU9WRkpKUWxWWlJVNVVSVEFlRncweU1UQXpNVEl3TURNM05UTmFGdzB5TlRBek1USXdNRE0zTlROYU1JSEtNU013SVFZRFZRUURFeHBKVkZjZ1VFOU1XU0JOUlZnZ1V5QkVSU0JTVENCRVJTQkRWakVqTUNFR0ExVUVLUk1hU1ZSWElGQlBURmtnVFVWWUlGTWdSRVVnVWt3Z1JFVWdRMVl4SXpBaEJnTlZCQW9UR2tsVVZ5QlFUMHhaSUUxRldDQlRJRVJGSUZKTUlFUkZJRU5XTVNVd0l3WURWUVF0RXh4SlVFMDJNakF6TWpJMlFqUWdMeUJNU1ZKQk9ERXdOVEEzVVRJeU1SNHdIQVlEVlFRRkV4VWdMeUJNU1ZKQk9ERXdOVEEzVFZaYVEwMU1NRGd4RWpBUUJnTlZCQXNUQ1ZCU1NVNURTVkJCVERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHEzUzBWTVNuNDFuQ1F0dFhYL3FDSkxOUEtzZjdNRlU4TFFJTDlQbTRheG10UWszTUlXUnM0dnQ1Z2x5ZlFCT1grMVlJTWNES01ITVNXeklySmRycUhMeG9QSVlxR2xRNXU4OFpTS0o2eEh5a0gvQmp4Vzh2dE0yRXJpRnh6NFN3aHkyRENIVmxBTjZ2bnY0MTF1Y20ydjVhS1BjT1JTWGpTenRoVTZ2K0g4aHRTek9ldSs2M0Exc0VuRG9IZUVuV1dSN1IxVWpIWDVHdEpMaXZWYlhjK2hXS3A1VDZOT2xpaTRDLzE3WXE5NW9nV0lpS1BSelVMTWlIV2pqSG5IanQ0RkQxSzBLZDlmMWFmZmI2S2dxNUllUGx5V3FaTU85ZlQ4ZVNZWjlGbXFsU2ppVkxiSEt3ZUtkYWdkTnhPTzhGd1pXeEFXSDRKVlZMdXV2Z01RcVpzQ0F3RUFBYU1kTUJzd0RBWURWUjBUQVFIL0JBSXdBREFMQmdOVkhROEVCQU1DQnNBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dJQkFEN28xaEJXYnNRTkRKbE9XSkZEd2htdGsxeWtJemFWR0llYmx1WDFWSFByTzdTTkowU1J1T1pOQktBWEVMQkYyR1JuZGl5STFhT3VsM2lnRFFXNHNZdkhHOGRMRnF4MlFUV3dldmdsSkpuN3hBeUFHUGdTZ1lwN2tDdDN3ZkZ3NDVWOUxReERVWmtLbExrWEdmTWxSc0dCNXozNVd2eUdMWkFvWWRGMG1FUGFtYk1UVnFCR0ZVQUpSMWNvbkNHYk5RT1BINDNJTnhxRTdMdlVGMnczYnhBL1NtU1NEUUF3OTJxUExOd1hyYWorV1BEY1E3bVlVMUFyQVZHUXM2b041TzlWUitFekQzVjc4cGxWcHhjbHZZcXZPRnRuT2t6dDRURXVTSU5jNXRiZDFXdU5uUlh2VGMydFMwRU9RdklOaVl4cjU0ZnBZdnh2Q1VuNFA0aFJ6YXlUTkRYQjQ5VDZXam5zMDlxRmdGVjlkM2ZOZHFkaFVkNSsxUzMxQnNGK3RXemI4aTBBcy80d0M3U1JIcTgvWlJRSmw4aWlIcGtUOTdDVlFDZHlFdUhzQ1VIdmJpMkQ5MDBrejRjQUF1QkFKb1RRdkNheFU1MlFSZk5nV2ZPRWljY0FUWUpSeUxkeGV3SmdUZUR6OFBGUG9jTHJ2S1BFN2x0TnRONjc3eWNyTXMrK1BoUVdyalUxTHFEQVhJNGNiMW9VYVMzOU1kR2c3K0ZFaVZPQWFFTHpScGQwZXgzbWFTbm1TZ2R6SzRCaFcyWFloSzBJVnBxY2haVnR3YTcrWERSZWJPOVk2RVoxVngxc3B6T2x3SUdmOFpWTWt5WjlOekJtVkFLR0hxQ3MyMDB3eENzNTJmL3ViSUNuQ1dIQnd0aWEyeXpiTWpWdW5XUVRtTWk0ZVpYbCIgQ29uZGljaW9uZXNEZVBhZ289IjMwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSIyNjY3Ni40MCIgTW9uZWRhPSJVU0QiIFRpcG9DYW1iaW89IjE5LjYxMjgwMCIgVG90YWw9IjI2Njc2LjQwIiBUaXBvRGVDb21wcm9iYW50ZT0iSSIgTWV0b2RvUGFnbz0iUFBEIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iWEFYWDAxMDEwMTAwMCIgTm9tYnJlPSJWQUxFTyBOT1JUSCBBTUVSSUNBIElOQyIgVXNvQ0ZEST0iRzAxIi8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMTUxMjE1MTMiIE5vSWRlbnRpZmljYWNpb249IjYyMDM1NSIgQ2FudGlkYWQ9IjM0IiBDbGF2ZVVuaWRhZD0iSDg3IiBVbmlkYWQ9IkVBIiBEZXNjcmlwY2lvbj0iUkVDVUJSSU1JRU5UTyBMUkMgQ1VCRVRBIDVHQUwiIFZhbG9yVW5pdGFyaW89Ijc4NC42MDAwIiBJbXBvcnRlPSIyNjY3Ni40MCI+CgkJCTxjZmRpOkltcHVlc3Rvcz4KCQkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyNjY3Ni40MCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiLz4KCQkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSIwIj4KCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCTxjZmRpOlRyYXNsYWRvIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMDAwMDAwIiBJbXBvcnRlPSIwLjAwIi8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIFZlcnNpb249IjEuMSIgVVVJRD0iODQ1QTI4NkMtODRDNS00ODQ5LUFENjEtRERCRjhENDg1RERGIiBGZWNoYVRpbWJyYWRvPSIyMDIyLTA2LTE1VDExOjUwOjAzIiBSZmNQcm92Q2VydGlmPSJTRUQxMTAyMDg4SjciIFNlbGxvQ0ZEPSJBclpkVVJQSmpqajR0V0s4ODdDYWZpN2VXNnUrUHpydUJ1WEtIbUV0eS9RNURONEF1cTJsU0ZYUDNsMW9EdStyVW9rYXJFNzhEalIyWUp1V2RoZElRSkhpSXUzSVEraEpuNkVVUWJRVHliaVRvbmNCYmk5RW5LVUFxNVVseDZjTUlHS0tWNVBnL3BiakMzVERMcEdRd25OVThwNEN3Kzdnd0xoQzdjS1V3Q1dqaXk5Z0ZYV1ZvbEhsem4waGt1SWlMUURWd1lQSzJ5c3kwZFd2QnFMZUowYlhXM2JHK2dlNnJMT25wdDRKVmhGWmZlS0VweEIwT2JPNGgyYmNlNElEamRMV3JncHQ2QzZpMVhYZzlySXZtVWJsV0ZLRjlPejZ5YktLdDEybnRMd1NPNm9oUGRxZzZWL0J6cDR6anpSbk5TcUpUTDhET3hXNXYyQ0paVm1lVmc9PSIgTm9DZXJ0aWZpY2Fkb1NBVD0iMDAwMDEwMDAwMDA1MDM5MzgwMDEiIFNlbGxvU0FUPSJxbEhGa05SZ09BQ0Q1NzI0VHpZeEV5dFVtQTdLelRQQ3V0MjZ6THFXVDREV3psZnRCcm9NeE9HcGFVbVI3TUd0WkoxaU1YbDNQbGRtOW8zUmZESC95bWZDZTBhRFRjUlZIeEVEWXYxcXNEdHRySzJZZGl3L3kvRkNQaVdZWXVUejJtNmpPL09HaGZJTVhiSnQ4YytkRko4NzJ6Yzd5NWtZQWpOalhWcGxJTjFKWENjOHdlVXp3dFpDbExtRmRVTVJmQ0Z0YTE2OXZBMC9CdjA0Y0U2bXpkVWNrblVuaDJTUUpicnJFYnBUcmQyNVErTHdlbkp0dFBwQ3lzRjdpcS8yREZFNnlFVVV1S1NpL3lrWkt2T3hobkg4RXczU0htRnAyS3M4OVk2STZlc1BHMElsVkdpbk4yTHMxNlJMMVliQ3FCTGpqbmVQWFJ5NHJ2NUlIakl0aVE9PSIvPgoJCQk8bGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXMgdmVyc2lvbj0iMS4wIj4KCQkJPGxleWVuZGFzRmlzYzpMZXllbmRhIGRpc3Bvc2ljaW9uRmlzY2FsPSJSR0NFIiBub3JtYT0iNS4yLjYuIiB0ZXh0b0xleWVuZGE9IkRlIGNvbmZvcm1pZGFkIGFsIGFydMOtY3VsbyAyOSwgZnJhY2Npw7NuIEkgZGUgbGEgTGV5IGRlbCBJVkEgeSBsYSByZWdsYSA1LjIuNS4sIGZyYWNjacOzbiBJSSwgZGUgbGFzIFJlZ2xhcyBHZW5lcmFsZXMgZGUgQ29tZXJjaW8gRXh0ZXJpb3IgcGFyYSAyMDIyIHNlIHJlYWxpemEgbGEgcHJlc2VudGUgb3BlcmFjacOzbiBjdW1wbGllbmRvIGNvbiBsbyBlcyIvPgoJCTwvbGV5ZW5kYXNGaXNjOkxleWVuZGFzRmlzY2FsZXM+Cgk8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xml645 = ""
var xml647 = ""
var xml646 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczpjYXJ0YXBvcnRlMjA9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9DYXJ0YVBvcnRlMjAiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvMy9jZmR2MzMueHNkIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9DYXJ0YVBvcnRlMjAgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC9DYXJ0YVBvcnRlL0NhcnRhUG9ydGUyMC54c2QiIFZlcnNpb249IjMuMyIgU2VyaWU9IlRSIiBGb2xpbz0iMTM1IiBGZWNoYT0iMjAyMS0xMi0yOVQxNzozMjoyMCIgU3ViVG90YWw9IjAiIE1vbmVkYT0iWFhYIiBUb3RhbD0iMCIgVGlwb0RlQ29tcHJvYmFudGU9IlQiIEx1Z2FyRXhwZWRpY2lvbj0iNzYwMzAiIE5vQ2VydGlmaWNhZG89IjAwMDAxMDAwMDAwNTAyNTQzNTIzIiBDZXJ0aWZpY2Fkbz0iTUlJR0xEQ0NCQlNnQXdJQkFnSVVNREF3TURFd01EQXdNREExTURJMU5ETTFNak13RFFZSktvWklodmNOQVFFTEJRQXdnZ0dFTVNBd0hnWURWUVFEREJkQlZWUlBVa2xFUVVRZ1EwVlNWRWxHU1VOQlJFOVNRVEV1TUN3R0ExVUVDZ3dsVTBWU1ZrbERTVThnUkVVZ1FVUk5TVTVKVTFSU1FVTkpUMDRnVkZKSlFsVlVRVkpKUVRFYU1CZ0dBMVVFQ3d3UlUwRlVMVWxGVXlCQmRYUm9iM0pwZEhreEtqQW9CZ2txaGtpRzl3MEJDUUVXRzJOdmJuUmhZM1J2TG5SbFkyNXBZMjlBYzJGMExtZHZZaTV0ZURFbU1DUUdBMVVFQ1F3ZFFWWXVJRWhKUkVGTVIwOGdOemNzSUVOUFRDNGdSMVZGVWxKRlVrOHhEakFNQmdOVkJCRU1CVEEyTXpBd01Rc3dDUVlEVlFRR0V3Sk5XREVaTUJjR0ExVUVDQXdRUTBsVlJFRkVJRVJGSUUxRldFbERUekVUTUJFR0ExVUVCd3dLUTFWQlZVaFVSVTFQUXpFVk1CTUdBMVVFTFJNTVUwRlVPVGN3TnpBeFRrNHpNVnd3V2dZSktvWklodmNOQVFrQ0UwMXlaWE53YjI1ellXSnNaVG9nUVVSTlNVNUpVMVJTUVVOSlQwNGdRMFZPVkZKQlRDQkVSU0JUUlZKV1NVTkpUMU1nVkZKSlFsVlVRVkpKVDFNZ1FVd2dRMDlPVkZKSlFsVlpSVTVVUlRBZUZ3MHhPVEV5TWpBeU16TXhNekZhRncweU16RXlNakF5TXpNeE16RmFNSUg2TVRBd0xnWURWUVFERXlkRFFWTkJJRVJKUVZvZ1JFVWdUVUZSVlVsT1FWTWdSRVVnUTA5VFJWSWdVMEVnUkVVZ1ExWXhNREF1QmdOVkJDa1RKME5CVTBFZ1JFbEJXaUJFUlNCTlFWRlZTVTVCVXlCRVJTQkRUMU5GVWlCVFFTQkVSU0JEVmpFd01DNEdBMVVFQ2hNblEwRlRRU0JFU1VGYUlFUkZJRTFCVVZWSlRrRlRJRVJGSUVOUFUwVlNJRk5CSUVSRklFTldNU1V3SXdZRFZRUXRFeHhEUkUwM05qQXhNalJET0RVZ0x5QkVTVVZETXprd09URTBVMEkwTVI0d0hBWURWUVFGRXhVZ0x5QkVTVVZETXprd09URTBTRVJHV2xOT01EQXhHekFaQmdOVkJBc1RFa05HUkVrZ1JrRkRJRU5CVTBFZ1JFbEJXakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMQXdpSVpLalRDdFRyNisxVllTRzF5V0R5K1Z4YS9ITFFDNXFJT0R3ZmE4dkkvZWw3OTdCUHpkSHVRMEl3SVNIT1BUTXpUQk9zZkNPbFpLcHh6Ni80RitZY2syaCtnSzNiZ2l2MjllVEdGUEh5Nm9jT2dia2FESHYvTnh1T1B3d2ZKWmp5bWZqcXR0cm5pZUJuMVJSLzRZWE82QURyaTcvZHo0U3FTLy85NUVaQjZNbWdoNWRJSnAyNUxJTURBQ0JqdnovWE1HejJXbytLbDlIQjV0ODc0WlBQMzNQd1hFV1VTY3V6dkpJS3ZrVE9sdnYzbVVkdmxMRDJCcHJBd1VPQWxvYmpFR0lBMmNiZ2tYM1F0SmFPblphcWU4Ykhmd2N5cU5rVm5QN3d3L3BXaTlwb2pzLzlDaEd2UThxNHpIU1ZlZnhCQTJ5RUd2TktpRE1ER1RIZGNDQXdFQUFhTWRNQnN3REFZRFZSMFRBUUgvQkFJd0FEQUxCZ05WSFE4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUorTzFoSVZSdHlXZkxnblJSZU1GRVBVd3RxdGVkdTc5SmJ4cEk1Vkt3OWJtYWM4OElGQ1l2elJaem43U1lEZFlrY0lZeTJNeFY1cG8vRkUwdjRMb3gyTWhOd2VjM0RzaHBDOTJBNnJJcmxiTWcxRUY3MUdqVE1wa0haeWx0ZjhoZkpvTzgxcEJjR2xnUVlJRmd0WUtxMHZyUXVLUEh0UHN6cXlsS0hNVlVmcjVaWUh6Zk1VcGlldXNDdlFTcHlZaURpc2xrdkQ1K0J6NTNybTZPWVRvS2FieEUvclZJd3FqOWRxNVlQbzhadGpoZ1NLT2ZaUjBYSEJJTS8wMVp3ZFgvejdvVDJHZjlZclNkNGpRMy90UlRCQkxzZU81TDB0MmgyblRBK2wzbnZpMXRXMjRYMEVGRGNpYjRVZEtTaWREL1BFaG1rZ1diYTk3S0I1OGl5MWZTSTltS2pvbFZOUm5lRytEUjJYbDhDQlIzYmJ0SGlTUXJDcTFNTXcva2gwZjQ5eUloOGdjeTl6bm1kcHoxKzJxR0VIT2Q4YkdhWnpYbGR5MDJhMVRtUTFyRUNiZytWeHVGdEtZbklaaURnbGkrOVNPaW1nMGpEWWlyak9FMGZibU5BRm5obHFydER3NXBTWFdFNlhPOTJWQUdsNkhSc05VUkRFNzd0MXpaTWVSeFRuRzhFTlB5MjBvQW1HSUNQZ1FYRDhOckh6YjdQOWV0d1ZhQmhKeENyenFUdDZUTXloZlJ1N0piRlpra1BwZGlTaUJYNlM2TWRKU3hVcjZ3bkZnMUZrbzFwY2FDdjBsc1dKZGhZYWUwWjAzcHJIN1RjQ0l5RkpscFJBVHM4RlBvZlZVMjdqUEVjbTBFL2ZpSTdOcGxPOFFiK1B5WStlbGtEQU9TYnkwRFNrIiBTZWxsbz0iT3g5RS9heVJ1U29ORnNVakJRVFJ0N3RibTZCSXo1S2kzbjYzRnZVeHhaU2RwVkIzZjJibnhYdTBDV2pQWDFJTjVpUGp6SWppUmJuUTBOZ3pQZmo2dmRvbUhDb2R6dzA0T0VQOFlYZngrWHBJejNOeHIzemR3aXFuZHkrZDRqQytWTEhPNDRSblRxWXJMclRBWk54VmptWWc2Tkp2OFNzZ1daQlRzeW1VU2d1dG1VencrM3NHM3hRUm5jVU5rcE9EdXFZVE9ORkQrcTd2dkJad2t6ZUY4TkkvcDFyQ3RyQ3ZCak5hVnFvQlFNb1lnMndzdWZ3c3ptd1ZDRmtmbTZpeTJuVmkvb3hkN2tza2VlRktoODV1U0tPNnFKZStVVTAwdFBycXQvMEdZZFp1SUhEdng1MHpncHVvSmhKbjVtNlBTT0Q0Y0swamt6NHhOSkRPdE5WZmN3PT0iPgoJPGNmZGk6RW1pc29yIE5vbWJyZT0iQ0FTQSBESUFaIERFIE1BUVVJTkFTIERFIENPU0VSLFMuQS4gREUgQ1YuIiBSZWdpbWVuRmlzY2FsPSI2MDEiIFJmYz0iQ0RNNzYwMTI0Qzg1IiAvPgoJPGNmZGk6UmVjZXB0b3IgUmZjPSJDRE03NjAxMjRDODUiIE5vbWJyZT0iQ0FTQSBESUFaIERFIE1BUVVJTkFTIERFIENPU0VSLFMuQS4gREUgQ1YuIiBVc29DRkRJPSJQMDEiIC8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNzgxMDE4MDIiIENhbnRpZGFkPSIxLjAwIiBDbGF2ZVVuaWRhZD0iRTQ4IiBVbmlkYWQ9IlNFUlZJQ0lPIiBEZXNjcmlwY2lvbj0iVFJBU0xBRE8gREUgTUVSQ0FOQ0lBIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkNvbXBsZW1lbnRvPgoJCTxjYXJ0YXBvcnRlMjA6Q2FydGFQb3J0ZSBWZXJzaW9uPSIyLjAiIFRyYW5zcEludGVybmFjPSJObyIgVG90YWxEaXN0UmVjPSIzLjAwIj4KCQkJPGNhcnRhcG9ydGUyMDpVYmljYWNpb25lcz4KCQkJCTxjYXJ0YXBvcnRlMjA6VWJpY2FjaW9uIFRpcG9VYmljYWNpb249Ik9yaWdlbiIgSURVYmljYWNpb249Ik9SMDAwMTExIiBSRkNSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNETTc2MDEyNEM4NSIgTm9tYnJlUmVtaXRlbnRlRGVzdGluYXRhcmlvPSJDQVNBIERJQVogREUgTUFRVUlOQVMgREUgQ09TRVIsUy5BLiBERSBDViIgRmVjaGFIb3JhU2FsaWRhTGxlZ2FkYT0iMjAyMS0xMi0yOVQxNzowMDowMCI+CgkJCQkJPGNhcnRhcG9ydGUyMDpEb21pY2lsaW8gQ2FsbGU9IkZSQVkgU0VSVkFORE8gVEVSRVNBIERFIE1JRVIiIE51bWVyb0V4dGVyaW9yPSIyOSIgQ29sb25pYT0iMDk3NCIgTG9jYWxpZGFkPSIwNiIgTXVuaWNpcGlvPSIwMTUiIEVzdGFkbz0iRElGIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMDY4MDAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCQk8Y2FydGFwb3J0ZTIwOlViaWNhY2lvbiBUaXBvVWJpY2FjaW9uPSJEZXN0aW5vIiBJRFViaWNhY2lvbj0iREUwMDA5MDciIFJGQ1JlbWl0ZW50ZURlc3RpbmF0YXJpbz0iQ0FNODMwOTA1REo4IiBOb21icmVSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNBU0EgRElBWiBERSBNQVFVSU5BUyBERSBDT1NFUixTLkEuIERFIENWIiBGZWNoYUhvcmFTYWxpZGFMbGVnYWRhPSIyMDIxLTEyLTI5VDE5OjAwOjAwIiBEaXN0YW5jaWFSZWNvcnJpZGE9IjEuMDAiPgoJCQkJCTxjYXJ0YXBvcnRlMjA6RG9taWNpbGlvIENhbGxlPSJBVi4gU0FOIEpVQU4gREUgQVJBR09OIiBOdW1lcm9FeHRlcmlvcj0iTk8uIDU4MSIgQ29sb25pYT0iMTEyMCIgTG9jYWxpZGFkPSIwNyIgTXVuaWNpcGlvPSIwMDUiIEVzdGFkbz0iRElGIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMDc0ODAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCQk8Y2FydGFwb3J0ZTIwOlViaWNhY2lvbiBUaXBvVWJpY2FjaW9uPSJEZXN0aW5vIiBJRFViaWNhY2lvbj0iREUwMDA5MTAiIFJGQ1JlbWl0ZW50ZURlc3RpbmF0YXJpbz0iQ0FNODMwOTA1REo4IiBOb21icmVSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNBU0EgRElBWiBERSBNQVFVSU5BUyBERSBDT1NFUixTLkEuIERFIENWIiBGZWNoYUhvcmFTYWxpZGFMbGVnYWRhPSIyMDIxLTEyLTI5VDE5OjAwOjAwIiBEaXN0YW5jaWFSZWNvcnJpZGE9IjIuMDAiPgoJCQkJCTxjYXJ0YXBvcnRlMjA6RG9taWNpbGlvIENhbGxlPSJBVi4gVEFNQVpVTEEiIE51bWVyb0V4dGVyaW9yPSJOTy4gMTExNyIgQ29sb25pYT0iMTEwOSIgTG9jYWxpZGFkPSIwMiIgTXVuaWNpcGlvPSIwMDciIEVzdGFkbz0iRFVSIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMzUwNzAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCTwvY2FydGFwb3J0ZTIwOlViaWNhY2lvbmVzPgoJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYXMgUGVzb0JydXRvVG90YWw9IjE1LjMzMCIgVW5pZGFkUGVzbz0iS0dNIiBOdW1Ub3RhbE1lcmNhbmNpYXM9IjYiPgoJCQkJPGNhcnRhcG9ydGUyMDpNZXJjYW5jaWEgQmllbmVzVHJhbnNwPSIxMTE1MTcwMCIgRGVzY3JpcGNpb249IkhpbG9zIiBDYW50aWRhZD0iMTQyNi4wMDAwMDAiIENsYXZlVW5pZGFkPSJIODciIFBlc29FbktnPSI1LjE1NyIgVmFsb3JNZXJjYW5jaWE9IjAuMDAiIE1vbmVkYT0iTVhOIj4KCQkJCQk8Y2FydGFwb3J0ZTIwOkNhbnRpZGFkVHJhbnNwb3J0YSBDYW50aWRhZD0iMjQuMDAwMDAwIiBJRE9yaWdlbj0iT1IwMDAxMTEiIElERGVzdGlubz0iREUwMDA5MDciIC8+CgkJCQkJPGNhcnRhcG9ydGUyMDpDYW50aWRhZFRyYW5zcG9ydGEgQ2FudGlkYWQ9IjE0MDIuMDAwMDAwIiBJRE9yaWdlbj0iT1IwMDAxMTEiIElERGVzdGlubz0iREUwMDA5MTAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpNZXJjYW5jaWE+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjE1MTIxNTIwIiBEZXNjcmlwY2lvbj0iTHVicmljYW50ZXMgZGUgcHJvcC5fLnNpdG8gZ2VuZXJhbCIgQ2FudGlkYWQ9IjQuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMS42NzQiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6TWVyY2FuY2lhIEJpZW5lc1RyYW5zcD0iNDQxMjE2MTgiIERlc2NyaXBjaW9uPSJUaWplcmFzIiBDYW50aWRhZD0iMjQuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMC45NDgiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6TWVyY2FuY2lhIEJpZW5lc1RyYW5zcD0iNTMxNDE2MDAiIERlc2NyaXBjaW9uPSJTdW1pbmlzdHJvcyBkZSBjb3N0dXJhIHZhcmlhZG9zIiBDYW50aWRhZD0iNTYxLjAwMDAwMCIgQ2xhdmVVbmlkYWQ9Ikg4NyIgUGVzb0VuS2c9IjIuNjE3IiBWYWxvck1lcmNhbmNpYT0iMC4wMCIgTW9uZWRhPSJNWE4iIC8+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjUzMTQxNjA1IiBEZXNjcmlwY2lvbj0iQWd1amFzIGRlIGNvc3R1cmEiIENhbnRpZGFkPSI2MjAwLjAwMDAwMCIgQ2xhdmVVbmlkYWQ9Ikg4NyIgUGVzb0VuS2c9IjQuODY1IiBWYWxvck1lcmNhbmNpYT0iMC4wMCIgTW9uZWRhPSJNWE4iIC8+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjUzMTQxNjE0IiBEZXNjcmlwY2lvbj0iQWd1amFzIGRlIGJvcmRhZG8iIENhbnRpZGFkPSIxMDAuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMC4wNjkiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6QXV0b3RyYW5zcG9ydGUgUGVybVNDVD0iVFBBRjA3IiBOdW1QZXJtaXNvU0NUPSJQMDEtMTY0ODQxNCI+CgkJCQkJPGNhcnRhcG9ydGUyMDpJZGVudGlmaWNhY2lvblZlaGljdWxhciBDb25maWdWZWhpY3VsYXI9IkMyIiBQbGFjYVZNPSIxMjM0NTYiIEFuaW9Nb2RlbG9WTT0iMjAwOCIgLz4KCQkJCQk8Y2FydGFwb3J0ZTIwOlNlZ3Vyb3MgQXNlZ3VyYVJlc3BDaXZpbD0iUXVhbGl0YXMgQ29tcGFuaWEgZGUgU2VndXJvcywgUy5BLiBkZSBDLlYuIiBQb2xpemFSZXNwQ2l2aWw9IlFFMTU0NDQ4ODgxQSIgLz4KCQkJCTwvY2FydGFwb3J0ZTIwOkF1dG90cmFuc3BvcnRlPgoJCQk8L2NhcnRhcG9ydGUyMDpNZXJjYW5jaWFzPgoJCQk8Y2FydGFwb3J0ZTIwOkZpZ3VyYVRyYW5zcG9ydGU+CiAgICAgICAgICAJCQkJPGNhcnRhcG9ydGUyMDpUaXBvc0ZpZ3VyYSBUaXBvRmlndXJhPSIwMSIgUkZDRmlndXJhPSJHVVRFNjcwNzA3RFY5IiBOdW1MaWNlbmNpYT0iMTIzNDU2IiBOb21icmVGaWd1cmE9IlNBTEFaQVIgQ09OREUgRURVQVJETyBJVkFOIiAvPgoJCQk8L2NhcnRhcG9ydGUyMDpGaWd1cmFUcmFuc3BvcnRlPgoJCTwvY2FydGFwb3J0ZTIwOkNhcnRhUG9ydGU+Cgk8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIFZlcnNpb249IjEuMSIgVVVJRD0iNzhEQTg4RTAtM0MyMy00RUVCLUE3OUUtRUZFMDBFQUZBNjEzIiBGZWNoYVRpbWJyYWRvPSIyMDIxLTEyLTI5VDE3OjM0OjU3IiBSZmNQcm92Q2VydGlmPSJTRkUwODA3MTcyVzciIFNlbGxvQ0ZEPSJPeDlFL2F5UnVTb05Gc1VqQlFUUnQ3dGJtNkJJejVLaTNuNjNGdlV4eFpTZHBWQjNmMmJueFh1MENXalBYMUlONWlQanpJamlSYm5RME5nelBmajZ2ZG9tSENvZHp3MDRPRVA4WVhmeCtYcEl6M054cjN6ZHdpcW5keStkNGpDK1ZMSE80NFJuVHFZckxyVEFaTnhWam1ZZzZOSnY4U3NnV1pCVHN5bVVTZ3V0bVV6dyszc0czeFFSbmNVTmtwT0R1cVlUT05GRCtxN3Z2Qlp3a3plRjhOSS9wMXJDdHJDdkJqTmFWcW9CUU1vWWcyd3N1Zndzem13VkNGa2ZtNml5Mm5WaS9veGQ3a3NrZWVGS2g4NXVTS082cUplK1VVMDB0UHJxdC8wR1lkWnVJSER2eDUwemdwdW9KaEpuNW02UFNPRDRjSzBqa3o0eE5KRE90TlZmY3c9PSIgTm9DZXJ0aWZpY2Fkb1NBVD0iMjAwMDEwMDAwMDAzMDAwMjI3NzkiIFNlbGxvU0FUPSJDZ1NXNGhmNHNlbEo0L3FOYXRkb3pYVDNCeUxPQW9VeGIrNGZURTNXSDJwSVA3clViTXBUZnIzZStha3BPRkMyTVhFYWNQTmovQmZWVWE2d3J6TE4wVkM5QWRNTVkvOTh2b1IreWlhd3FrTS8vQWtlL0crODc4THZyWTR3TGVjdTFpMitmYklpQW10SndQQ3BKSzhoK3R6V0F6cDgxa1hYMGxzSlJxSmVkQzh5MU8rcTNXWXV1ZU1MZzFSTlFhVHdFS0RPRVFpV3RjUnhoY1ZWbXZNVVNzTlMzeU01anRtOXhFTFE5a1hBN1BqRmVtZWxFaU5nbzlReko5ZXNiZlBqVG00SXZUalZHbVZFUm1DVDRtdmpTdThtRm1VMU9QV0RTRS9TUWVHWDNqOSszNGJ3b2IxUGRmTWt1MjRoZXdQTG1NZXJKY3pzN1hxTmZpQUJrUDZ6cUE9PSIgLz48L2NmZGk6Q29tcGxlbWVudG8+Cgo8Y2ZkaTpBZGRlbmRhPgo8RGF0b3NBZGljaW9uYWxlcyBFTUFJTD0iZWd1dGllcnJlekBndGN0YS5teCIgLz4KPC9jZmRpOkFkZGVuZGE+PC9jZmRpOkNvbXByb2JhbnRlPg=="
var xml648 = ""
var xmlPagos = ""
var xmlIngreso1 ="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUkkiIEZvbGlvPSI5NDYzOCIgRmVjaGE9IjIwMjItMDYtMTZUMDg6MTE6NDgiIFNlbGxvPSIiIEZvcm1hUGFnbz0iOTkiIE5vQ2VydGlmaWNhZG89IiIgQ2VydGlmaWNhZG89IiIgQ29uZGljaW9uZXNEZVBhZ289IjMwIERJQVMgTkVUT1MiIFN1YlRvdGFsPSI5ODE4LjY4IiBNb25lZGE9Ik1YTiIgVGlwb0NhbWJpbz0iMSIgVG90YWw9IjExMzg5LjY3IiBUaXBvRGVDb21wcm9iYW50ZT0iSSIgTWV0b2RvUGFnbz0iUFBEIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iR09MQTg1MDcxMThDNiIgTm9tYnJlPSJBTE1BIEVTTUVSQUxEQSBHT05aQUxFWiBMRU9OIiBVc29DRkRJPSJHMDEiLz4KCTxjZmRpOkNvbmNlcHRvcz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIxMTE5MTYwMCIgTm9JZGVudGlmaWNhY2lvbj0iUExBU1RJQyIgQ2FudGlkYWQ9IjcwIiBDbGF2ZVVuaWRhZD0iNTgiIFVuaWRhZD0iS0ciIERlc2NyaXBjaW9uPSJQTEFTVElDTyIgVmFsb3JVbml0YXJpbz0iMy4wMDAwIiBJbXBvcnRlPSIyMTAuMDAiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSIyMTAuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSIzMy42MCIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iMTExOTE2MDAiIE5vSWRlbnRpZmljYWNpb249IlBBUEVSQk9BUkQiIENhbnRpZGFkPSIyNzgyIiBDbGF2ZVVuaWRhZD0iNTgiIFVuaWRhZD0iS0ciIERlc2NyaXBjaW9uPSJDQVJUT04iIFZhbG9yVW5pdGFyaW89IjEuMDAwMCIgSW1wb3J0ZT0iMjc4Mi4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI3ODIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSI0NDUuMTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjExMTkxNjAwIiBOb0lkZW50aWZpY2FjaW9uPSJTQ1JBUCIgQ2FudGlkYWQ9IjIyNjgiIENsYXZlVW5pZGFkPSI1OCIgVW5pZGFkPSJLRyIgRGVzY3JpcGNpb249IkNIQVRBUlJBIiBWYWxvclVuaXRhcmlvPSIzLjAxMDAiIEltcG9ydGU9IjY4MjYuNjgiID4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQk8Y2ZkaTpUcmFzbGFkbyBCYXNlPSI2ODI2LjY4IiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjE2MDAwMCIgSW1wb3J0ZT0iMTA5Mi4yNyIgLz4KCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjE1NzAuOTkiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjE1NzAuOTkiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KICAgICAgICA8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgCiAgICAgICAgICAgIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC9UaW1icmVGaXNjYWxEaWdpdGFsL1RpbWJyZUZpc2NhbERpZ2l0YWx2MTEueHNkIiAKICAgICAgICAgICAgVmVyc2lvbj0iMS4xIiAKICAgICAgICAgICAgVVVJRD0iZmM0NTA5ODQtNjI2NS00OWNlLTljNTktMzk1OGU5NDE3NDdkIiAKICAgICAgICAgICAgRmVjaGFUaW1icmFkbz0iMjAyMi0wNi0xNFQxNjoxOTozMSIgCiAgICAgICAgICAgIFJmY1Byb3ZDZXJ0aWY9IkxTTzEzMDYxODlSNSIgCiAgICAgICAgICAgIFNlbGxvQ0ZEPSJLc3Nrdm1tUXd0V0NZT1lIZUMwRjVFd0Z5Q24xeUJ1KzNrVG9YdThrbHcwMERRdDY2M2RMeG9HaUlleFlTbnBuTERLY1h6ZnZsWTNCd010cGw1SDZiN0pjT1FneUxOK0sxVTREd2JHRS9EV0hLVnBOTWpLaWYxaTdZN0FqRnByZGNhSzg2NVVacWhUdHFJK0Y4YTZEUGp5Yk10NmdlUkRUdHhURC9jdG8yU1FMcXV1NmZWL1NHVjI2bGpnSzFRd0tDOEt3MkdTNWdicDMyVEFIeVhEUjZkOENWLzRNdndKNHRxaEZhc2trdkprOHFtN3NMUlJ5MG5PVmliK0RQQVFCYktKVS83dG9FWGVienpRUm1aQ0dscU1ZVDdkWXlPbkhIcjIzeEVTTE85NHBMMXhtRTdjcUg5UCtMTWNVWTY0WkxxTkd3TStNUFcva3gzMmVIYUNIV3c9PSIgCiAgICAgICAgICAgIE5vQ2VydGlmaWNhZG9TQVQ9IjAwMDAxMDAwMDAwNTA5ODQ2NjYzIiAKICAgICAgICAgICAgU2VsbG9TQVQ9Imo2eWw4SFlrS2ZmbHFJKy93aTZGc0t4QzNXRFg0N09NZythT0N2aTBZdkdmMGFMazRhenlIWEF3L3VzT0NLaG52N2dzemZMRDJ3cTJCR2YzNUY0ZVhQLy8wN2t4aU56ZlJtZ0NsNmNNUVYreFhxL05pL2tNKzlVbDlUbTQ3eko5Mml1ZHNYUS8vK3kvbEtEMXNWTjlHc0dZODVERjNQWEVXWW5MMm54cFZKcWFjWE9VOExqemcyMGxjd0dYZUxZTExacmcyR2Q4RzBKaTRRUjBzZFZ5VTU3d0ZYN1hoZCtRSE5DeW9SM2RqUTlaNDZMOGdrelRMa0QwbStrTHJtRWJDdE9pNk9IRDlvRjlGc2liRlhXQTc3TmNPSFFteWoyenE5VzFROTEyaWJoOFltck53RFErMGpyc05WV09IZHhpKzhhK3FpTjBWdVBXRmYvQ1NoWkpnUT09IiAKICAgICAgICAgICAgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgCiAgICAgICAgICAgIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIC8+CiAgICA8L2NmZGk6Q29tcGxlbWVudG8+CjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xmlNotaCredito = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZXJpZT0iUk0iIEZvbGlvPSI5MjM4IiBGZWNoYT0iMjAyMi0wNi0yM1QxNzo1MzozNSIgU2VsbG89IiIgRm9ybWFQYWdvPSI5OSIgTm9DZXJ0aWZpY2Fkbz0iIiBDZXJ0aWZpY2Fkbz0iIiBTdWJUb3RhbD0iMjk4MiIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSIzNDU5LjEyIiBUaXBvRGVDb21wcm9iYW50ZT0iRSIgTWV0b2RvUGFnbz0iUFVFIiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KPGNmZGk6Q2ZkaVJlbGFjaW9uYWRvcyBUaXBvUmVsYWNpb249IjAzIiA+CjxjZmRpOkNmZGlSZWxhY2lvbmFkbyAgVVVJRD0iYTcxMTVlYmQtZjc4OC00ZGVhLTkyNjAtYjliNjdlZjY2OTllIiAvPgo8L2NmZGk6Q2ZkaVJlbGFjaW9uYWRvcz4KCTxjZmRpOkVtaXNvciBSZmM9IklQTTYyMDMyMjZCNCIgTm9tYnJlPSJJVFcgUG9seW1leCBTIERFIFJMIERFIENWIiBSZWdpbWVuRmlzY2FsPSI2MDEiLz4KCTxjZmRpOlJlY2VwdG9yIFJmYz0iREVMOTEwMzAxVFk0IiBOb21icmU9IkRJU1RSSUJVSURPUkEgRUxWQSBTQSBERSBDViIgVXNvQ0ZEST0iRzAyIi8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iODQxMTE1MDYiIE5vSWRlbnRpZmljYWNpb249IlJFVFVSTlMwNiIgQ2FudGlkYWQ9IjEiIENsYXZlVW5pZGFkPSJBQ1QiIFVuaWRhZD0iQWN0aXZpZGFkIiBEZXNjcmlwY2lvbj0iREVWT0xVQ0lPTiA1IENBSkFTIEFNRi04NSIgVmFsb3JVbml0YXJpbz0iMjk4Mi4wMCIgSW1wb3J0ZT0iMjk4Mi4wMCIgPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCTxjZmRpOlRyYXNsYWRvcz4KCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI5ODIuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMTYwMDAwIiBJbXBvcnRlPSI0NzcuMTIiIC8+CgkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkltcHVlc3RvcyBUb3RhbEltcHVlc3Rvc1RyYXNsYWRhZG9zPSI0NzcuMTIiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4xNjAwMDAiIEltcG9ydGU9IjQ3Ny4xMiIgLz4KCQk8L2NmZGk6VHJhc2xhZG9zPgoJPC9jZmRpOkltcHVlc3Rvcz4KCTxjZmRpOkNvbXBsZW1lbnRvPgogICAgICAgIDx0ZmQ6VGltYnJlRmlzY2FsRGlnaXRhbCAKICAgICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIAogICAgICAgICAgICBWZXJzaW9uPSIxLjEiIAogICAgICAgICAgICBVVUlEPSJmYzQ1MDk4NC02MjY1LTQ5Y2UtOWM1OS0zOTU4ZTk0MTc0N2QiIAogICAgICAgICAgICBGZWNoYVRpbWJyYWRvPSIyMDIyLTA2LTE0VDE2OjE5OjMxIiAKICAgICAgICAgICAgUmZjUHJvdkNlcnRpZj0iTFNPMTMwNjE4OVI1IiAKICAgICAgICAgICAgU2VsbG9DRkQ9Iktzc2t2bW1Rd3RXQ1lPWUhlQzBGNUV3RnlDbjF5QnUrM2tUb1h1OGtsdzAwRFF0NjYzZEx4b0dpSWV4WVNucG5MREtjWHpmdmxZM0J3TXRwbDVINmI3SmNPUWd5TE4rSzFVNER3YkdFL0RXSEtWcE5NaktpZjFpN1k3QWpGcHJkY2FLODY1VVpxaFR0cUkrRjhhNkRQanliTXQ2Z2VSRFR0eFREL2N0bzJTUUxxdXU2ZlYvU0dWMjZsamdLMVF3S0M4S3cyR1M1Z2JwMzJUQUh5WERSNmQ4Q1YvNE12d0o0dHFoRmFza2t2Sms4cW03c0xSUnkwbk9WaWIrRFBBUUJiS0pVLzd0b0VYZWJ6elFSbVpDR2xxTVlUN2RZeU9uSEhyMjN4RVNMTzk0cEwxeG1FN2NxSDlQK0xNY1VZNjRaTHFOR3dNK01QVy9reDMyZUhhQ0hXdz09IiAKICAgICAgICAgICAgTm9DZXJ0aWZpY2Fkb1NBVD0iMDAwMDEwMDAwMDA1MDk4NDY2NjMiIAogICAgICAgICAgICBTZWxsb1NBVD0iajZ5bDhIWWtLZmZscUkrL3dpNkZzS3hDM1dEWDQ3T01nK2FPQ3ZpMFl2R2YwYUxrNGF6eUhYQXcvdXNPQ0tobnY3Z3N6ZkxEMndxMkJHZjM1RjRlWFAvLzA3a3hpTnpmUm1nQ2w2Y01RVit4WHEvTmkva00rOVVsOVRtNDd6SjkyaXVkc1hRLy8reS9sS0Qxc1ZOOUdzR1k4NURGM1BYRVdZbkwybnhwVkpxYWNYT1U4TGp6ZzIwbGN3R1hlTFlMTFpyZzJHZDhHMEppNFFSMHNkVnlVNTd3Rlg3WGhkK1FITkN5b1IzZGpROVo0Nkw4Z2t6VExrRDBtK2tMcm1FYkN0T2k2T0hEOW9GOUZzaWJGWFdBNzdOY09IUW15ajJ6cTlXMVE5MTJpYmg4WW1yTndEUSswanJzTlZXT0hkeGkrOGErcWlOMFZ1UFdGZi9DU2haSmdRPT0iIAogICAgICAgICAgICB4bWxuczp0ZmQ9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIiAKICAgICAgICAgICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgLz4KICAgIDwvY2ZkaTpDb21wbGVtZW50bz4KPC9jZmRpOkNvbXByb2JhbnRlPgo="
var xmlComercioExterior = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIgoJeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKCXhtbG5zOmNjZTExPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvQ29tZXJjaW9FeHRlcmlvcjExIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCBodHRwOi8vd3d3LnNhdC5nb2IubXgvQ29tZXJjaW9FeHRlcmlvcjExIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9pbmZvcm1hY2lvbl9maXNjYWwvZmFjdHVyYV9lbGVjdHJvbmljYS9Eb2N1bWVudHMvQ29tcGxlbWVudG9zY2ZkaS9Db21lcmNpb0V4dGVyaW9yMTEueHNkIiBWZXJzaW9uPSIzLjMiIFNlcmllPSJSSSIgRm9saW89Ijk0MDk5IiBGZWNoYT0iMjAyMi0wNi0wM1QxNjo0NzoxMSIgU2VsbG89IiIgRm9ybWFQYWdvPSIwMyIgTm9DZXJ0aWZpY2Fkbz0iIiBDZXJ0aWZpY2Fkbz0iIiBDb25kaWNpb25lc0RlUGFnbz0iUEFHTyBBTlRJQ0lQQURPIiBTdWJUb3RhbD0iMzEzNzEuMiIgTW9uZWRhPSJVU0QiIFRpcG9DYW1iaW89IjIwLjI5OTIwMCIgVG90YWw9IjMxMzcxLjIiIFRpcG9EZUNvbXByb2JhbnRlPSJJIiBNZXRvZG9QYWdvPSJQVUUiIEx1Z2FyRXhwZWRpY2lvbj0iNjQ5ODgiPgoJPGNmZGk6RW1pc29yIFJmYz0iSVBNNjIwMzIyNkI0IiBOb21icmU9IklUVyBQb2x5bWV4IFMgREUgUkwgREUgQ1YiIFJlZ2ltZW5GaXNjYWw9IjYwMSIvPgoJPGNmZGk6UmVjZXB0b3IgUmZjPSJYRVhYMDEwMTAxMDAwIiBOb21icmU9IlBFUk5PRlVMTCBTLlIuTCIgUmVzaWRlbmNpYUZpc2NhbD0iQk9MIiBOdW1SZWdJZFRyaWI9IjAwMjE2ODI0MDIyIiBVc29DRkRJPSJQMDEiLz4KCTxjZmRpOkNvbmNlcHRvcz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIxNTEyMTgwNyIgTm9JZGVudGlmaWNhY2lvbj0iQVBDNjAiIENhbnRpZGFkPSI5NTAiIENsYXZlVW5pZGFkPSJYNEciIFVuaWRhZD0iQ0EiIERlc2NyaXBjaW9uPSJBTlRJTkNPTkdFTEFOVEUgQ09OQy4gR0FMLiBQVFgiIFZhbG9yVW5pdGFyaW89IjI2LjQ0MDAiIEltcG9ydGU9IjI1MTE4LjAwIj4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjI1MTE4LjAwIiBJbXB1ZXN0bz0iMDAyIiBUaXBvRmFjdG9yPSJUYXNhIiBUYXNhT0N1b3RhPSIwLjAwMDAwMCIgSW1wb3J0ZT0iMC4wMCIgLz4KCQkJCTwvY2ZkaTpUcmFzbGFkb3M+CgkJCTwvY2ZkaTpJbXB1ZXN0b3M+CgkJPC9jZmRpOkNvbmNlcHRvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjE1MTIxODA3IiBOb0lkZW50aWZpY2FjaW9uPSJBUE82MCIgQ2FudGlkYWQ9IjkwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iQU5ULiBPUkdBTklDTyBMUFVTQVIgR0FMT04iIFZhbG9yVW5pdGFyaW89IjE5LjQ4MDAiIEltcG9ydGU9IjE3NTMuMjAiPgoJCQk8Y2ZkaTpJbXB1ZXN0b3M+CgkJCQk8Y2ZkaTpUcmFzbGFkb3M+CgkJCQkJPGNmZGk6VHJhc2xhZG8gQmFzZT0iMTc1My4yMCIgSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJCQk8L2NmZGk6VHJhc2xhZG9zPgoJCQk8L2NmZGk6SW1wdWVzdG9zPgoJCTwvY2ZkaTpDb25jZXB0bz4KCQk8Y2ZkaTpDb25jZXB0byBDbGF2ZVByb2RTZXJ2PSIzMTE5MTUwOSIgTm9JZGVudGlmaWNhY2lvbj0iMzEtQSIgQ2FudGlkYWQ9IjMwIiBDbGF2ZVVuaWRhZD0iWDRHIiBVbmlkYWQ9IkNBIiBEZXNjcmlwY2lvbj0iVkVMT0NJTCBET0JMRSBGT05ETyA1NEciIFZhbG9yVW5pdGFyaW89IjE1MC4wMDAwIiBJbXBvcnRlPSI0NTAwLjAwIj4KCQkJPGNmZGk6SW1wdWVzdG9zPgoJCQkJPGNmZGk6VHJhc2xhZG9zPgoJCQkJCTxjZmRpOlRyYXNsYWRvIEJhc2U9IjQ1MDAuMDAiIEltcHVlc3RvPSIwMDIiIFRpcG9GYWN0b3I9IlRhc2EiIFRhc2FPQ3VvdGE9IjAuMDAwMDAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCQkJPC9jZmRpOlRyYXNsYWRvcz4KCQkJPC9jZmRpOkltcHVlc3Rvcz4KCQk8L2NmZGk6Q29uY2VwdG8+Cgk8L2NmZGk6Q29uY2VwdG9zPgoJPGNmZGk6SW1wdWVzdG9zIFRvdGFsSW1wdWVzdG9zVHJhc2xhZGFkb3M9IjAiPgoJCTxjZmRpOlRyYXNsYWRvcz4KCQkJPGNmZGk6VHJhc2xhZG8gSW1wdWVzdG89IjAwMiIgVGlwb0ZhY3Rvcj0iVGFzYSIgVGFzYU9DdW90YT0iMC4wMDAwMDAiIEltcG9ydGU9IjAuMDAiIC8+CgkJPC9jZmRpOlRyYXNsYWRvcz4KCTwvY2ZkaTpJbXB1ZXN0b3M+Cgk8Y2ZkaTpDb21wbGVtZW50bz4KCQk8Y2NlMTE6Q29tZXJjaW9FeHRlcmlvciBWZXJzaW9uPSIxLjEiIFRpcG9PcGVyYWNpb249IjIiIENsYXZlRGVQZWRpbWVudG89IkExIiBDZXJ0aWZpY2Fkb09yaWdlbj0iMCIgSW5jb3Rlcm09IkZBUyIgU3ViZGl2aXNpb249IjAiIFRpcG9DYW1iaW9VU0Q9IjIwLjI5OTIwMCIgVG90YWxVU0Q9IjMxMzcxLjIwIj4KCQkJPGNjZTExOkVtaXNvcj4KCQkJCTxjY2UxMTpEb21pY2lsaW8gQ2FsbGU9IkNBUlJFVEVSQSBOQUNJT05BTCIgTnVtZXJvRXh0ZXJpb3I9Ijc4MjEiIENvbG9uaWE9IjA1NDYiIExvY2FsaWRhZD0iMDciIE11bmljaXBpbz0iMDM5IiBFc3RhZG89Ik5MRSIgUGFpcz0iTUVYIiBDb2RpZ29Qb3N0YWw9IjY0OTg4Ii8+CgkJCTwvY2NlMTE6RW1pc29yPgoJCQk8Y2NlMTE6UmVjZXB0b3I+CgkJCQk8Y2NlMTE6RG9taWNpbGlvIENhbGxlPSJBVkVOSURBIDEiIE51bWVyb0V4dGVyaW9yPSJOby4zIiBDb2xvbmlhPSJaT05BIFZJTExBIFJPU0FTIFBBTVBBIiBNdW5pY2lwaW89IkJPTElWSUEiIEVzdGFkbz0iTFAiIFBhaXM9IkJPTCIgQ29kaWdvUG9zdGFsPSIwMDAwMCIvPgoJCQk8L2NjZTExOlJlY2VwdG9yPgoJCQk8Y2NlMTE6TWVyY2FuY2lhcz4KCQkJCTxjY2UxMTpNZXJjYW5jaWEgTm9JZGVudGlmaWNhY2lvbj0iQVBDNjAiIEZyYWNjaW9uQXJhbmNlbGFyaWE9IjM4MjAwMDAxMDAiIENhbnRpZGFkQWR1YW5hPSIxNTM1Mi4wMCIgVW5pZGFkQWR1YW5hPSIwOCIgVmFsb3JVbml0YXJpb0FkdWFuYT0iMS42NCIgVmFsb3JEb2xhcmVzPSIyNTExOC4wMCI+CgkJCQkJPGNjZTExOkRlc2NyaXBjaW9uZXNFc3BlY2lmaWNhcyBNYXJjYT0iUEVSTUFURVgiIE1vZGVsbz0iQU5USUNPTkdFTEFOVEVTIiBTdWJNb2RlbG89IlBST0RVQ1RPIFBBUkEgUkFESUFET1IiIC8+CgkJCQk8L2NjZTExOk1lcmNhbmNpYT4KCQkJCTxjY2UxMTpNZXJjYW5jaWEgTm9JZGVudGlmaWNhY2lvbj0iQVBPNjAiIEZyYWNjaW9uQXJhbmNlbGFyaWE9IjM4MjAwMDAxMDAiIENhbnRpZGFkQWR1YW5hPSIxNDA3LjYwIiBVbmlkYWRBZHVhbmE9IjA4IiBWYWxvclVuaXRhcmlvQWR1YW5hPSIxLjI1IiBWYWxvckRvbGFyZXM9IjE3NTMuMjAiPgoJCQkJCTxjY2UxMTpEZXNjcmlwY2lvbmVzRXNwZWNpZmljYXMgTWFyY2E9IlBFUk1BVEVYIiBNb2RlbG89IkFOVElDT05HRUxBTlRFUyIgU3ViTW9kZWxvPSJQUk9EVUNUT1MgUEFSQSBSQURJQURPUiIgLz4KCQkJCTwvY2NlMTE6TWVyY2FuY2lhPgoJCQkJPGNjZTExOk1lcmNhbmNpYSBOb0lkZW50aWZpY2FjaW9uPSIzMS1BIiBGcmFjY2lvbkFyYW5jZWxhcmlhPSIzNDAzMTk5OTAwIiBDYW50aWRhZEFkdWFuYT0iMjEwLjAwIiBVbmlkYWRBZHVhbmE9IjAxIiBWYWxvclVuaXRhcmlvQWR1YW5hPSIyMS40MyIgVmFsb3JEb2xhcmVzPSI0NTAwLjAwIj4KCQkJCQk8Y2NlMTE6RGVzY3JpcGNpb25lc0VzcGVjaWZpY2FzIE1hcmNhPSJRVUlNSUNBIFRGIiBNb2RlbG89IlBST0RVQ1RPUyBFU1BFQ0lBTEVTIiBOdW1lcm9TZXJpZT0iODc1MDEzNzczMDUwMjAiIFN1Yk1vZGVsbz0iRVNNRVJJTCBCQVNFIEdSQVNBIiAvPgoJCQkJPC9jY2UxMTpNZXJjYW5jaWE+CgkJCTwvY2NlMTE6TWVyY2FuY2lhcz4KCQk8L2NjZTExOkNvbWVyY2lvRXh0ZXJpb3I+CgkJPHRmZDpUaW1icmVGaXNjYWxEaWdpdGFsIAogICAgICAgICAgICB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9UaW1icmVGaXNjYWxEaWdpdGFsIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvVGltYnJlRmlzY2FsRGlnaXRhbC9UaW1icmVGaXNjYWxEaWdpdGFsdjExLnhzZCIgCiAgICAgICAgICAgIFZlcnNpb249IjEuMSIgCiAgICAgICAgICAgIFVVSUQ9ImZjNDUwOTg0LTYyNjUtNDljZS05YzU5LTM5NThlOTQxNzQ3ZCIgCiAgICAgICAgICAgIEZlY2hhVGltYnJhZG89IjIwMjItMDYtMTRUMTY6MTk6MzEiIAogICAgICAgICAgICBSZmNQcm92Q2VydGlmPSJMU08xMzA2MTg5UjUiIAogICAgICAgICAgICBTZWxsb0NGRD0iS3Nza3ZtbVF3dFdDWU9ZSGVDMEY1RXdGeUNuMXlCdSsza1RvWHU4a2x3MDBEUXQ2NjNkTHhvR2lJZXhZU25wbkxES2NYemZ2bFkzQndNdHBsNUg2YjdKY09RZ3lMTitLMVU0RHdiR0UvRFdIS1ZwTk1qS2lmMWk3WTdBakZwcmRjYUs4NjVVWnFoVHRxSStGOGE2RFBqeWJNdDZnZVJEVHR4VEQvY3RvMlNRTHF1dTZmVi9TR1YyNmxqZ0sxUXdLQzhLdzJHUzVnYnAzMlRBSHlYRFI2ZDhDVi80TXZ3SjR0cWhGYXNra3ZKazhxbTdzTFJSeTBuT1ZpYitEUEFRQmJLSlUvN3RvRVhlYnp6UVJtWkNHbHFNWVQ3ZFl5T25ISHIyM3hFU0xPOTRwTDF4bUU3Y3FIOVArTE1jVVk2NFpMcU5Hd00rTVBXL2t4MzJlSGFDSFd3PT0iIAogICAgICAgICAgICBOb0NlcnRpZmljYWRvU0FUPSIwMDAwMTAwMDAwMDUwOTg0NjY2MyIgCiAgICAgICAgICAgIFNlbGxvU0FUPSJqNnlsOEhZa0tmZmxxSSsvd2k2RnNLeEMzV0RYNDdPTWcrYU9DdmkwWXZHZjBhTGs0YXp5SFhBdy91c09DS2hudjdnc3pmTEQyd3EyQkdmMzVGNGVYUC8vMDdreGlOemZSbWdDbDZjTVFWK3hYcS9OaS9rTSs5VWw5VG00N3pKOTJpdWRzWFEvLyt5L2xLRDFzVk45R3NHWTg1REYzUFhFV1luTDJueHBWSnFhY1hPVThManpnMjBsY3dHWGVMWUxMWnJnMkdkOEcwSmk0UVIwc2RWeVU1N3dGWDdYaGQrUUhOQ3lvUjNkalE5WjQ2TDhna3pUTGtEMG0ra0xybUViQ3RPaTZPSEQ5b0Y5RnNpYkZYV0E3N05jT0hRbXlqMnpxOVcxUTkxMmliaDhZbXJOd0RRKzBqcnNOVldPSGR4aSs4YStxaU4wVnVQV0ZmL0NTaFpKZ1E9PSIgCiAgICAgICAgICAgIHhtbG5zOnRmZD0iaHR0cDovL3d3dy5zYXQuZ29iLm14L1RpbWJyZUZpc2NhbERpZ2l0YWwiIAogICAgICAgICAgICB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiAvPgoJPC9jZmRpOkNvbXBsZW1lbnRvPgo8L2NmZGk6Q29tcHJvYmFudGU+"

async function getPDFGtc(docBase64, pathLogo)
{

    try {

        logger.info('Procesando PDF de Factura de GTC.');

        var xmlString = await xml.serializeXML(docBase64)

        var options = {compact: false, ignoreComment: true, spaces: 4};
        const jsonString = convert.xml2json(xmlString, options);
        const jsonData = JSON.parse(jsonString)
        var conceptos = jsonData.elements[0].elements.find( o => o.name === "cfdi:Conceptos")
        var attributes = jsonData.elements[0].attributes
        var emisor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Emisor")
        var receptor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Receptor")
        var impuestos = jsonData.elements[0].elements.find( o => o.name === "cfdi:Impuestos")
        var trasladosN, retencionesN;
        if(impuestos !== undefined)
        {
            trasladosN = impuestos.elements.find( o => o.name === "cfdi:Traslados")
            retencionesN = impuestos.elements.find( o => o.name === "cfdi:Retenciones")
        }
        var complemento = jsonData.elements[0].elements.find( o => o.name === "cfdi:Complemento")
        var timbreFiscal = complemento.elements.find( o => o.name === "tfd:TimbreFiscalDigital")
        var leyendaFiscal = complemento.elements.find( o => o.name === "leyendasFisc:LeyendasFiscales")
        var cartaP = complemento.elements.find( o => o.name === "cartaporte20:CartaPorte")
        var cfdiRelacionados = jsonData.elements[0].elements.find( o => o.name === "cfdi:CfdiRelacionados")
        var complementoPago = complemento.elements.find( o => o.name === "pago20:Pagos")
        var comercioExterior = complemento.elements.find( o => o.name === "cce11:ComercioExterior")

        var encabezado2 = {
            table: {
                widths: ['*'],
                body: [
                    [
                        {border: [false, false, false, false], fillColor: "#1C932B", text:"CFDI versión " + attributes.Version , alignment: 'center', style: 'textotablawhite'},
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'black';
                },
                vLineColor: function () {
                    return 'black';
                },
            }	
        }

        var paramsTipoComprobante = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.TipoDeComprobante,
            table: "SAT_Cat_Receipt_Types"
        }

        var resTipoComprobante = await dbcatcatalogs.getCatalogIdDescription(paramsTipoComprobante);

        var logo = {
            columns: [
                [
                    {text: resTipoComprobante, alignment: 'left', style: 'textoheader'},
                    {text: "\n", alignment: 'left', style: 'textotablaboldlarge'},
                    {
                        table: {
                            widths: [70,70,"*"],
                            body: [
                                [
                                    {fillColor: "#1C932B", border: [true, true, false, false], text: `Serie`, style: 'textotablacolor', alignment: "center"},
                                    {fillColor: "#1C932B", border: [false, true, false, false], text: `Folio`, style: 'textotablacolor', alignment: "center"}, 
                                    {fillColor: "#1C932B", border: [false, true, true, false], text: `Fecha`, style: 'textotablacolor', alignment: "center"}, 
                                ],
                                [
                                    {border: [true, false, false, true], text: attributes.Serie, style: 'textotablaEmisorReceptor', alignment: "center"},
                                    {border: [false, false, false, true], text: attributes.Folio, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                    {border: [false, false, true, true], text: attributes.Fecha, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                                ],
                            ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'black';
                            },
                            vLineColor: function () {
                                return 'black';
                            },
                        }	
                    }
                ],
                [
                    { image: pathLogo, width: 100, height: 80, alignment: 'right'},
                ]
            ]
        }

        var paramsRegimenFiscalEmisor = {
            pvOptionCRUD: "R",
            pvIdCatalog: emisor.attributes.RegimenFiscal,
            table: "SAT_Cat_Tax_Regimens"
        }

        var resTaxRegimenEmisor = await dbcatcatalogs.getCatalogIdDescription(paramsRegimenFiscalEmisor)

        var paramsRegimenFiscalReceptor = {
            pvOptionCRUD: "R",
            pvIdCatalog: receptor.attributes.RegimenFiscalReceptor,
            table: "SAT_Cat_Tax_Regimens"
        }

        var resTaxRegimenReceptor = await dbcatcatalogs.getCatalogIdDescription(paramsRegimenFiscalReceptor)
        
        var paramsUsoCFDI = {
            pvOptionCRUD: "R",
            pvIdCatalog: receptor.attributes.UsoCFDI,
            table: "SAT_Cat_CFDI_Uses"
        }

        var resUsoCFDI = await dbcatcatalogs.getCatalogIdDescription(paramsUsoCFDI)

        var emisorReceptor = 
        {
            table: {
                widths: ["*", 262],
                body: [
                    [
                        {text: 
                            [
                                {text: `EMISOR\n`, style: 'textotablaboldlarge'},
                                {text: `\n`},
                                {text: `Nombre o Razón Social:\n`, style: 'textotablaEmisorReceptor'},
                                {text: emisor.attributes.Nombre + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: "RFC: " + emisor.attributes.Rfc + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Régimen Fiscal: " + emisor.attributes.RegimenFiscal + " - " + resTaxRegimenEmisor, style: 'textotablaEmisorReceptor'},
                            ]
                        },
                        {text: 
                            [
                                {text: `RECEPTOR\n`, style: 'textotablaboldlarge'},
                                {text: `\n`},
                                {text: `Nombre o Razón Social:\n`, style: 'textotablaEmisorReceptor'},
                                {text: receptor.attributes.Nombre + `\n`, style: 'textotablaEmisorReceptor'},
                                {text: "RFC: " + receptor.attributes.Rfc + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Régimen Fiscal: " + receptor.attributes.RegimenFiscalReceptor + " - " + resTaxRegimenReceptor + "\n", style: 'textotablaEmisorReceptor'},
                                {text: "Uso de CFDI: " + receptor.attributes.UsoCFDI + " - " + resUsoCFDI, style: 'textotablaEmisorReceptor'},
                            ]
                        },
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'black';
                },
                vLineColor: function () {
                    return 'black';
                },
            }	
        }

        var cfdiRel = {}
        var cfdiR = []
        var psItems = 0;

        if(cfdiRelacionados !== undefined)
        {
            var paramsRelationshipType = {
                pvOptionCRUD: "R",
                pvIdCatalog: cfdiRelacionados.attributes.TipoRelacion,
                table: "SAT_Cat_Relationship_Types"
            }
    
            var resRelationshipType = await dbcatcatalogs.getCatalogIdDescription(paramsRelationshipType)

            cfdiR[psItems] = [
                {fillColor: "#1C932B", border: [true, true, true, false], text: `CFDIs Relacionados`, style: 'textotablacolor', alignment: "center"},
            ]
    
            psItems++

            cfdiR[psItems] = [
                {border: [true, true, true, true], text: [
                    {text: `Tipo de Relación: `, style: 'textotablaEmisorReceptorBold'},
                    {text: cfdiRelacionados.attributes.TipoRelacion + " - " + resRelationshipType, style: 'textotablaEmisorReceptor'},
                ]},
            ]
    
            psItems++

            for(var i=0; i<cfdiRelacionados.elements.length; i++)
            {
                if(i===0)
                {
                    cfdiR[psItems] = [
                        {border: [true, false, true, true], text: [
                            {text: `UUID Relacionado: `, style: 'textotablaEmisorReceptorBold'},
                            {text: cfdiRelacionados.elements[i].attributes.UUID, style: 'textotablaEmisorReceptor'},
                        ]},
                    ]
            
                    psItems++
                }
                else if(i === cfdiRelacionados.elements.length-1)
                {
                    cfdiR[psItems] = [
                        {border: [true, false, true, true], text: [
                            {text: `UUID Relacionado: `, style: 'textotablaEmisorReceptorBold'},
                            {text: cfdiRelacionados.elements[i].attributes.UUID, style: 'textotablaEmisorReceptor'},
                        ]},
                    ]
            
                    psItems++
                }
                else {
                    cfdiR[psItems] = [
                        {border: [true, false, true, false], text: [
                            {text: `UUID Relacionado: `, style: 'textotablaEmisorReceptorBold'},
                            {text: cfdiRelacionados.elements[i].attributes.UUID, style: 'textotablaEmisorReceptor'},
                        ]},
                    ]
            
                    psItems++
                }
            }

            cfdiRel = [
                {
                    table: {
                        widths: ["*"],
                        body: cfdiR
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text:  "\n"}
            ]
        }

        var paramsMoneda= {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.Moneda,
            table: "SAT_Cat_Currencies"
        }

        var resMoneda = await dbcatcatalogs.getCatalogIdDescription(paramsMoneda);

        var paramsMetodoPago = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.MetodoPago,
            table: "SAT_Cat_Payment_Methods"
        }

        var resMetodoPago = await dbcatcatalogs.getCatalogIdDescription(paramsMetodoPago);

        var monedaMetodo = 
        [
            {
                table: {
                    widths: [165,"*",165],
                    body: [
                        [
                            {border: [true, true, true, false], text: `Moneda`, style: 'textotablaEmisorReceptorBold', alignment: "center"},
                            {border: [true, true, true, false], text: `Método de Pago`, style: 'textotablaEmisorReceptorBold', alignment: "center"}, 
                            {border: [true, true, true, false], text: `UUID`, style: 'textotablaEmisorReceptorBold', alignment: "center"}, 
                        ],
                        [
                            {border: [true, false, true, true], text: attributes.Moneda + " - " + resMoneda, style: 'textotablaEmisorReceptor', alignment: "center"},
                            {border: [true, false, true, true], text:  attributes.MetodoPago + " - " + resMetodoPago, style: 'textotablaEmisorReceptor', alignment: "center"}, 
                            {border: [true, false, true, true], text: timbreFiscal.attributes.UUID, style: 'textotabla4', alignment: "center"}, 
                        ],
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            },
            {text:  "\n"}
        ]
        
        var concepts = []
        psItems = 0;

        concepts[psItems] = [
            {fillColor: "#1C932B", border: [true, true, false, true], text: `Clave Producto`, style: 'textotabla2', alignment: "center"},
            {fillColor: "#1C932B", border: [false, true, false, true], text: `Cantidad`, style: 'textotabla2', alignment: "center"},
            {fillColor: "#1C932B", border: [false, true, false, true], text: `Clave Unidad`, style: 'textotabla2', alignment: "center"}, 
            {fillColor: "#1C932B", border: [false, true, false, true], text: `Descripción`, style: 'textotabla2', alignment: "center"}, 
            {fillColor: "#1C932B", border: [false, true, false, true], text: `Unidad`, style: 'textotabla2', alignment: "center"}, 
            {fillColor: "#1C932B", border: [false, true, false, true], text: `Precio Unitario`, style: 'textotabla2', alignment: "center"}, 
            {fillColor: "#1C932B", border: [false, true, true, true], text: `Importe`, style: 'textotabla2', alignment: "center"}, 
        ]

        psItems++

        //Iteramos cada uno de los conceptos
        for(var i=0; i<conceptos.elements.length; i++)
        {
            if(conceptos.elements[i].elements !== undefined)
            {
                var impuestos, traslados, retenciones, informacionAduanera;
                var impuestos = conceptos.elements[i].elements.find( o => o.name === "cfdi:Impuestos")
                var traslados = impuestos.elements.find( o => o.name === "cfdi:Traslados")
                var retenciones = impuestos.elements.find( o => o.name === "cfdi:Retenciones")
                var informacionAduanera = conceptos.elements[i].elements.find( o => o.name === "cfdi:InformacionAduanera")
            }
            
            if(i !== conceptos.elements.length-1)
            {
                concepts[psItems] = [
                    {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                    {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                    {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion, style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"}, 
                    {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                    {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                ]
        
                psItems++
                
                if(traslados !== undefined)
                {
                    for(var j=0; j<traslados.elements.length; j++)
                    {
                        if(j===0)
                        {
                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "Traslados", style: 'textotablaboldblack', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#020167", border: [true, true, false, true], text: "Base", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#020167", border: [false, true, false, true], text: "Impuesto", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, false, true], text: "Tipo Factor", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, false, true], text: "Tasa O Cuota", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, true, true], text: "Importe", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, false, true], text: traslados.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, true, true], text: "$" + parseFloat(traslados.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++
                            
                        }
                        else {
                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, false, true], text: traslados.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, true, true], text: "$" + parseFloat(traslados.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++
                        }
                    }
                }

                if(retenciones !== undefined)
                {
                    for(var j=0; j<retenciones.elements.length; j++)
                    {
                        if(j===0)
                        {
                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "Retenciones", style: 'textotablaboldblack', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#f40506", border: [true, true, false, true], text: "Base", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#f40506", border: [false, true, false, true], text: "Impuesto", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#f40506", border: [false, true, false, true], text: "Tipo Factor", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#f40506", border: [false, true, false, true], text: "Tasa O Cuota", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#f40506", border: [false, true, false, true], text: "Importe", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: "$" + parseFloat(retenciones.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++
                            
                        }
                        else {
                            concepts[psItems] = [
                                {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: retenciones.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [true, true, true, true], text: "$" + parseFloat(retenciones.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++
                        }
                    }
                }
            }
            else {
                if(traslados !== undefined)
                {
                    concepts[psItems] = [
                        {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                    ]
            
                    psItems++

                    for(var j=0; j<traslados.elements.length; j++)
                    {
                        if(j===0)
                        {
                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, false], text: "Traslados", style: 'textotablaboldblack', alignment: "center"},
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#020167", border: [true, true, false, true], text: "Base", style: 'textotabla2', alignment: "center"},
                                {fillColor: "#020167", border: [false, true, false, true], text: "Impuesto", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, false, true], text: "Tipo Factor", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, false, true], text: "Tasa O Cuota", style: 'textotabla2', alignment: "center"}, 
                                {fillColor: "#020167", border: [false, true, true, true], text: "Importe", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, false, true], text: traslados.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, true, true], text: "$" + parseFloat(traslados.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            if(traslados.elements.length === 1)
                            {
                                concepts[psItems] = [
                                    {border: [true, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, true, true], text:""}, 
                                ]
                        
                                psItems++
                            }
                            else {
                                concepts[psItems] = [
                                    {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, true, false], text:""}, 
                                ]
                        
                                psItems++
                            }
                        }
                        else {
                            concepts[psItems] = [
                                {border: [true, false, false, false], text: "", style: 'textotabla', alignment: "center"},
                                {border: [true, true, false, true], text: traslados.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, false, true], text: traslados.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                {border: [false, true, true, true], text: "$" + parseFloat(traslados.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                {border: [false, false, true, false], text:""}, 
                            ]
                    
                            psItems++

                            concepts[psItems] = [
                                {border: [true, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                {border: [false, false, true, true], text:""}, 
                            ]
                    
                            psItems++
                        }
                    }
                }
                else {
                    if(retenciones !== undefined)
                    {
                        concepts[psItems] = [
                            {border: [true, false, false, false], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Descripcion, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, true, false], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                        ]
                
                        psItems++

                        for(var j=0; j<retenciones.elements.length; j++)
                        {
                            if(j===0)
                            {
                                concepts[psItems] = [
                                    {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, false], text: "Retenciones", style: 'textotablaboldblack', alignment: "center"},
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, true, false], text:""}, 
                                ]
                        
                                psItems++

                                concepts[psItems] = [
                                    {border: [true, false, true, false], text: "", style: 'textotabla2', alignment: "center"},
                                    {fillColor: "#f40506", border: [true, true, true, true], text: "Base", style: 'textotabla2', alignment: "center"},
                                    {fillColor: "#f40506", border: [true, true, true, true], text: "Impuesto", style: 'textotabla2', alignment: "center"}, 
                                    {fillColor: "#f40506", border: [true, true, true, true], text: "Tipo Factor", style: 'textotabla2', alignment: "center"}, 
                                    {fillColor: "#f40506", border: [true, true, true, true], text: "Tasa O Cuota", style: 'textotabla2', alignment: "center"}, 
                                    {fillColor: "#f40506", border: [true, true, true, true], text: "Importe", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, true, false], text:""}, 
                                ]
                        
                                psItems++

                                concepts[psItems] = [
                                    {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "center"},
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: "$" + parseFloat(retenciones.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                    {border: [false, false, true, false], text:""}, 
                                ]
                        
                                psItems++

                                if(traslados.elements.length === 1)
                                {
                                    concepts[psItems] = [
                                        {border: [true, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, true, true], text:""}, 
                                    ]
                            
                                    psItems++
                                }
                                else {
                                    concepts[psItems] = [
                                        {border: [true, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, false], text: "", style: 'textotabla2', alignment: "center"}, 
                                        {border: [false, false, false, false], text: "true", style: 'textotabla2', alignment: "center"},
                                        {border: [false, false, true, false], text:""}, 
                                    ]
                            
                                    psItems++
                                }
                            }
                            else {
                                concepts[psItems] = [
                                    {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "center"},
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.Base, style: 'textotabla', alignment: "center"},
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.Impuesto, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: retenciones.elements[j].attributes.TipoFactor, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: traretencionesslados.elements[j].attributes.TasaOCuota, style: 'textotabla', alignment: "center"}, 
                                    {border: [true, true, true, true], text: "$" + parseFloat(retenciones.elements[j].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                                    {border: [false, false, true, false], text:""}, 
                                ]
                        
                                psItems++

                                concepts[psItems] = [
                                    {border: [true, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"}, 
                                    {border: [false, false, false, true], text: "", style: 'textotabla2', alignment: "center"},
                                    {border: [false, false, true, true], text:""}, 
                                ]
                        
                                psItems++
                            }
                        }
                    }

                    concepts[psItems] = [
                        {border: [true, false, false, true], text: conceptos.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Cantidad, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.ClaveUnidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Descripcion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, true], text: conceptos.elements[i].attributes.Unidad, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, true], text: "$" + parseFloat(conceptos.elements[i].attributes.ValorUnitario).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, true], text: "$" + parseFloat(conceptos.elements[i].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                    ]
            
                    psItems++
                }
            }
        }

        var impT, impR; 
        if(trasladosN === undefined)
        {
            impT = "-"
        }
        else {
            impT = "$" + parseFloat(trasladosN.elements[0].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2});
        }

        if(retencionesN === undefined)
        {
            impR = "-"
        }
        else {
            impR = "$" + parseFloat(retencionesN.elements[0].attributes.Importe).toLocaleString(undefined, {minimumFractionDigits: 2});
        }

        concepts[psItems] = [
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"}, 
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [true, false, true, false], text: "Subtotal", style: 'textotabla', alignment: "left", colSpan: 2}, 
            {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "left"}, 
            {border: [true, false, true, false], text: "$" + parseFloat(attributes.SubTotal).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "right"}, 
        ]

        psItems++

        concepts[psItems] = [
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"}, 
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [true, false, true, false], text: "Impuestos Trasladados", style: 'textotabla', alignment: "left", colSpan:2}, 
            {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "left"}, 
            {border: [true, false, true, false], text: impT, style: 'textotabla', alignment: "right"}, 
        ]

        psItems++

        concepts[psItems] = [
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"}, 
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [true, false, true, false], text: "Retenciones", style: 'textotabla', alignment: "left", colSpan:2}, 
            {border: [true, false, true, false], text: "", style: 'textotabla', alignment: "left"}, 
            {border: [true, false, true, false], text: impR, style: 'textotabla', alignment: "right"}, 
        ]

        psItems++

        concepts[psItems] = [
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"}, 
            {border: [false, false, false, false], text: "", style: 'textotabla', alignment: "center"},
            {border: [true, true, true, true], text: "Total", style: 'textotablaboldblack', alignment: "left", colSpan:2}, 
            {border: [true, true, true, true], text: "", style: 'textotabla', alignment: "left"}, 
            {border: [true, true, true, true], text: "$" + parseFloat(attributes.Total).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotablaboldblack', alignment: "right"}, 
        ]

        psItems++

        var conceptosTable = 
        [
            {
                table: {
                    dontBreakRows: true, 
                    headerRows: 1,
                    widths: [60,60,60,"*",60,60,60],
                    body: concepts
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            },
            {text:  "\n"}
        ]

        var compPago = {}
        var compP = []
        psItems = 0;

        if(complementoPago !== undefined)
        {
            console.log(complementoPago.elements)
            /*var paramsRelationshipType = {
                pvOptionCRUD: "R",
                pvIdCatalog: cfdiRelacionados.attributes.TipoRelacion,
                table: "SAT_Cat_Relationship_Types"
            }
    
            var resRelationshipType = await dbcatcatalogs.getCatalogIdDescription(paramsRelationshipType)*/

            compP[psItems] = [
                {fillColor: "#1C932B", border: [true, true, true, true], text: `Complemento de Pago Versión 2.0`, style: 'textotablacolor', alignment: "center", colSpan:9},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            ]
    
            psItems++

            for(var i=0; i<complementoPago.elements.length; i++)
            {
                compP[psItems] = [
                    {border: [true, true, true, true], text: `Pago ` + parseInt(i+1, 10), style: 'textotablaEmisorReceptorBold', alignment: "center", colSpan:9},
                    {},
                    {},
                    {},
                    {},
                    {},
                    {},
                    {},
                    {}
                ]
        
                psItems++

                compP[psItems] = [
                    {border: [true, true, false, false], text: [
                        {text: `Cuenta Beneficiario: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.CtaBeneficiario, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, true, false, false], text: [
                        {text: `Forma de Pago: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.FormaDePagoP, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, true, true, false], text: [
                        {text: `Tipo Cambio: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.TipoCambioP, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {}
                ]
        
                psItems++
    
                compP[psItems] = [
                    {border: [true, false, false, false], text: [
                        {text: `Cuenta Ordenante: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.CtaOrdenante, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, false, false, false], text: [
                        {text: `Moneda: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.MonedaP, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, false, true, false], text: [
                        {text: `Banco Ordenante: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.NomBancoOrdExt, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                ]
        
                psItems++

                compP[psItems] = [
                    {border: [true, false, false, false], text: [
                        {text: `Fecha Pago: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.FormaDePagoP, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, false, false, false], text: [
                        {text: `Monto Pago: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.Monto, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                    {border: [false, false, true, false], text: [
                        {text: `RFC Ordenante: `, style: 'textotablaEmisorReceptorBold'},
                        {text: complementoPago.elements[i].attributes.RfcEmisorCtaOrd, style: 'textotablaEmisorReceptor'},
                    ], colSpan: 3},
                    {},
                    {},
                ]
        
                psItems++

                compP[psItems] = [
                    {border: [true, true, true, false], text: `CFDI Relacionados`, style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 9},
                    {border: [false, false, false, false], text: ``},
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``},
                    {border: [false, false, true, false], text: ``},
                ]
        
                psItems++

                compP[psItems] = [
                    {border: [true, false, true, false], text: ``, style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 9},
                    {border: [false, false, false, false], text: ``},
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``}, 
                    {border: [false, false, false, false], text: ``},
                    {border: [false, false, true, false], text: ``},
                ]
        
                psItems++

                for(var j=0; j<complementoPago.elements[i].elements.length; j++)
                {
                    if(j===0)
                    {
                        
                        compP[psItems] = [
                            {fillColor: "#e4e4e4", border: [true, false, false, false], text: `Serie`, style: 'textotabla', alignment: "center"},
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Folio`, style: 'textotabla', alignment: "center"},
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `UUID`, style: 'textotabla', alignment: "center"}, 
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Método de Pago DR`, style: 'textotabla', alignment: "center"}, 
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Moneda DR`, style: 'textotabla', alignment: "center"}, 
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Num Parcialidad`, style: 'textotabla', alignment: "center"}, 
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Saldo Anterior`, style: 'textotabla', alignment: "center"}, 
                            {fillColor: "#e4e4e4", border: [false, false, false, false], text: `Importe Pago`, style: 'textotabla', alignment: "center"},
                            {fillColor: "#e4e4e4", border: [false, false, true, false], text: `Saldo Insoluto`, style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++

                        compP[psItems] = [
                            {border: [true, false, false, false], text: complementoPago.elements[i].elements[j].attributes.Serie, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.Folio, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.IdDocumento, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.MetodoDePagoDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.MonedaDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.NumParcialidad, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoAnt).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpPagado).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                            {border: [false, false, true, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoInsoluto).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++
                    }
                    else if(j===complementoPago.elements[i].elements.length-1)
                    {
                        compP[psItems] = [
                            {border: [true, false, false, true], text: complementoPago.elements[i].elements[j].attributes.Serie, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, true], text: complementoPago.elements[i].elements[j].attributes.Folio, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, true], text: complementoPago.elements[i].elements[j].attributes.IdDocumento, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, true], text: complementoPago.elements[i].elements[j].attributes.MetodoDePagoDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, true], text: complementoPago.elements[i].elements[j].attributes.MonedaDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, true], text: complementoPago.elements[i].elements[j].attributes.NumParcialidad, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoAnt).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, true], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpPagado).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                            {border: [false, false, true, true], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoInsoluto).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++
                    }
                    else {
                        compP[psItems] = [
                            {border: [true, false, false, false], text: complementoPago.elements[i].elements[j].attributes.Serie, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.Folio, style: 'textotabla', alignment: "center"},
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.IdDocumento, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.MetodoDePagoDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.MonedaDR, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: complementoPago.elements[i].elements[j].attributes.NumParcialidad, style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoAnt).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"}, 
                            {border: [false, false, false, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpPagado).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                            {border: [false, false, true, false], text: "$" + parseFloat(complementoPago.elements[i].elements[j].attributes.ImpSaldoInsoluto).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                        ]
                
                        psItems++
                    }
                }
            }

            compPago = [
                {
                    table: {
                        widths: [40, 40, "*", 40, 40, 40, 40, 40, 40],
                        body: compP
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text:  "\n"}
            ]
        }


        var comercioExteriorTable = {}
        if(comercioExterior !== undefined)
        {
            var comercioE = []
            psItems = 0;

            comercioE[psItems] = [
                {fillColor: "#1C932B", border: [true, true, true, true], text: "Complemento de Comercio Exterior", style: 'textotablacolor', alignment: "center", colSpan:2},
                {border: [true, true, true, false], text: ""}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, true, false], text: "", colSpan:2},
                {border: [true, true, true, false], text: ""}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, false, false], text: [
                    {text: "Tipo de Operación: ", style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: comercioExterior.attributes.TipoOperacion, style: 'textotablaEmisorReceptor', alignment: "left"}
                ]},
                {border: [false, false, true, false], text: [
                    {text: "Incoterm: ", style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: comercioExterior.attributes.Incoterm, style: 'textotablaEmisorReceptor', alignment: "left"}
                ]}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, false, false], text: [
                    {text: "Clave de Pedimento: " , style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: comercioExterior.attributes.ClaveDePedimento, style: 'textotablaEmisorReceptor', alignment: "left"}
                ]},
                {border: [false, false, true, false], text: [
                    {text: "Subdivisión: ", style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: comercioExterior.attributes.Subdivision, style: 'textotablaEmisorReceptor', alignment: "left"}
                ]}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, false, false], text: [
                    {text: "Certificado Origen: ", style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: comercioExterior.attributes.CertificadoOrigen, style: 'textotablaEmisorReceptor', alignment: "left" }
                ]},
                {border: [false, false, true, false], text: [
                    {text: "Tipo de Cambio USD: ", style: 'textotablaEmisorReceptorBold', alignment: "left"},
                    {text: "$" + parseFloat(comercioExterior.attributes.TipoCambioUSD).toLocaleString("en"), style: 'textotablaEmisorReceptor', alignment: "left"}
                ]}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, true, false], text: "", colSpan:2},
                {border: [true, true, true, false], text: ""}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, true, true, false], text: "Mercancías", style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 2},
                {border: [false, false, true, false], text: ""}, 

            ]
    
            psItems++

            comercioE[psItems] = [
                {border: [true, false, true, false], text: "", style: 'textotablaEmisorReceptor', alignment: "center", colSpan: 2},
                {border: [false, false, true, false], text: ""}, 

            ]
    
            psItems++

            //Tabla para las mercancias
            var mercanciasT = []
            psItems = 0;

            mercanciasT[psItems] = [
                {fillColor: "#e4e4e4", border: [true, false, false, false], text: "No. Identificación", style: 'textotabla', alignment: "center"},
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Fracción Arancelaria", style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Cantidad Aduana", style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Unidad Aduana", style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, false, false], text: "Valor Unitario Aduana", style: 'textotabla', alignment: "center"}, 
                {fillColor: "#e4e4e4", border: [false, false, true, false], text: "Valor Dólares", style: 'textotabla', alignment: "center"},
            ]
    
            psItems++

            var mercArray = comercioExterior.elements.find( o => o.name === "cce11:Mercancias")
            //console.log(mercArray)

            for(var i=0; i<mercArray.elements.length; i++)
            {

                if(i!==mercArray.elements.length-1)
                {
                    mercanciasT[psItems] = [
                        {border: [true, false, false, false], text: mercArray.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.FraccionArancelaria, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.CantidadAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.UnidadAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.ValorUnitarioAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, false], text: "$" + parseFloat(mercArray.elements[i].attributes.ValorDolares).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                    ]
            
                    psItems++
                    
                    mercanciasT[psItems] = [
                        {border: [true, false, false, false], text: [
                            {text: "Marca: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.Marca, style: 'textotabla', alignment: "left"}
                        ]},
                        {border: [false, false, false, false], text: [
                            {text: "Modelo: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.Modelo, style: 'textotabla', alignment: "left"}
                        ], colSpan: 2}, 
                        {border: [false, false, false, false], text: ""},
                        {border: [false, false, false, false], text: [
                            {text: "Submodelo: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.SubModelo, style: 'textotabla', alignment: "left"}
                        ], colSpan: 2},
                        {border: [false, false, false, false], text: ""},
                        {border: [false, false, true, false], text: [
                            {text: "No. Serie: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.NumeroSerie, style: 'textotabla', alignment: "left"}
                        ]},
                    ]
            
                    psItems++
                }
                else {
                    mercanciasT[psItems] = [
                        {border: [true, false, false, false], text: mercArray.elements[i].attributes.NoIdentificacion, style: 'textotabla', alignment: "center"},
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.FraccionArancelaria, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.CantidadAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.UnidadAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, false, false], text: mercArray.elements[i].attributes.ValorUnitarioAduana, style: 'textotabla', alignment: "center"}, 
                        {border: [false, false, true, false], text: "$" + parseFloat(mercArray.elements[i].attributes.ValorDolares).toLocaleString(undefined, {minimumFractionDigits: 2}), style: 'textotabla', alignment: "center"},
                    ]
            
                    psItems++
                    
                    mercanciasT[psItems] = [
                        {border: [true, false, false, true], text: [
                            {text: "Marca: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.Marca, style: 'textotabla', alignment: "left"}
                        ]},
                        {border: [false, false, false, true], text: [
                            {text: "Modelo: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.Modelo, style: 'textotabla', alignment: "left"}
                        ], colSpan: 2}, 
                        {border: [false, false, false, false], text: ""},
                        {border: [false, false, false, true], text: [
                            {text: "Submodelo: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.SubModelo, style: 'textotabla', alignment: "left"}
                        ], colSpan: 2},
                        {border: [false, false, false, false], text: ""},
                        {border: [false, false, true, true], text: [
                            {text: "No. Serie: ", style: 'textotablaboldblack', alignment: "left"},
                            {text: mercArray.elements[i].elements[0].attributes.NumeroSerie, style: 'textotabla', alignment: "left"}
                        ]},
                    ]
            
                    psItems++
                }
            }

            comercioExteriorTable = 
            [
                {
                    table: {
                        dontBreakRows: true, 
                        widths: [250, "*"],
                        body: comercioE
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {
                    table: {
                        dontBreakRows: true, 
                        widths: [80, "*", 80, 80, 80, 80],
                        body: mercanciasT
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'black';
                        },
                        vLineColor: function () {
                            return 'black';
                        },
                    }
                },
                {text: "\n"}
            ]                
        }

        //Se arma la CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACIÓN DIGITAL DEL SAT
        var version = timbreFiscal.attributes.Version 
        if(version === undefined)
        {
            version = ""
        }
        else {
            version = version + "|"
        }

        var uuid = timbreFiscal.attributes.UUID
        if(uuid === undefined)
        {
            uuid = ""
        }
        else {
            uuid = uuid + "|"
        }

        var fechaTimbrado = timbreFiscal.attributes.FechaTimbrado
        if(fechaTimbrado === undefined)
        {
            fechaTimbrado = ""
        }
        else {
            fechaTimbrado = fechaTimbrado + "|"
        }

        var rfcProvCertif = timbreFiscal.attributes.RfcProvCertif
        if(rfcProvCertif === undefined)
        {
            rfcProvCertif = ""
        }
        else{ 
            rfcProvCertif = rfcProvCertif + "|"
        }

        var selloCFD = timbreFiscal.attributes.SelloCFD
        if(selloCFD === undefined)
        {
            selloCFD = ""
        }
        else {
            selloCFD = selloCFD + "|"
        }

        var noCertificadoSAT = timbreFiscal.attributes.NoCertificadoSAT 
        if(noCertificadoSAT == undefined)
        {
            noCertificadoSAT = ""
        }
        
        var complementoCertificacionSAT = "||" + version + uuid + fechaTimbrado + rfcProvCertif + selloCFD + noCertificadoSAT + "||"

        var cadenaCodigo = {
            text: [
                {text: "Sello digital del CFDI:\n", style: 'textotablaEmisorReceptor'},
                {text: `${timbreFiscal.attributes.SelloCFD}\n`, style: 'textotablacodigo'},
                {text: "\n", style: 'espacios'},
                {text: "Sello digital del SAT:\n", style: 'textotablaEmisorReceptor'},
                {text: `${timbreFiscal.attributes.SelloSAT}\n`, style: 'textotablacodigo'},
            ]
        }

        var cadenasTable = 
        [
            {
                table: {
                    dontBreakRows: true, 
                    widths: [536],
                    body: [
                        [
                            cadenaCodigo
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }
            },
            {text:  "\n"}
        ]

        //Se arma el url para el código QR
        var finSelloDig = timbreFiscal.attributes.SelloCFD.substr(-8);
        var url = "https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx" + "?&id=" +
                    timbreFiscal.attributes.UUID + "&re=" + emisor.attributes.Rfc + "&rr=" + receptor.attributes.Rfc + "&tt=" + attributes.Total  + "&fe=" + finSelloDig

        var paramsTemporalFiles = {
            pvOptionCRUD: "R",
            piIdParameter: "20",
        }

        var resTemporalFiles = await dbcatgeneralparameters.getGeneralParametersbyID(paramsTemporalFiles)

        var imageQR = timbreFiscal.attributes.UUID + ".png"

        const buffer = await new AwesomeQR({
            text: url,
            size: 500,
        }).draw();

        var temporalFilesPath = (resTemporalFiles[0])[0].Value
        
        fs.writeFileSync(temporalFilesPath + imageQR, buffer);

        var paramsMoneda = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.Moneda,
            table: "SAT_Cat_Currencies"
        }

        var resMoneda = await dbcatcatalogs.getCatalogIdShortDescription(paramsMoneda);

        var totalLetra = numeroALetras(attributes.Total, {
            plural: resMoneda.toUpperCase(),
            singular: resMoneda.toUpperCase(),
        });
        
        var codigos = [
            {
                table: {
                    dontBreakRows: true, 
                    widths: [110, 416],
                    body: [
                        [
                            {image: temporalFilesPath + imageQR, width: 100, height: 100, alignment: 'center', verticalAlign: 'middle'},
                            {border: [false, true, true, true], text:  [
                                {text: "Cadena original del complemento de certificación digital del SAT:\n", style: 'textotablaboldblack'},
                                {text: `${complementoCertificacionSAT}\n\n`, style: 'textotablacodigo'},
                                {text: "RFC del proveedor de certificación: ", style: 'textotablaboldblack'},
                                {text: timbreFiscal.attributes.RfcProvCertif + "\n\n", style: 'textotabla'},
                                {text: `No. De serie del certificado SAT: `, style: 'textotablaboldblack'},
                                {text: timbreFiscal.attributes.NoCertificadoSAT + `\n\n`, style: 'textotabla'},
                                {text: "Fecha y Hora de Certificación: ", style: 'textotablaboldblack'},
                                {text: timbreFiscal.attributes.FechaTimbrado, style: 'textotabla'}
                            ]},
                                
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'black';
                    },
                    vLineColor: function () {
                        return 'black';
                    },
                }	
            },
            
        ]

        //Para poner el regimen fiscal en el pie de página
        var paramsRegimenFiscal = {
            pvOptionCRUD: "R",
            pvIdCatalog: emisor.attributes.RegimenFiscal,
            table: "SAT_Cat_Tax_Regimens"
        }

        var resRegimenFiscal = await dbcatcatalogs.getCatalogIdDescription(paramsRegimenFiscal)

        var cartaPorte = {}
        var ubicaciones = {}
        var mercanciasEncabezado = {}
        var mercancias = {}
        var autotransporte = {}
        var identificacionVehicular = {}
        var seguros = {}

        if(cartaP !== undefined)
        {
            if(cartaP.attributes.TranspInternac === "Si" || cartaP.attributes.TranspInternac === "Sí" || cartaP.attributes.TranspInternac === "SI" || cartaP.attributes.TranspInternac === "si" || cartaP.attributes.TranspInternac === "sí")
            {
                var paramsPaisOrigenDestino= {
                    pvOptionCRUD: "R",
                    pvIdCatalog: cartaP.attributes.PaisOrigenDestino,
                    table: "SAT_Cat_Countries"
                }
        
                var resPaisOrigenDestino = await dbcatcatalogs.getCatalogIdDescription(paramsPaisOrigenDestino)

                cartaPorte = [
                    {
                        table: {
                            dontBreakRows: true, 
                            widths: [170, "*", 170],
                                    body: [
                                        [
                                            {border: [false, false, false, false], fillColor: '#1C932B', text: 'Complemento Carta Porte ' + cartaP.attributes.Version, alignment: 'center', style: 'textotablacolor', colSpan:3},
                                            {},
                                            {},
                                        ],
                                        [
                                            {border: [true, true, true, false], text: 'Versión', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "Transporte Nacional", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "Total Distancia Recorrida", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        ],
                                        [
                                            {border: [true, false, true, true], text: cartaP.attributes.Version, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.TranspInternac, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.TotalDistRec, alignment: 'center', style: 'textoTablaCliente'},
                                        ],
                                        [
                                            {border: [true, true, true, false], text: 'Entrada - Salida Mercancía', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "País Origen - Destino", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "Vía Entrada - Salida", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        ],
                                        [
                                            {border: [true, false, true, true], text: cartaP.attributes.EntradaSalidaMerc, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.PaisOrigenDestino + " - " + resPaisOrigenDestino, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.ViaEntradaSalida, alignment: 'center', style: 'textoTablaCliente'},
                                        ],
                                    ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'gray';
                            },
                            vLineColor: function () {
                                return 'gray';
                            },
                        }	
                    },
                    {text:  "\n"}
                ]
            }
            else {
                cartaPorte = [
                    {
                        table: {
                            dontBreakRows: true, 
                            widths: [170, "*", 170],
                                    body: [
                                        [
                                            {border: [false, false, false, false], fillColor: "#1C932B", text: 'Complemento Carta Porte ' + cartaP.attributes.Version, alignment: 'center', style: 'textotablacolor', colSpan:3},
                                            {},
                                            {},
                                        ],
                                        [
                                            {border: [true, true, true, false], text: 'Versión', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "Transporte Internacional", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                            {border: [true, true, true, false], text: "Total Distancia Recorrida", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        ],
                                        [
                                            {border: [true, false, true, true], text: cartaP.attributes.Version, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.TranspInternac, alignment: 'center', style: 'textoTablaCliente'},
                                            {border: [true, false, true, true], text: cartaP.attributes.TotalDistRec, alignment: 'center', style: 'textoTablaCliente'},
                                        ]
                                    ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'gray';
                            },
                            vLineColor: function () {
                                return 'gray';
                            },
                        }	
                    },
                    {text:  "\n"}
                ]
            }
            
    
            var ubicacionesCP = cartaP.elements.find( o => o.name === "cartaporte20:Ubicaciones")
    
            var ubicacionesArray = []
            var uCount = 0
    
            ubicacionesArray[uCount] = [
                {border: [false, false, false, false], fillColor: "#1C932B", text: 'UBICACIONES', alignment: 'center', style: 'textotablacolor', colSpan:7},
                {},
                {},
                {},
                {},
                {},
                {},
            ]
    
            uCount++
    
            ubicacionesArray[uCount] = [
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
            ]
            
            uCount++ 
    
            for(var i=0; i<ubicacionesCP.elements.length; i++)
            {
                var noC = i+1
                if(ubicacionesCP.elements[i].attributes.TipoUbicacion === "Origen")
                {
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, true], fillColor: "#1C932B", text: 'Ubicación ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    uCount++
            
                    ubicacionesArray[uCount] = [
                        {border: [true, true, true, true], text: 'Tipo de ubicación', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'Id de ubicación', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'RFC remitente', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'Nombre del remitente o destinatario', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'Fecha y hora de salida o llegada', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'Distancia recorrida', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, true], text: 'Domicilio', alignment: 'center', style: 'textotablaboldblack'},
                    ]
                
                    uCount++
    
                    var calle = ubicacionesCP.elements[i].elements[0].attributes.Calle
                    if(calle === undefined)
                    {
                        calle = ""
                    }
    
                    var noExterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroExterior;
                    if(noExterior === undefined)
                    {
                        noExterior = ""
                    }
    
                    var noInterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroInterior;
                    if(noInterior === undefined)
                    {
                        noInterior = ""
                    }
    
                    var referencia = ubicacionesCP.elements[i].elements[0].attributes.Referencia;
                    if(referencia === undefined)
                    {
                        referencia = ""
                    }
    
                    var estado = ubicacionesCP.elements[i].elements[0].attributes.Estado;
                    if(estado === undefined)
                    {
                        estado = ""
                    }
    
                    var pais = ubicacionesCP.elements[i].elements[0].attributes.Pais;
                    if(pais === undefined)
                    {
                        pais = ""
                    }
    
                    var codigoPostal = ubicacionesCP.elements[i].elements[0].attributes.CodigoPostal;
                    if(codigoPostal === undefined)
                    {
                        codigoPostal = ""
                    }
    
                    var colonia = ubicacionesCP.elements[i].elements[0].attributes.Colonia;
                    var localidad;
                    var municipio;
                    if(colonia === undefined)
                    {
                        colonia = ""
                    }
                    else {
                        const params = {
                            pvIdState: estado,
                            pvIdCounty : colonia,
                        }
                        const res = await dbcatcatalogs.getUbicZipCodeCounty(params)
                        
                        if((res[0])[0].Description !== undefined)
                        {
                            colonia = "(" + colonia + ") " + (res[0])[0].Description
                        }
                        else {
                            colonia = "(" + colonia + ") Code Not Found!" 
                        }
                        
    
                        var localidad = ubicacionesCP.elements[i].elements[0].attributes.Localidad;
                        if(localidad === undefined)
                        {
                            localidad = ""
                        }
                        else {
                            if((res[0])[0].Location_Desc !== undefined)
                            {
                                localidad = "(" + localidad + ") " + (res[0])[0].Location_Desc
                            }
                            else {
                                localidad = "(" + localidad + ") Code Not Found!"
                            }
                        }
    
                        var municipio = ubicacionesCP.elements[i].elements[0].attributes.Municipio;
                        if(municipio === undefined)
                        {
                            municipio = ""
                        }
                        else {
                            if((res[0])[0].Municipality_Desc !== undefined)
                            {
                                municipio = "(" + municipio + ") " + (res[0])[0].Municipality_Desc
                            }
                            else {
                                municipio = "(" + municipio + ") Code Not Found!"
                            }
                        }
                    }
    
                    var domicilio = calle + " " + noExterior + " " + noInterior + " " +  "Col. " + colonia + ", " + localidad + ", " + referencia + municipio + ", " + estado + ", " + pais  + ", " + "C.P. " + codigoPostal
            
                    ubicacionesArray[uCount] = [
                        {text: `${ubicacionesCP.elements[i].attributes.TipoUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.IDUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.RFCRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.NombreRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.FechaHoraSalidaLlegada}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {text: "0", alignment: 'center', style: 'ubicacionesTexto'},
                        {text: domicilio, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
            
                    uCount++ 
    
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
    
                    uCount++ 
                }
                else 
                {
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, true], fillColor: "#1C932B", text: 'Ubicación ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    uCount++
            
                    ubicacionesArray[uCount] = [
                        {border: [true, true, true, false], text: 'Tipo de ubicación', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'Id de ubicación', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'RFC remitente', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'Nombre del remitente o destinatario', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'Fecha y hora de salida o de llegada', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'Distancia recorrida', alignment: 'center', style: 'textotablaboldblack'},
                        {border: [true, true, true, false], text: 'Domicilio', alignment: 'center', style: 'textotablaboldblack'},
                    ]
                
                    uCount++
    
                    var calle = ubicacionesCP.elements[i].elements[0].attributes.Calle
                    if(calle === undefined)
                    {
                        calle = ""
                    }
    
                    var noExterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroExterior;
                    if(noExterior === undefined)
                    {
                        noExterior = ""
                    }
    
                    var noInterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroInterior;
                    if(noInterior === undefined)
                    {
                        noInterior = ""
                    }
    
                    var referencia = ubicacionesCP.elements[i].elements[0].attributes.Referencia;
                    if(referencia === undefined)
                    {
                        referencia = ""
                    }
    
                    var estado = ubicacionesCP.elements[i].elements[0].attributes.Estado;
                
                    if(estado === undefined)
                    {
                        estado = ""
                    }
    
                    var pais = ubicacionesCP.elements[i].elements[0].attributes.Pais;
                    if(pais === undefined)
                    {
                        pais = ""
                    }
    
                    var codigoPostal = ubicacionesCP.elements[i].elements[0].attributes.CodigoPostal;
                    if(codigoPostal === undefined)
                    {
                        codigoPostal = ""
                    }
    
                    var colonia = ubicacionesCP.elements[i].elements[0].attributes.Colonia;
                    var localidad;
                    var municipio;
                    if(colonia === undefined)
                    {
                        colonia = ""
                    }
                    else {
                        const params = {
                            pvIdState: estado,
                            pvIdCounty : colonia,
                        }
                        const res = await dbcatcatalogs.getUbicZipCodeCounty(params)
                        
                        colonia = "(" + colonia + ") " + (res[0])[0].Description
    
                        var localidad = ubicacionesCP.elements[i].elements[0].attributes.Localidad;
                        if(localidad === undefined)
                        {
                            localidad = ""
                        }
                        else {
                            localidad = "(" + localidad + ") " + (res[0])[0].Location_Desc
                        }
    
                        var municipio = ubicacionesCP.elements[i].elements[0].attributes.Municipio;
                        if(municipio === undefined)
                        {
                            municipio = ""
                        }
                        else {
                            municipio = "(" + municipio + ") " + (res[0])[0].Municipality_Desc
                        }
                    }
    
                    var domicilio = calle + " " + noExterior + " " + noInterior + " " +  "Col. " + colonia + ", " + localidad + ", " + referencia + municipio + ", " + estado + ", " + pais  + ", " + "C.P. " + codigoPostal
            
                    ubicacionesArray[uCount] = [
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.TipoUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.IDUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.RFCRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.NombreRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.FechaHoraSalidaLlegada}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: `${ubicacionesCP.elements[i].attributes.DistanciaRecorrida}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {border: [true, true, true, true], text: domicilio, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
            
                    uCount++
    
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
                
                    uCount++
                }
            }
    
            ubicaciones = [
                {
                    table: {
                        dontBreakRows: true, 
                        headerRows: 1,
                        widths: [40, 50, 50, 80, 60, 50, "*"],
                        body: ubicacionesArray
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
                {text:  "\n"}
            ]
    
            var mercanciasCP = cartaP.elements.find( o => o.name === "cartaporte20:Mercancias")
    
            mercanciasEncabezado = [
                {
                    table: {
                        headerRows: 3,
                        widths: [173, 173, "*"],
                        body: [
                            [
                                {border: [false, false, false, false], fillColor: "#1C932B", text: 'MERCANCÍAS', alignment: 'center', style: 'textotablacolor', colSpan:3},
                                {},
                                {},
                            ],
                            [
                                {border: [true, true, true, false], text: 'Peso bruto total', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                {border: [true, true, true, false], text: "Unidad de peso", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                {border: [true, true, true, false], text: "Número total de mercancías", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            ],
                            [
                                {border: [true, false, true, true], text: mercanciasCP.attributes.PesoBrutoTotal, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: mercanciasCP.attributes.UnidadPeso, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: mercanciasCP.attributes.NumTotalMercancias, alignment: 'center', style: 'textoTablaCliente'},
                            ]
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
                {text:  "\n"}
            ]
    
            var mercanciasArray = []
            var mCount = 0

            mercanciasArray[mCount] = [
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
            ]
        
            mCount++
    
            //Para guardar solo las mercancias
            var mercanciasAux = []
            var mAuxC = 0
            for(var y=0; y< mercanciasCP.elements.length; y++)
            {
                if(mercanciasCP.elements[y].name === "cartaporte20:Mercancia")
                {
                    mercanciasAux[mAuxC] = mercanciasCP.elements[y]
                    mAuxC++
                }
            }
    
            for(var i=0; i<mercanciasAux.length; i++)
            {
                if(cartaP.attributes.TranspInternac === "Si" || cartaP.attributes.TranspInternac === "Sí" || cartaP.attributes.TranspInternac === "SI" || cartaP.attributes.TranspInternac === "si" || cartaP.attributes.TranspInternac === "sí")
                {
                    if(cartaP.attributes.EntradaSalidaMerc === "Entrada")
                    {
                        var noC = i+1
                        mercanciasArray[mCount] = [
                            {fillColor: "#1C932B", text: 'Mercancía ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
                    
                        mCount++
            
                        mercanciasArray[mCount] = [
                            {text: 'Bienes transportados', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Descripción', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Cantidad', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Clave unidad', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Peso en kilogramos', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Valor de la mercancía', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Moneda', alignment: 'center', style: 'textotablaboldblack'},
                        ]
                    
                        mCount++
            
                        var paramsBienesTransportados= {
                            pvOptionCRUD: "R",
                            pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                            table: "SAT_Cat_Product_Service_Codes"
                        }
                    
                        var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
            
                        mercanciasArray[mCount] = [
                            {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                        ]
            
                        mCount++

                        var materialPeligroso = mercanciasAux[i].attributes.MaterialPeligroso
                        var claveMaterialPeligroso = mercanciasAux[i].attributes.CveMaterialPeligroso
                        var embalaje = mercanciasAux[i].attributes.Embalaje
                        var descripcionEmbalaje = mercanciasAux[i].attributes.DescripEmbalaje

                        var eMaterialPeligroso;
                        var eClaveMaterialPeligroso;
                        var eEmbalaje;
                        var eDescripcionEmbalaje;

                        if(materialPeligroso === undefined)
                        {
                            materialPeligroso = ""
                            eMaterialPeligroso = ""
                        }
                        else {
                            materialPeligroso = materialPeligroso + "\n"
                            eMaterialPeligroso = "Material peligroso: "
                        }
                        if(claveMaterialPeligroso === undefined)
                        {
                            claveMaterialPeligroso = ""
                            eClaveMaterialPeligroso = ""
                        }
                        else {
                            claveMaterialPeligroso = claveMaterialPeligroso + "\n"
                            eClaveMaterialPeligroso = "Clave material peligroso: "
                        }
                        if(embalaje === undefined)
                        {
                            embalaje = ""
                            eEmbalaje = ""
                        }
                        else {
                            embalaje = embalaje + "\n"
                            eEmbalaje = "Embalaje: "
                        }
                        if(descripcionEmbalaje === undefined)
                        {
                            descripcionEmbalaje = ""
                            eDescripcionEmbalaje = ""
                        }
                        else {
                            eDescripcionEmbalaje = "Descripción embalaje: "
                        }
        

                        mercanciasArray[mCount] = [
                            {   text: [
                                    {text: "FRACCIÓN ARANCELARIA:  ", style: "textotablabold"},
                                    {text: mercanciasAux[i].attributes.FraccionArancelaria + "\n", style: "ubicacionesTexto"},
                                    {text: eMaterialPeligroso, style: "textotablabold" },
                                    {text: materialPeligroso, style: "ubicacionesTexto"},
                                    {text: eClaveMaterialPeligroso, style: "textotablabold" },
                                    {text: claveMaterialPeligroso, style: "ubicacionesTexto"},
                                    {text: eEmbalaje, style: "textotablabold" },
                                    {text: embalaje, style: "ubicacionesTexto"},
                                    {text: eDescripcionEmbalaje, style: "textotablabold" },
                                    {text: descripcionEmbalaje, style: "ubicacionesTexto"},
                                ], 
                                alignment: 'left', 
                                colSpan: 7
                            },
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
            
                        mCount++
                        
                        var mercanciasElements = mercanciasAux[i].elements
                        if(mercanciasElements !== undefined)
                        {
                            var pedimentosAux = []
                            var pECount = 0
                            for(var mE = 0; mE< mercanciasElements.length; mE++)
                            {
                                if(mercanciasElements[mE].name === "cartaporte20:Pedimentos")
                                {
                                    pedimentosAux[pECount] = mercanciasElements[mE];
                                    pECount++
                                }
                            }

                            if(pedimentosAux.length > 0)
                            {
                                var pCount = 1
                                for(var p = 0; p< pedimentosAux.length; p++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: "#1C932B", text: 'Pedimento ' + pCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: `${pedimentosAux[p].attributes.Pedimento}`, alignment: 'center', style: 'ubicacionesTexto', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                }
                            }

                            var cantidadTransportaAux = []
                            var cTECount = 0
                            for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                            {
                                if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                                {
                                    cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                    cTECount++
                                }
                            }

                            if(cantidadTransportaAux.length > 0)
                            {
                                var cTCount = 1
                                for(var c = 0; c< cantidadTransportaAux.length; c++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: "#1C932B", text: 'Cantidad transporta ' + cTCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: [
                                            {text: "Cantidad Transporta: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                            {text: "Id Origen: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                            {text: "Id Destino: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                        ], colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                }
                            }
                        }
            
                        mercanciasArray[mCount] = [
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        ]
                    
                        mCount++
                    }
                    else {
                        var noC = i+1
                        mercanciasArray[mCount] = [
                            {fillColor: "#1C932B", text: 'Mercancía ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
                    
                        mCount++
            
                        mercanciasArray[mCount] = [
                            {text: 'Bienes transportados', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Descripción', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Cantidad', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Clave unidad', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Peso en kilogramos', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Valor de la mercancía', alignment: 'center', style: 'textotablaboldblack'},
                            {text: 'Moneda', alignment: 'center', style: 'textotablaboldblack'},
                        ]
                    
                        mCount++
            
                        var paramsBienesTransportados= {
                            pvOptionCRUD: "R",
                            pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                            table: "SAT_Cat_Product_Service_Codes"
                        }
                    
                        var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
            
                        mercanciasArray[mCount] = [
                            {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                        ]
            
                        mCount++

                        var materialPeligroso = mercanciasAux[i].attributes.MaterialPeligroso
                        var claveMaterialPeligroso = mercanciasAux[i].attributes.CveMaterialPeligroso
                        var embalaje = mercanciasAux[i].attributes.Embalaje
                        var descripcionEmbalaje = mercanciasAux[i].attributes.DescripEmbalaje

                        var eMaterialPeligroso;
                        var eClaveMaterialPeligroso;
                        var eEmbalaje;
                        var eDescripcionEmbalaje;

                        if(materialPeligroso === undefined)
                        {
                            materialPeligroso = ""
                            eMaterialPeligroso = ""
                        }
                        else {
                            materialPeligroso = materialPeligroso + "\n"
                            eMaterialPeligroso = "Material peligroso: "
                        }
                        if(claveMaterialPeligroso === undefined)
                        {
                            claveMaterialPeligroso = ""
                            eClaveMaterialPeligroso = ""
                        }
                        else {
                            claveMaterialPeligroso = claveMaterialPeligroso + "\n"
                            eClaveMaterialPeligroso = "Clave material peligroso: "
                        }
                        if(embalaje === undefined)
                        {
                            embalaje = ""
                            eEmbalaje = ""
                        }
                        else {
                            eEmbalaje = "Embalaje: "
                        }
                        if(descripcionEmbalaje === undefined)
                        {
                            descripcionEmbalaje = ""
                            eDescripcionEmbalaje = ""
                        }
                        else {
                            eDescripcionEmbalaje = "Descripción embalaje: "
                        }
        

                        mercanciasArray[mCount] = [
                            {   text: [
                                    {text: "FRACCIÓN ARANCELARIA:  ", style: "textotablabold"},
                                    {text: mercanciasAux[i].attributes.FraccionArancelaria + "\n", style: "ubicacionesTexto"},
                                    {text: "UUID COMERCIO EXTERIOR:  ", style: "textotablabold" },
                                    {text: mercanciasAux[i].attributes.UUIDComercioExt + "\n", style: "ubicacionesTexto"},
                                    {text: eMaterialPeligroso, style: "textotablabold" },
                                    {text: materialPeligroso, style: "ubicacionesTexto"},
                                    {text: eClaveMaterialPeligroso, style: "textotablabold" },
                                    {text: claveMaterialPeligroso, style: "ubicacionesTexto"},
                                    {text: eEmbalaje, style: "textotablabold" },
                                    {text: embalaje, style: "ubicacionesTexto"},
                                ], 
                                alignment: 'left', 
                                colSpan: 7
                            },
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
            
                        mCount++

                        var mercanciasElements = mercanciasAux[i].elements
                        if(mercanciasElements !== undefined)
                        {
                            var cantidadTransportaAux = []
                            var cTECount = 0
                            for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                            {
                                if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                                {
                                    cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                    cTECount++
                                }
                            }

                            if(cantidadTransportaAux.length > 0)
                            {
                                var cTCount = 1
                                for(var c = 0; c< cantidadTransportaAux.length; c++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: "#1C932B", text: 'Cantidad Transporta ' + cTCount, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: [
                                            {text: "Cantidad: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                            {text: "Id origen: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                            {text: "Id destino: ", style: 'textotablaboldblack'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                        ], colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                    cTCount++
                                }
                            }
                        }
            
                        mercanciasArray[mCount] = [
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        ]
                    
                        mCount++
                    }
                }
                else {
                    var noC = i+1
                    mercanciasArray[mCount] = [
                        {fillColor: "#1C932B", text: 'Mercancía ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    mCount++
        
                    mercanciasArray[mCount] = [
                        {text: 'Bienes transportados', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Descripción', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Cantidad', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Clave unidad', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Peso en kilogramos', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Valor de la mercancía', alignment: 'center', style: 'textotablaboldblack'},
                        {text: 'Moneda', alignment: 'center', style: 'textotablaboldblack'},
                    ]
                
                    mCount++
        
                    var paramsBienesTransportados= {
                        pvOptionCRUD: "R",
                        pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                        table: "SAT_Cat_Product_Service_Codes"
                    }
                
                    var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
        
                    mercanciasArray[mCount] = [
                        {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
        
                    mCount++

                    var mercanciasElements = mercanciasAux[i].elements
                    if(mercanciasElements !== undefined)
                    {
                        var cantidadTransportaAux = []
                        var cTECount = 0
                        for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                        {
                            if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                            {
                                cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                cTECount++
                            }
                        }

                        if(cantidadTransportaAux.length > 0)
                        {
                            var cTCount = 1
                            for(var c = 0; c< cantidadTransportaAux.length; c++)
                            {
                                mercanciasArray[mCount] = [
                                    {fillColor: "#1C932B", text: 'Cantidad transporta ' + cTCount, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan: 7},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                ]
                            
                                mCount++

                                mercanciasArray[mCount] = [
                                    {text: [
                                        {text: "Cantidad: ", style: 'textotablaboldblack'},
                                        {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                        {text: "Id origen: ", style: 'textotablaboldblack'},
                                        {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                        {text: "Id destino: ", style: 'textotablaboldblack'},
                                        {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                    ], colSpan: 7},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                ]
                    
                                mCount++
                                cTCount++
                            }
                        }
                    }
        
                    mercanciasArray[mCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
                
                    mCount++
                }
            }
    
            mercancias = [
                {
                    table: {
                        headerRows: 3,
                        widths: [70, "*", 50, 60, 60, 50, 50],
                        body: mercanciasArray
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }
                },
                {text:  "\n"}
            ]
    
            var autotransporteAux = []
            var mAuxT = 0
            for(var y=0; y< mercanciasCP.elements.length; y++)
            {
                if(mercanciasCP.elements[y].name === "cartaporte20:Autotransporte")
                {
                    autotransporteAux[mAuxT] = mercanciasCP.elements[y]
                    mAuxT++
                }
            }
    
            autotransporte = [
                {
                    table: {
                        headerRows: 3,
                        widths: [265, "*"],
                        body: [
                            [
                                {border: [false, false, false, false], fillColor: "#1C932B", text: 'AUTOTRANSPORTE', alignment: 'center', style: 'textotablacolor', colSpan:2},
                                {},
                            ],
                            [
                                {border: [true, true, true, false], text: 'Permiso SCT', alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "Número de permiso", alignment: 'center', style: 'textotablaboldblack'},
                            ],
                            [
                                {border: [true, false, true, true], text: autotransporteAux[0].attributes.PermSCT, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: autotransporteAux[0].attributes.NumPermisoSCT, alignment: 'center', style: 'textoTablaCliente'},
                            ]
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
                {text:  "\n"}
            ]
    
            var identificacionVehicularCP = autotransporteAux[0].elements.find( o => o.name === "cartaporte20:IdentificacionVehicular")
    
            identificacionVehicular = [
                {
                    table: {
                        headerRows: 3,
                        widths: [150, "*", 150],
                        body: [
                            [
                                {border: [false, false, false, false], fillColor: "#1C932B", text: 'Identificación Vehicular', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:3},
                                {},
                                {},
                            ],
                            [
                                {border: [true, true, true, false], text: 'Configuración vehicular', alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "Placa vehículo motor", alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "Año modelo", alignment: 'center', style: 'textotablaboldblack'},
                            ],
                            [
                                {border: [true, false, true, true], text: identificacionVehicularCP.attributes.ConfigVehicular, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: identificacionVehicularCP.attributes.PlacaVM, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: identificacionVehicularCP.attributes.AnioModeloVM, alignment: 'center', style: 'textoTablaCliente'},
                            ]
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
                {text:  "\n"}
            ]
    
            var segurosCP = autotransporteAux[0].elements.find( o => o.name === "cartaporte20:Seguros")
    
            seguros = [
                {
                    table: {
                        headerRows: 3,
                        widths: ["*", 60, 60, 60, 60, 60, 60],
                        body: [
                            [
                                {border: [false, false, false, false], fillColor: "#1C932B", text: 'Seguros', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                                {},
                                {},
                                {},
                                {},
                                {},
                                {},
                            ],
                            [
                                {text: 'Aseguradora de responsabilidad civil', alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Número de poliza de seguro por responsabilidad civil", alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Aseguradora de medio ambiente", alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Número de poliza de seguro por medio ambiente", alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Aseguradora de la carga transportada", alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Número de poliza de la carga transportada", alignment: 'center', style: 'textotablaboldblack'},
                                {text: "Valor de la prima del seguro", alignment: 'center', style: 'textotablaboldblack'},
                            ],
                            [
                                {text: segurosCP.attributes.AseguraRespCivil, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.PolizaRespCivil, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.AseguraMedAmbiente, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.PolizaMedAmbiente, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.AseguraCarga, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.PolizaCarga, alignment: 'center', style: 'textoTablaCliente'},
                                {text: segurosCP.attributes.PrimaSeguro, alignment: 'center', style: 'textoTablaCliente'},
                            ]
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }
                },
                {text:  "\n"}
            ]

            var figuraTransporteCP = cartaP.elements.find( o => o.name === "cartaporte20:FiguraTransporte")

            var figuraTransporte = [
                {
                    table: {
                        headerRows: 3,
                        widths: [80, 80, 80, "*"],
                        body: [
                            [
                                {border: [false, false, false, false], fillColor: "#1C932B", text: 'Figura Transporte', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan: 4},
                                {},
                                {},
                                {}
                            ],
                            [
                                {border: [true, true, true, false], text: 'Tipo figura', alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "RFC figura", alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "Número de licencia", alignment: 'center', style: 'textotablaboldblack'},
                                {border: [true, true, true, false], text: "Nombre figura", alignment: 'center', style: 'textotablaboldblack'}
                            ],
                            [
                                {border: [true, false, true, true], text: figuraTransporteCP.elements[0].attributes.TipoFigura, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: figuraTransporteCP.elements[0].attributes.RFCFigura, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: figuraTransporteCP.elements[0].attributes.NumLicencia, alignment: 'center', style: 'textoTablaCliente'},
                                {border: [true, false, true, true], text: figuraTransporteCP.elements[0].attributes.NombreFigura, alignment: 'center', style: 'textoTablaCliente'}
                            ]
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
                {text:  "\n"}
            ]
        }

        var docDefinition = {
            pageMargins: [ 25, 10, 25, 50 ],
            footer: function(currentPage, pageCount) {
                return {
                    margin: [ 30, 0, 30, 30 ],
                    columns: [
                        {
                            width: "*",
                            text: 'Este documento es una representación impresa de un CFDI. Régimen fiscal emisor: ' + emisor.attributes.RegimenFiscal + ' ' +  resRegimenFiscal + '\nFolio Fiscal: ' + timbreFiscal.attributes.UUID + ' Fecha de certificación: ' + timbreFiscal.attributes.FechaTimbrado  + '\nCertificado del emisor: ' + attributes.NoCertificado + ' Certificado del SAT: ' + timbreFiscal.attributes.NoCertificadoSAT + ' Consulta nuestro aviso de privacidad en www.gtcta.mx', style: 'footer', alignment: 'left'
                        },
                        {
                            width: 90,
                            text: 'Página ' + currentPage.toString() + ' de ' + pageCount, style: 'footer', alignment: 'right'
                        },
                    ]
                }
            },
            content: [
                encabezado2,
                "\n",
                logo,
                "\n",
                emisorReceptor,
                "\n",
                cfdiRel,
                monedaMetodo,
                conceptosTable,
                compPago,
                comercioExteriorTable,
                cadenasTable, 
                codigos,
                cartaPorte,
                ubicaciones,
                mercanciasEncabezado,
                mercancias,
                autotransporte,
                identificacionVehicular,
                seguros,
                figuraTransporte
            ],
            pageBreakBefore: function(currentNode, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage) {
                return currentNode.headlineLevel === 1 && followingNodesOnPage.length === 0;
            },
            styles: {
                textoinvisible: {
                    fontSize: 2,
                    color: '#ffffff',
                },
                encabezadoRfc: {
                    fontSize: 10,
                    bold: true,
                    color: '#bd8635',
                },
                encabezadoDomicilio: {
                    fontSize: 10,
                    color: '#000000',
                },
                encabezadoTexto: {
                    fontSize: 10,
                },
                textoTablaTrasladoHeader: {
                    fontSize: 8,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteHeader: {
                    fontSize: 11,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteBoldblack: {
                    fontSize: 9,
                    bold: true,
                    color: '#000000',
                },
                textoTablaClienteBoldblack2: {
                    fontSize: 6,
                    bold: true,
                    color: '#000000',
                },
                textoTablaCliente: {
                    fontSize: 8,
                },
                textoTablaCodigo: {
                    fontSize: 6,
                },
                textoTablaCodigoBold: {
                    fontSize: 6,
                    bold: true,
                },
                espacios: {
                    fontSize: 5,
                },
                moneda: {
                    fontSize: 8,
                },
                ubicacionesTexto: {
                    fontSize: 6,
                },
                header: {
                    fontSize: 15,
                    bold: true,
                    color: '#d82b26',
                },
                index: {
                    fontSize: 11,
                    color: '#d82b26',
                },
                indexbackground: {
                    fontSize: 11,
                    color: '#d82b26',
                    bold: true,
                    background: '#eaa01b'
                },
                subheader: {
                    fontSize: 13,
                    bold: true,
                    color: '#d82b26',
                },
                textosubrayado: {
                    fontSize: 9,
                },
                textolista: {
                    fontSize: 7,
                },
                textolista2: {
                    fontSize: 8,
                },
                textotabla: {
                    fontSize: 6.5,
                },
                textotabla2: {
                    fontSize: 6.5,
                    color: '#ffffff',
                },
                textotabla3: {
                    fontSize: 4.5,
                },
                textotabla4: {
                    fontSize: 7.5,
                },
                textotablacodigo: {
                    fontSize: 6.0,
                },
                textotablabold: {
                    fontSize: 12,
                    bold: true,
                    color: '#ffffff',
                },
                textotablaboldlarge: {
                    fontSize: 12,
                    bold: true,
                    color: '#000000',
                },
                textotablaboldblack: {
                    fontSize: 7,
                    bold: true,
                    color: '#000000',
                },
                textotablawhite: {
                    fontSize: 11,
                    color: '#ffffff',
                },
                textotablablack: {
                    fontSize: 11,
                },
                textoheader: {
                    fontSize: 30,
                    bold: true,
                    color: '#020167',
                },
                textotablaEmisorReceptor: {
                    fontSize: 9,
                },
                textotablaEmisorReceptorBold: {
                    fontSize: 9,
                    bold: true,
                },
                textotablacolor: {
                    fontSize: 9,
                    color: '#ffffff',
                    bold: true,
                },
                textotablacolor2: {
                    fontSize: 9,
                    color: '#ffffff',
                    bold: true,
                },
                parrafo: {
                    fontSize: 8,
                },
                parrafoBold: {
                    fontSize: 8,
                    bold: true,
                },
                parrafoItalic: {
                    fontSize: 8,
                    italics: true,
                },
                footer: {
                    fontSize: 6,
                },
                quote: {
                    italics: true
                },
                small: {
                    fontSize: 8
                },
                minispace: {
                    fontSize: 3
                },
                textotablatotales: {
                    fontSize: 8
                }
            }   
        };

        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(fs.createWriteStream("Documento.pdf"));
        pdfDoc.end();

        
        return new Promise( ( resolve, reject ) => {

            var pdfDoc = printer.createPdfKitDocument(docDefinition);
            fs.unlinkSync(temporalFilesPath + imageQR)

            var chunks = [];
            var base64 = '';

            pdfDoc.on('data', function (chunk) {
                chunks.push(chunk);
            });
            
            pdfDoc.on('end', function () {

                result = Buffer.concat(chunks);

                base64 = result.toString('base64');

                var result = {
                    pdfBase64: base64,
                    emailTo : "",
                    emailCC: "",
                    poNumber: ""
                }
                resolve(result);

            });

            pdfDoc.on('error', (error) => {
                
                console.log(error);
                
                reject('')

            });

            pdfDoc.end();

        });

    } catch (err) {

        console.error('Error: ', err)

    }
    
}

getPDFGtc(xmlComercioExterior, "/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/images/LogoGTC.png")

var numeroALetras = (function() {
    
    function Unidades(num) {

        switch (num) {
            case 1:
                return 'UN';
            case 2:
                return 'DOS';
            case 3:
                return 'TRES';
            case 4:
                return 'CUATRO';
            case 5:
                return 'CINCO';
            case 6:
                return 'SEIS';
            case 7:
                return 'SIETE';
            case 8:
                return 'OCHO';
            case 9:
                return 'NUEVE';
        }

        return '';
    } //Unidades()

    function Decenas(num) {

        let decena = Math.floor(num / 10);
        let unidad = num - (decena * 10);

        switch (decena) {
            case 1:
                switch (unidad) {
                    case 0:
                        return 'DIEZ';
                    case 1:
                        return 'ONCE';
                    case 2:
                        return 'DOCE';
                    case 3:
                        return 'TRECE';
                    case 4:
                        return 'CATORCE';
                    case 5:
                        return 'QUINCE';
                    default:
                        return 'DIECI' + Unidades(unidad);
                }
            case 2:
                switch (unidad) {
                    case 0:
                        return 'VEINTE';
                    default:
                        return 'VEINTI' + Unidades(unidad);
                }
            case 3:
                return DecenasY('TREINTA', unidad);
            case 4:
                return DecenasY('CUARENTA', unidad);
            case 5:
                return DecenasY('CINCUENTA', unidad);
            case 6:
                return DecenasY('SESENTA', unidad);
            case 7:
                return DecenasY('SETENTA', unidad);
            case 8:
                return DecenasY('OCHENTA', unidad);
            case 9:
                return DecenasY('NOVENTA', unidad);
            case 0:
                return Unidades(unidad);
        }
    } //Unidades()

    function DecenasY(strSin, numUnidades) {
        if (numUnidades > 0)
            return strSin + ' Y ' + Unidades(numUnidades)

        return strSin;
    } //DecenasY()

    function Centenas(num) {
        let centenas = Math.floor(num / 100);
        let decenas = num - (centenas * 100);

        switch (centenas) {
            case 1:
                if (decenas > 0)
                    return 'CIENTO ' + Decenas(decenas);
                return 'CIEN';
            case 2:
                return 'DOSCIENTOS ' + Decenas(decenas);
            case 3:
                return 'TRESCIENTOS ' + Decenas(decenas);
            case 4:
                return 'CUATROCIENTOS ' + Decenas(decenas);
            case 5:
                return 'QUINIENTOS ' + Decenas(decenas);
            case 6:
                return 'SEISCIENTOS ' + Decenas(decenas);
            case 7:
                return 'SETECIENTOS ' + Decenas(decenas);
            case 8:
                return 'OCHOCIENTOS ' + Decenas(decenas);
            case 9:
                return 'NOVECIENTOS ' + Decenas(decenas);
        }

        return Decenas(decenas);
    } //Centenas()

    function Seccion(num, divisor, strSingular, strPlural) {
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let letras = '';

        if (cientos > 0)
            if (cientos > 1)
                letras = Centenas(cientos) + ' ' + strPlural;
            else
                letras = strSingular;

        if (resto > 0)
            letras += '';

        return letras;
    } //Seccion()

    function Miles(num) {
        let divisor = 1000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
        let strCentenas = Centenas(resto);

        if (strMiles == '')
            return strCentenas;

        return strMiles + ' ' + strCentenas;
    } //Miles()

    function Millones(num) {
        let divisor = 1000000;
        let cientos = Math.floor(num / divisor)
        let resto = num - (cientos * divisor)

        let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
        let strMiles = Miles(resto);

        if (strMillones == '')
            return strMiles;

        return strMillones + ' ' + strMiles;
    } //Millones()

    return function NumeroALetras(num, currency) {
        currency = currency || {};
        let data = {
            numero: num,
            enteros: Math.floor(num),
            centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
            letrasCentavos: '',
            letrasMonedaPlural: currency.plural, 
            letrasMonedaSingular: currency.singular, 
            letrasMonedaCentavoPlural: currency.centPlural,
            letrasMonedaCentavoSingular: currency.centSingular
        };

        /*if (data.centavos > 0) {
            data.letrasCentavos = 'CON ' + (function() {
                if (data.centavos == 1)
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
                else
                    return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
            })();
        };*/

        data.letrasCentavos = data.centavos+"/100"

        if (data.enteros == 0)
            return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
        if (data.enteros == 1)
            return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
        else
            return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
    };

})();

module.exports = {
    getPDFGtc : getPDFGtc
}