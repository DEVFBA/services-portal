var fonts = {
    Roboto: {
      normal: 'C:/GTC/Fonts/Montserrat-Regular.ttf',
      bold: 'C:/GTC/Fonts/Montserrat-Bold.ttf',
      italics: 'C:/GTC/Fonts/Montserrat-Italic.ttf',
      bolditalics: 'C:/GTC/Fonts/Montserrat-BoldItalic.ttf'
    }
};

/*var fonts = {
    Roboto: {
      normal: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Regular.ttf',
      bold: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Bold.ttf',
      italics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-Italic.ttf',
      bolditalics: '/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/fonts/Montserrat-BoldItalic.ttf'
    }
};*/

var convert = require('xml-js');
var PdfPrinter = require('pdfmake');
var printer = new PdfPrinter(fonts);
const { AwesomeQR } = require("awesome-qr");
const fs = require("fs");
const xml = require('./xml.js')
const pdf2base64 = require('pdf-to-base64');

const dbcatcatalogs = require('../controllers/cat-catalogs')
const dbcatgeneralparameters = require('../controllers/cat-general-parameters');
const e = require('connect-timeout');

var xml64 = ""
var xml642 = ""
var xml643 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9jZmQvMyBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkLzMvY2ZkdjMzLnhzZCIgVmVyc2lvbj0iMy4zIiBTZWxsbz0iaUlvOUtnRVlSYlNlblB0OHljZW9WcmN4RXFDVHl3ZU8rOGQ5b05FZ3Voa2VCVy92SnFBRG1mZUZYdE02MGkybUt4RTRMZlp5UVp2cVdVaHN0aHNhYXZBUDQzS2gxb0d5RGFSQlU4YzJFYm5WbXdIT3F6OWRsMktoTko4SVpxV0xMdVA5b0k2TGRISXdFbWlrQjZiajZocWgyMzhtV0lzUFRQdnN0WXBPZUdPTTE2elp6ZWdBZmpMLzZHT0VxRXpocmk4c25MZ1NGbHhXSGtlS1ZHYnBmVjl6RnhiZk80c2s3RkNtMFVnRzFIbkxWVEEyS2RyMFlJV3JidjJiRnhaVFRmbG5VTEN4c1BGb0U1dEFjbThoRnR4Z2hYM1JJMjYvNTdoOWtFTFNMdEp0blVYSlpFSlZTS3E0YWkxQ090TjZpRVI3bVpnSmVJVFNobDViT201bTRnPT0iIE5vQ2VydGlmaWNhZG89IjAwMDAxMDAwMDAwNTAyNTQzNTIzIiBDZXJ0aWZpY2Fkbz0iTUlJR0xEQ0NCQlNnQXdJQkFnSVVNREF3TURFd01EQXdNREExTURJMU5ETTFNak13RFFZSktvWklodmNOQVFFTEJRQXdnZ0dFTVNBd0hnWURWUVFEREJkQlZWUlBVa2xFUVVRZ1EwVlNWRWxHU1VOQlJFOVNRVEV1TUN3R0ExVUVDZ3dsVTBWU1ZrbERTVThnUkVVZ1FVUk5TVTVKVTFSU1FVTkpUMDRnVkZKSlFsVlVRVkpKUVRFYU1CZ0dBMVVFQ3d3UlUwRlVMVWxGVXlCQmRYUm9iM0pwZEhreEtqQW9CZ2txaGtpRzl3MEJDUUVXRzJOdmJuUmhZM1J2TG5SbFkyNXBZMjlBYzJGMExtZHZZaTV0ZURFbU1DUUdBMVVFQ1F3ZFFWWXVJRWhKUkVGTVIwOGdOemNzSUVOUFRDNGdSMVZGVWxKRlVrOHhEakFNQmdOVkJCRU1CVEEyTXpBd01Rc3dDUVlEVlFRR0V3Sk5XREVaTUJjR0ExVUVDQXdRUTBsVlJFRkVJRVJGSUUxRldFbERUekVUTUJFR0ExVUVCd3dLUTFWQlZVaFVSVTFQUXpFVk1CTUdBMVVFTFJNTVUwRlVPVGN3TnpBeFRrNHpNVnd3V2dZSktvWklodmNOQVFrQ0UwMXlaWE53YjI1ellXSnNaVG9nUVVSTlNVNUpVMVJTUVVOSlQwNGdRMFZPVkZKQlRDQkVSU0JUUlZKV1NVTkpUMU1nVkZKSlFsVlVRVkpKVDFNZ1FVd2dRMDlPVkZKSlFsVlpSVTVVUlRBZUZ3MHhPVEV5TWpBeU16TXhNekZhRncweU16RXlNakF5TXpNeE16RmFNSUg2TVRBd0xnWURWUVFERXlkRFFWTkJJRVJKUVZvZ1JFVWdUVUZSVlVsT1FWTWdSRVVnUTA5VFJWSWdVMEVnUkVVZ1ExWXhNREF1QmdOVkJDa1RKME5CVTBFZ1JFbEJXaUJFUlNCTlFWRlZTVTVCVXlCRVJTQkRUMU5GVWlCVFFTQkVSU0JEVmpFd01DNEdBMVVFQ2hNblEwRlRRU0JFU1VGYUlFUkZJRTFCVVZWSlRrRlRJRVJGSUVOUFUwVlNJRk5CSUVSRklFTldNU1V3SXdZRFZRUXRFeHhEUkUwM05qQXhNalJET0RVZ0x5QkVTVVZETXprd09URTBVMEkwTVI0d0hBWURWUVFGRXhVZ0x5QkVTVVZETXprd09URTBTRVJHV2xOT01EQXhHekFaQmdOVkJBc1RFa05HUkVrZ1JrRkRJRU5CVTBFZ1JFbEJXakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMQXdpSVpLalRDdFRyNisxVllTRzF5V0R5K1Z4YS9ITFFDNXFJT0R3ZmE4dkkvZWw3OTdCUHpkSHVRMEl3SVNIT1BUTXpUQk9zZkNPbFpLcHh6Ni80RitZY2syaCtnSzNiZ2l2MjllVEdGUEh5Nm9jT2dia2FESHYvTnh1T1B3d2ZKWmp5bWZqcXR0cm5pZUJuMVJSLzRZWE82QURyaTcvZHo0U3FTLy85NUVaQjZNbWdoNWRJSnAyNUxJTURBQ0JqdnovWE1HejJXbytLbDlIQjV0ODc0WlBQMzNQd1hFV1VTY3V6dkpJS3ZrVE9sdnYzbVVkdmxMRDJCcHJBd1VPQWxvYmpFR0lBMmNiZ2tYM1F0SmFPblphcWU4Ykhmd2N5cU5rVm5QN3d3L3BXaTlwb2pzLzlDaEd2UThxNHpIU1ZlZnhCQTJ5RUd2TktpRE1ER1RIZGNDQXdFQUFhTWRNQnN3REFZRFZSMFRBUUgvQkFJd0FEQUxCZ05WSFE4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUorTzFoSVZSdHlXZkxnblJSZU1GRVBVd3RxdGVkdTc5SmJ4cEk1Vkt3OWJtYWM4OElGQ1l2elJaem43U1lEZFlrY0lZeTJNeFY1cG8vRkUwdjRMb3gyTWhOd2VjM0RzaHBDOTJBNnJJcmxiTWcxRUY3MUdqVE1wa0haeWx0ZjhoZkpvTzgxcEJjR2xnUVlJRmd0WUtxMHZyUXVLUEh0UHN6cXlsS0hNVlVmcjVaWUh6Zk1VcGlldXNDdlFTcHlZaURpc2xrdkQ1K0J6NTNybTZPWVRvS2FieEUvclZJd3FqOWRxNVlQbzhadGpoZ1NLT2ZaUjBYSEJJTS8wMVp3ZFgvejdvVDJHZjlZclNkNGpRMy90UlRCQkxzZU81TDB0MmgyblRBK2wzbnZpMXRXMjRYMEVGRGNpYjRVZEtTaWREL1BFaG1rZ1diYTk3S0I1OGl5MWZTSTltS2pvbFZOUm5lRytEUjJYbDhDQlIzYmJ0SGlTUXJDcTFNTXcva2gwZjQ5eUloOGdjeTl6bm1kcHoxKzJxR0VIT2Q4YkdhWnpYbGR5MDJhMVRtUTFyRUNiZytWeHVGdEtZbklaaURnbGkrOVNPaW1nMGpEWWlyak9FMGZibU5BRm5obHFydER3NXBTWFdFNlhPOTJWQUdsNkhSc05VUkRFNzd0MXpaTWVSeFRuRzhFTlB5MjBvQW1HSUNQZ1FYRDhOckh6YjdQOWV0d1ZhQmhKeENyenFUdDZUTXloZlJ1N0piRlpra1BwZGlTaUJYNlM2TWRKU3hVcjZ3bkZnMUZrbzFwY2FDdjBsc1dKZGhZYWUwWjAzcHJIN1RjQ0l5RkpscFJBVHM4RlBvZlZVMjdqUEVjbTBFL2ZpSTdOcGxPOFFiK1B5WStlbGtEQU9TYnkwRFNrIiBTdWJUb3RhbD0iMC4wMCIgTW9uZWRhPSJNWE4iIFRpcG9DYW1iaW89IjEiIFRvdGFsPSIwLjAwIiBUaXBvRGVDb21wcm9iYW50ZT0iVCIgU2VyaWU9IlFBQ0RNIiBGb2xpbz0iMjExMjI3MDUiIEZlY2hhPSIyMDIxLTEyLTI2VDE1OjQ3OjI4IiBMdWdhckV4cGVkaWNpb249IjY0OTg4Ij4KCTxjZmRpOkVtaXNvciBSZmM9IkNETTc2MDEyNEM4NSIgTm9tYnJlPSJBTE1BQ0VOIE1BTlVGQUNUVVJBIEFSQUdPTiIgUmVnaW1lbkZpc2NhbD0iNjAxIiAvPgoJPGNmZGk6UmVjZXB0b3IgUmZjPSJDRE03NjAxMjRDODUiIE5vbWJyZT0iR1BBTSBBTE0gTUFRVUlOQVJJQSAtIENMTCIgVXNvQ0ZEST0iUDAxIiAvPgoJPGNmZGk6Q29uY2VwdG9zPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjIzMTIxNjE0IiBOb0lkZW50aWZpY2FjaW9uPSJDWjY2MDAtQzZEQS0zMTAxVkROIiBDYW50aWRhZD0iMS4wMCIgQ2xhdmVVbmlkYWQ9Ikg4NyIgVW5pZGFkPSJQWiIgRGVzY3JpcGNpb249IkNaNjYwMC1DNkRBLTMxIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjIzMTIxNjE0IiBOb0lkZW50aWZpY2FjaW9uPSJFWFQzMjE2LUEwNC80MzUtMDAwME4iIENhbnRpZGFkPSIxLjAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBVbmlkYWQ9IlBaIiBEZXNjcmlwY2lvbj0iRVhUMzIxNi1BMDQvNDM1IiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJCTxjZmRpOkNvbmNlcHRvIENsYXZlUHJvZFNlcnY9IjIzMTIxNjE0IiBOb0lkZW50aWZpY2FjaW9uPSJGVDg3MDBETS0wMDAwTiIgQ2FudGlkYWQ9IjYiIENsYXZlVW5pZGFkPSJIODciIFVuaWRhZD0iUFoiIERlc2NyaXBjaW9uPSJGVDg3MDBETSIgVmFsb3JVbml0YXJpbz0iMC4wMCIgSW1wb3J0ZT0iMC4wMCIgLz4KCTwvY2ZkaTpDb25jZXB0b3M+Cgo8Y2ZkaTpDb21wbGVtZW50bz48dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIFZlcnNpb249IjEuMSIgVVVJRD0iMjAyMkI4QzctMDI3Ny00Mjg2LThCQTUtOTQ5NTRDN0JGRUIzIiBGZWNoYVRpbWJyYWRvPSIyMDIxLTEyLTI3VDEyOjM0OjQyIiBSZmNQcm92Q2VydGlmPSJTRkUwODA3MTcyVzciIFNlbGxvQ0ZEPSJpSW85S2dFWVJiU2VuUHQ4eWNlb1ZyY3hFcUNUeXdlTys4ZDlvTkVndWhrZUJXL3ZKcUFEbWZlRlh0TTYwaTJtS3hFNExmWnlRWnZxV1Voc3Roc2FhdkFQNDNLaDFvR3lEYVJCVThjMkViblZtd0hPcXo5ZGwyS2hOSjhJWnFXTEx1UDlvSTZMZEhJd0VtaWtCNmJqNmhxaDIzOG1XSXNQVFB2c3RZcE9lR09NMTZ6WnplZ0FmakwvNkdPRXFFemhyaThzbkxnU0ZseFdIa2VLVkdicGZWOXpGeGJmTzRzazdGQ20wVWdHMUhuTFZUQTJLZHIwWUlXcmJ2MmJGeFpUVGZsblVMQ3hzUEZvRTV0QWNtOGhGdHhnaFgzUkkyNi81N2g5a0VMU0x0SnRuVVhKWkVKVlNLcTRhaTFDT3RONmlFUjdtWmdKZUlUU2hsNWJPbTVtNGc9PSIgTm9DZXJ0aWZpY2Fkb1NBVD0iMjAwMDEwMDAwMDAzMDAwMjI3NzkiIFNlbGxvU0FUPSJJK1huZmVUNUhqNmJxcmltYy81dTZCbm9XcGJ4SGRtUEY4U3VKakIyR2owOXZwUTVxazJvNkQrK3ZZOVJlbWFHTjhvb3FEaGlSRDBJQW9tSFlPai9ZTHo5SVc0YmR4Q1J5aytySFc0YTM4cit1WFRTMlpOSXhxVmp0ZDVGNkt1clJyZGRJdi8wZEdhNWdNR05XY1VSR04zdUxaMGlGd3N5M2gzNzBIVVVjeERiWVl3ajdYTlBPNzA0aitpa2FTNXRpSklVaGN5SWhTak95UmZzdHEvMTFSWkJwWXFGbWdxNFZqOGlHLzRPODMxYmVrUVU5a2NRdlI3aE9HaFFFSjFKNnhtcjJrZDZveHFucTFoV2hDQnFCTlhOR1JCY2JUUjBuRlVETXF3TWF0bEZ5QjIrZU1vN2tDdi9SSmJhemRZcTVEZmZWQUtMeXNTcTU4WjVDVUZwMkE9PSIgLz48L2NmZGk6Q29tcGxlbWVudG8+PGNmZGk6QWRkZW5kYT4KPERhdG9zQWRpY2lvbmFsZXMgRU1BSUw9ImFndXRpZXJyZXpAZ3RjdGEubXgiIC8+CjwvY2ZkaTpBZGRlbmRhPjwvY2ZkaTpDb21wcm9iYW50ZT4="
var xml644 = ""
var xml645 = ""
var xml646 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGNmZGk6Q29tcHJvYmFudGUgeG1sbnM6Y2ZkaT0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczpjYXJ0YXBvcnRlMjA9Imh0dHA6Ly93d3cuc2F0LmdvYi5teC9DYXJ0YVBvcnRlMjAiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5zYXQuZ29iLm14L2NmZC8zIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9zaXRpb19pbnRlcm5ldC9jZmQvMy9jZmR2MzMueHNkIGh0dHA6Ly93d3cuc2F0LmdvYi5teC9DYXJ0YVBvcnRlMjAgaHR0cDovL3d3dy5zYXQuZ29iLm14L3NpdGlvX2ludGVybmV0L2NmZC9DYXJ0YVBvcnRlL0NhcnRhUG9ydGUyMC54c2QiIFZlcnNpb249IjMuMyIgU2VyaWU9IlRSIiBGb2xpbz0iMTM1IiBGZWNoYT0iMjAyMS0xMi0yOVQxNzozMjoyMCIgU3ViVG90YWw9IjAiIE1vbmVkYT0iWFhYIiBUb3RhbD0iMCIgVGlwb0RlQ29tcHJvYmFudGU9IlQiIEx1Z2FyRXhwZWRpY2lvbj0iNzYwMzAiIE5vQ2VydGlmaWNhZG89IjAwMDAxMDAwMDAwNTAyNTQzNTIzIiBDZXJ0aWZpY2Fkbz0iTUlJR0xEQ0NCQlNnQXdJQkFnSVVNREF3TURFd01EQXdNREExTURJMU5ETTFNak13RFFZSktvWklodmNOQVFFTEJRQXdnZ0dFTVNBd0hnWURWUVFEREJkQlZWUlBVa2xFUVVRZ1EwVlNWRWxHU1VOQlJFOVNRVEV1TUN3R0ExVUVDZ3dsVTBWU1ZrbERTVThnUkVVZ1FVUk5TVTVKVTFSU1FVTkpUMDRnVkZKSlFsVlVRVkpKUVRFYU1CZ0dBMVVFQ3d3UlUwRlVMVWxGVXlCQmRYUm9iM0pwZEhreEtqQW9CZ2txaGtpRzl3MEJDUUVXRzJOdmJuUmhZM1J2TG5SbFkyNXBZMjlBYzJGMExtZHZZaTV0ZURFbU1DUUdBMVVFQ1F3ZFFWWXVJRWhKUkVGTVIwOGdOemNzSUVOUFRDNGdSMVZGVWxKRlVrOHhEakFNQmdOVkJCRU1CVEEyTXpBd01Rc3dDUVlEVlFRR0V3Sk5XREVaTUJjR0ExVUVDQXdRUTBsVlJFRkVJRVJGSUUxRldFbERUekVUTUJFR0ExVUVCd3dLUTFWQlZVaFVSVTFQUXpFVk1CTUdBMVVFTFJNTVUwRlVPVGN3TnpBeFRrNHpNVnd3V2dZSktvWklodmNOQVFrQ0UwMXlaWE53YjI1ellXSnNaVG9nUVVSTlNVNUpVMVJTUVVOSlQwNGdRMFZPVkZKQlRDQkVSU0JUUlZKV1NVTkpUMU1nVkZKSlFsVlVRVkpKVDFNZ1FVd2dRMDlPVkZKSlFsVlpSVTVVUlRBZUZ3MHhPVEV5TWpBeU16TXhNekZhRncweU16RXlNakF5TXpNeE16RmFNSUg2TVRBd0xnWURWUVFERXlkRFFWTkJJRVJKUVZvZ1JFVWdUVUZSVlVsT1FWTWdSRVVnUTA5VFJWSWdVMEVnUkVVZ1ExWXhNREF1QmdOVkJDa1RKME5CVTBFZ1JFbEJXaUJFUlNCTlFWRlZTVTVCVXlCRVJTQkRUMU5GVWlCVFFTQkVSU0JEVmpFd01DNEdBMVVFQ2hNblEwRlRRU0JFU1VGYUlFUkZJRTFCVVZWSlRrRlRJRVJGSUVOUFUwVlNJRk5CSUVSRklFTldNU1V3SXdZRFZRUXRFeHhEUkUwM05qQXhNalJET0RVZ0x5QkVTVVZETXprd09URTBVMEkwTVI0d0hBWURWUVFGRXhVZ0x5QkVTVVZETXprd09URTBTRVJHV2xOT01EQXhHekFaQmdOVkJBc1RFa05HUkVrZ1JrRkRJRU5CVTBFZ1JFbEJXakNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMQXdpSVpLalRDdFRyNisxVllTRzF5V0R5K1Z4YS9ITFFDNXFJT0R3ZmE4dkkvZWw3OTdCUHpkSHVRMEl3SVNIT1BUTXpUQk9zZkNPbFpLcHh6Ni80RitZY2syaCtnSzNiZ2l2MjllVEdGUEh5Nm9jT2dia2FESHYvTnh1T1B3d2ZKWmp5bWZqcXR0cm5pZUJuMVJSLzRZWE82QURyaTcvZHo0U3FTLy85NUVaQjZNbWdoNWRJSnAyNUxJTURBQ0JqdnovWE1HejJXbytLbDlIQjV0ODc0WlBQMzNQd1hFV1VTY3V6dkpJS3ZrVE9sdnYzbVVkdmxMRDJCcHJBd1VPQWxvYmpFR0lBMmNiZ2tYM1F0SmFPblphcWU4Ykhmd2N5cU5rVm5QN3d3L3BXaTlwb2pzLzlDaEd2UThxNHpIU1ZlZnhCQTJ5RUd2TktpRE1ER1RIZGNDQXdFQUFhTWRNQnN3REFZRFZSMFRBUUgvQkFJd0FEQUxCZ05WSFE4RUJBTUNCc0F3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUorTzFoSVZSdHlXZkxnblJSZU1GRVBVd3RxdGVkdTc5SmJ4cEk1Vkt3OWJtYWM4OElGQ1l2elJaem43U1lEZFlrY0lZeTJNeFY1cG8vRkUwdjRMb3gyTWhOd2VjM0RzaHBDOTJBNnJJcmxiTWcxRUY3MUdqVE1wa0haeWx0ZjhoZkpvTzgxcEJjR2xnUVlJRmd0WUtxMHZyUXVLUEh0UHN6cXlsS0hNVlVmcjVaWUh6Zk1VcGlldXNDdlFTcHlZaURpc2xrdkQ1K0J6NTNybTZPWVRvS2FieEUvclZJd3FqOWRxNVlQbzhadGpoZ1NLT2ZaUjBYSEJJTS8wMVp3ZFgvejdvVDJHZjlZclNkNGpRMy90UlRCQkxzZU81TDB0MmgyblRBK2wzbnZpMXRXMjRYMEVGRGNpYjRVZEtTaWREL1BFaG1rZ1diYTk3S0I1OGl5MWZTSTltS2pvbFZOUm5lRytEUjJYbDhDQlIzYmJ0SGlTUXJDcTFNTXcva2gwZjQ5eUloOGdjeTl6bm1kcHoxKzJxR0VIT2Q4YkdhWnpYbGR5MDJhMVRtUTFyRUNiZytWeHVGdEtZbklaaURnbGkrOVNPaW1nMGpEWWlyak9FMGZibU5BRm5obHFydER3NXBTWFdFNlhPOTJWQUdsNkhSc05VUkRFNzd0MXpaTWVSeFRuRzhFTlB5MjBvQW1HSUNQZ1FYRDhOckh6YjdQOWV0d1ZhQmhKeENyenFUdDZUTXloZlJ1N0piRlpra1BwZGlTaUJYNlM2TWRKU3hVcjZ3bkZnMUZrbzFwY2FDdjBsc1dKZGhZYWUwWjAzcHJIN1RjQ0l5RkpscFJBVHM4RlBvZlZVMjdqUEVjbTBFL2ZpSTdOcGxPOFFiK1B5WStlbGtEQU9TYnkwRFNrIiBTZWxsbz0iT3g5RS9heVJ1U29ORnNVakJRVFJ0N3RibTZCSXo1S2kzbjYzRnZVeHhaU2RwVkIzZjJibnhYdTBDV2pQWDFJTjVpUGp6SWppUmJuUTBOZ3pQZmo2dmRvbUhDb2R6dzA0T0VQOFlYZngrWHBJejNOeHIzemR3aXFuZHkrZDRqQytWTEhPNDRSblRxWXJMclRBWk54VmptWWc2Tkp2OFNzZ1daQlRzeW1VU2d1dG1VencrM3NHM3hRUm5jVU5rcE9EdXFZVE9ORkQrcTd2dkJad2t6ZUY4TkkvcDFyQ3RyQ3ZCak5hVnFvQlFNb1lnMndzdWZ3c3ptd1ZDRmtmbTZpeTJuVmkvb3hkN2tza2VlRktoODV1U0tPNnFKZStVVTAwdFBycXQvMEdZZFp1SUhEdng1MHpncHVvSmhKbjVtNlBTT0Q0Y0swamt6NHhOSkRPdE5WZmN3PT0iPgoJPGNmZGk6RW1pc29yIE5vbWJyZT0iQ0FTQSBESUFaIERFIE1BUVVJTkFTIERFIENPU0VSLFMuQS4gREUgQ1YuIiBSZWdpbWVuRmlzY2FsPSI2MDEiIFJmYz0iQ0RNNzYwMTI0Qzg1IiAvPgoJPGNmZGk6UmVjZXB0b3IgUmZjPSJDRE03NjAxMjRDODUiIE5vbWJyZT0iQ0FTQSBESUFaIERFIE1BUVVJTkFTIERFIENPU0VSLFMuQS4gREUgQ1YuIiBVc29DRkRJPSJQMDEiIC8+Cgk8Y2ZkaTpDb25jZXB0b3M+CgkJPGNmZGk6Q29uY2VwdG8gQ2xhdmVQcm9kU2Vydj0iNzgxMDE4MDIiIENhbnRpZGFkPSIxLjAwIiBDbGF2ZVVuaWRhZD0iRTQ4IiBVbmlkYWQ9IlNFUlZJQ0lPIiBEZXNjcmlwY2lvbj0iVFJBU0xBRE8gREUgTUVSQ0FOQ0lBIiBWYWxvclVuaXRhcmlvPSIwLjAwIiBJbXBvcnRlPSIwLjAwIiAvPgoJPC9jZmRpOkNvbmNlcHRvcz4KCTxjZmRpOkNvbXBsZW1lbnRvPgoJCTxjYXJ0YXBvcnRlMjA6Q2FydGFQb3J0ZSBWZXJzaW9uPSIyLjAiIFRyYW5zcEludGVybmFjPSJObyIgVG90YWxEaXN0UmVjPSIzLjAwIj4KCQkJPGNhcnRhcG9ydGUyMDpVYmljYWNpb25lcz4KCQkJCTxjYXJ0YXBvcnRlMjA6VWJpY2FjaW9uIFRpcG9VYmljYWNpb249Ik9yaWdlbiIgSURVYmljYWNpb249Ik9SMDAwMTExIiBSRkNSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNETTc2MDEyNEM4NSIgTm9tYnJlUmVtaXRlbnRlRGVzdGluYXRhcmlvPSJDQVNBIERJQVogREUgTUFRVUlOQVMgREUgQ09TRVIsUy5BLiBERSBDViIgRmVjaGFIb3JhU2FsaWRhTGxlZ2FkYT0iMjAyMS0xMi0yOVQxNzowMDowMCI+CgkJCQkJPGNhcnRhcG9ydGUyMDpEb21pY2lsaW8gQ2FsbGU9IkZSQVkgU0VSVkFORE8gVEVSRVNBIERFIE1JRVIiIE51bWVyb0V4dGVyaW9yPSIyOSIgQ29sb25pYT0iMDk3NCIgTG9jYWxpZGFkPSIwNiIgTXVuaWNpcGlvPSIwMTUiIEVzdGFkbz0iRElGIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMDY4MDAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCQk8Y2FydGFwb3J0ZTIwOlViaWNhY2lvbiBUaXBvVWJpY2FjaW9uPSJEZXN0aW5vIiBJRFViaWNhY2lvbj0iREUwMDA5MDciIFJGQ1JlbWl0ZW50ZURlc3RpbmF0YXJpbz0iQ0FNODMwOTA1REo4IiBOb21icmVSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNBU0EgRElBWiBERSBNQVFVSU5BUyBERSBDT1NFUixTLkEuIERFIENWIiBGZWNoYUhvcmFTYWxpZGFMbGVnYWRhPSIyMDIxLTEyLTI5VDE5OjAwOjAwIiBEaXN0YW5jaWFSZWNvcnJpZGE9IjEuMDAiPgoJCQkJCTxjYXJ0YXBvcnRlMjA6RG9taWNpbGlvIENhbGxlPSJBVi4gU0FOIEpVQU4gREUgQVJBR09OIiBOdW1lcm9FeHRlcmlvcj0iTk8uIDU4MSIgQ29sb25pYT0iMTEyMCIgTG9jYWxpZGFkPSIwNyIgTXVuaWNpcGlvPSIwMDUiIEVzdGFkbz0iRElGIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMDc0ODAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCQk8Y2FydGFwb3J0ZTIwOlViaWNhY2lvbiBUaXBvVWJpY2FjaW9uPSJEZXN0aW5vIiBJRFViaWNhY2lvbj0iREUwMDA5MTAiIFJGQ1JlbWl0ZW50ZURlc3RpbmF0YXJpbz0iQ0FNODMwOTA1REo4IiBOb21icmVSZW1pdGVudGVEZXN0aW5hdGFyaW89IkNBU0EgRElBWiBERSBNQVFVSU5BUyBERSBDT1NFUixTLkEuIERFIENWIiBGZWNoYUhvcmFTYWxpZGFMbGVnYWRhPSIyMDIxLTEyLTI5VDE5OjAwOjAwIiBEaXN0YW5jaWFSZWNvcnJpZGE9IjIuMDAiPgoJCQkJCTxjYXJ0YXBvcnRlMjA6RG9taWNpbGlvIENhbGxlPSJBVi4gVEFNQVpVTEEiIE51bWVyb0V4dGVyaW9yPSJOTy4gMTExNyIgQ29sb25pYT0iMTEwOSIgTG9jYWxpZGFkPSIwMiIgTXVuaWNpcGlvPSIwMDciIEVzdGFkbz0iRFVSIiBQYWlzPSJNRVgiIENvZGlnb1Bvc3RhbD0iMzUwNzAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpVYmljYWNpb24+CgkJCTwvY2FydGFwb3J0ZTIwOlViaWNhY2lvbmVzPgoJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYXMgUGVzb0JydXRvVG90YWw9IjE1LjMzMCIgVW5pZGFkUGVzbz0iS0dNIiBOdW1Ub3RhbE1lcmNhbmNpYXM9IjYiPgoJCQkJPGNhcnRhcG9ydGUyMDpNZXJjYW5jaWEgQmllbmVzVHJhbnNwPSIxMTE1MTcwMCIgRGVzY3JpcGNpb249IkhpbG9zIiBDYW50aWRhZD0iMTQyNi4wMDAwMDAiIENsYXZlVW5pZGFkPSJIODciIFBlc29FbktnPSI1LjE1NyIgVmFsb3JNZXJjYW5jaWE9IjAuMDAiIE1vbmVkYT0iTVhOIj4KCQkJCQk8Y2FydGFwb3J0ZTIwOkNhbnRpZGFkVHJhbnNwb3J0YSBDYW50aWRhZD0iMjQuMDAwMDAwIiBJRE9yaWdlbj0iT1IwMDAxMTEiIElERGVzdGlubz0iREUwMDA5MDciIC8+CgkJCQkJPGNhcnRhcG9ydGUyMDpDYW50aWRhZFRyYW5zcG9ydGEgQ2FudGlkYWQ9IjE0MDIuMDAwMDAwIiBJRE9yaWdlbj0iT1IwMDAxMTEiIElERGVzdGlubz0iREUwMDA5MTAiIC8+CgkJCQk8L2NhcnRhcG9ydGUyMDpNZXJjYW5jaWE+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjE1MTIxNTIwIiBEZXNjcmlwY2lvbj0iTHVicmljYW50ZXMgZGUgcHJvcC5fLnNpdG8gZ2VuZXJhbCIgQ2FudGlkYWQ9IjQuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMS42NzQiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6TWVyY2FuY2lhIEJpZW5lc1RyYW5zcD0iNDQxMjE2MTgiIERlc2NyaXBjaW9uPSJUaWplcmFzIiBDYW50aWRhZD0iMjQuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMC45NDgiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6TWVyY2FuY2lhIEJpZW5lc1RyYW5zcD0iNTMxNDE2MDAiIERlc2NyaXBjaW9uPSJTdW1pbmlzdHJvcyBkZSBjb3N0dXJhIHZhcmlhZG9zIiBDYW50aWRhZD0iNTYxLjAwMDAwMCIgQ2xhdmVVbmlkYWQ9Ikg4NyIgUGVzb0VuS2c9IjIuNjE3IiBWYWxvck1lcmNhbmNpYT0iMC4wMCIgTW9uZWRhPSJNWE4iIC8+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjUzMTQxNjA1IiBEZXNjcmlwY2lvbj0iQWd1amFzIGRlIGNvc3R1cmEiIENhbnRpZGFkPSI2MjAwLjAwMDAwMCIgQ2xhdmVVbmlkYWQ9Ikg4NyIgUGVzb0VuS2c9IjQuODY1IiBWYWxvck1lcmNhbmNpYT0iMC4wMCIgTW9uZWRhPSJNWE4iIC8+CgkJCQk8Y2FydGFwb3J0ZTIwOk1lcmNhbmNpYSBCaWVuZXNUcmFuc3A9IjUzMTQxNjE0IiBEZXNjcmlwY2lvbj0iQWd1amFzIGRlIGJvcmRhZG8iIENhbnRpZGFkPSIxMDAuMDAwMDAwIiBDbGF2ZVVuaWRhZD0iSDg3IiBQZXNvRW5LZz0iMC4wNjkiIFZhbG9yTWVyY2FuY2lhPSIwLjAwIiBNb25lZGE9Ik1YTiIgLz4KCQkJCTxjYXJ0YXBvcnRlMjA6QXV0b3RyYW5zcG9ydGUgUGVybVNDVD0iVFBBRjA3IiBOdW1QZXJtaXNvU0NUPSJQMDEtMTY0ODQxNCI+CgkJCQkJPGNhcnRhcG9ydGUyMDpJZGVudGlmaWNhY2lvblZlaGljdWxhciBDb25maWdWZWhpY3VsYXI9IkMyIiBQbGFjYVZNPSIxMjM0NTYiIEFuaW9Nb2RlbG9WTT0iMjAwOCIgLz4KCQkJCQk8Y2FydGFwb3J0ZTIwOlNlZ3Vyb3MgQXNlZ3VyYVJlc3BDaXZpbD0iUXVhbGl0YXMgQ29tcGFuaWEgZGUgU2VndXJvcywgUy5BLiBkZSBDLlYuIiBQb2xpemFSZXNwQ2l2aWw9IlFFMTU0NDQ4ODgxQSIgLz4KCQkJCTwvY2FydGFwb3J0ZTIwOkF1dG90cmFuc3BvcnRlPgoJCQk8L2NhcnRhcG9ydGUyMDpNZXJjYW5jaWFzPgoJCQk8Y2FydGFwb3J0ZTIwOkZpZ3VyYVRyYW5zcG9ydGU+CiAgICAgICAgICAJCQkJPGNhcnRhcG9ydGUyMDpUaXBvc0ZpZ3VyYSBUaXBvRmlndXJhPSIwMSIgUkZDRmlndXJhPSJHVVRFNjcwNzA3RFY5IiBOdW1MaWNlbmNpYT0iMTIzNDU2IiBOb21icmVGaWd1cmE9IlNBTEFaQVIgQ09OREUgRURVQVJETyBJVkFOIiAvPgoJCQk8L2NhcnRhcG9ydGUyMDpGaWd1cmFUcmFuc3BvcnRlPgoJCTwvY2FydGFwb3J0ZTIwOkNhcnRhUG9ydGU+Cgk8dGZkOlRpbWJyZUZpc2NhbERpZ2l0YWwgeG1sbnM6dGZkPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCIgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vd3d3LnNhdC5nb2IubXgvVGltYnJlRmlzY2FsRGlnaXRhbCBodHRwOi8vd3d3LnNhdC5nb2IubXgvc2l0aW9faW50ZXJuZXQvY2ZkL1RpbWJyZUZpc2NhbERpZ2l0YWwvVGltYnJlRmlzY2FsRGlnaXRhbHYxMS54c2QiIFZlcnNpb249IjEuMSIgVVVJRD0iNzhEQTg4RTAtM0MyMy00RUVCLUE3OUUtRUZFMDBFQUZBNjEzIiBGZWNoYVRpbWJyYWRvPSIyMDIxLTEyLTI5VDE3OjM0OjU3IiBSZmNQcm92Q2VydGlmPSJTRkUwODA3MTcyVzciIFNlbGxvQ0ZEPSJPeDlFL2F5UnVTb05Gc1VqQlFUUnQ3dGJtNkJJejVLaTNuNjNGdlV4eFpTZHBWQjNmMmJueFh1MENXalBYMUlONWlQanpJamlSYm5RME5nelBmajZ2ZG9tSENvZHp3MDRPRVA4WVhmeCtYcEl6M054cjN6ZHdpcW5keStkNGpDK1ZMSE80NFJuVHFZckxyVEFaTnhWam1ZZzZOSnY4U3NnV1pCVHN5bVVTZ3V0bVV6dyszc0czeFFSbmNVTmtwT0R1cVlUT05GRCtxN3Z2Qlp3a3plRjhOSS9wMXJDdHJDdkJqTmFWcW9CUU1vWWcyd3N1Zndzem13VkNGa2ZtNml5Mm5WaS9veGQ3a3NrZWVGS2g4NXVTS082cUplK1VVMDB0UHJxdC8wR1lkWnVJSER2eDUwemdwdW9KaEpuNW02UFNPRDRjSzBqa3o0eE5KRE90TlZmY3c9PSIgTm9DZXJ0aWZpY2Fkb1NBVD0iMjAwMDEwMDAwMDAzMDAwMjI3NzkiIFNlbGxvU0FUPSJDZ1NXNGhmNHNlbEo0L3FOYXRkb3pYVDNCeUxPQW9VeGIrNGZURTNXSDJwSVA3clViTXBUZnIzZStha3BPRkMyTVhFYWNQTmovQmZWVWE2d3J6TE4wVkM5QWRNTVkvOTh2b1IreWlhd3FrTS8vQWtlL0crODc4THZyWTR3TGVjdTFpMitmYklpQW10SndQQ3BKSzhoK3R6V0F6cDgxa1hYMGxzSlJxSmVkQzh5MU8rcTNXWXV1ZU1MZzFSTlFhVHdFS0RPRVFpV3RjUnhoY1ZWbXZNVVNzTlMzeU01anRtOXhFTFE5a1hBN1BqRmVtZWxFaU5nbzlReko5ZXNiZlBqVG00SXZUalZHbVZFUm1DVDRtdmpTdThtRm1VMU9QV0RTRS9TUWVHWDNqOSszNGJ3b2IxUGRmTWt1MjRoZXdQTG1NZXJKY3pzN1hxTmZpQUJrUDZ6cUE9PSIgLz48L2NmZGk6Q29tcGxlbWVudG8+Cgo8Y2ZkaTpBZGRlbmRhPgo8RGF0b3NBZGljaW9uYWxlcyBFTUFJTD0iZWd1dGllcnJlekBndGN0YS5teCIgLz4KPC9jZmRpOkFkZGVuZGE+PC9jZmRpOkNvbXByb2JhbnRlPg=="

async function getPDFCasaDiaz(docBase64, pathLogo, nameFile, domicilioFiscal, nombreEmisor)
{

    try {

        var xmlString = await xml.serializeXML(docBase64)

        var options = {compact: false, ignoreComment: true, spaces: 4};
        const jsonString = convert.xml2json(xmlString, options);
        const jsonData = JSON.parse(jsonString)
        var emisor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Emisor")
        var receptor = jsonData.elements[0].elements.find( o => o.name === "cfdi:Receptor")
        var attributes = jsonData.elements[0].attributes
        var complemento = jsonData.elements[0].elements.find( o => o.name === "cfdi:Complemento")
        var timbreFiscal = complemento.elements.find( o => o.name === "tfd:TimbreFiscalDigital")
        var conceptos = jsonData.elements[0].elements.find( o => o.name === "cfdi:Conceptos")
        var cartaP = complemento.elements.find( o => o.name === "cartaporte20:CartaPorte")

        var datosEmisor = {
            text: [
                {text: `${nombreEmisor}\n`, style: 'textotablaboldlarge'},
                {text: "\n", style: 'espacios'},
                {text: `R.F.C.: ${emisor.attributes.Rfc}\n`, style: 'encabezadoRfc'},
                {text: "\n", style: 'espacios'},
                {text: "DOMICILIO FISCAL: \n", style: 'encabezadoDomicilio'},
                {text: domicilioFiscal + "\n", style: 'encabezadoTexto'},
                {text: "\n", style: 'espacios'},
                {text: `LUGAR DE EXPEDICIÓN: `, style: 'encabezadoDomicilio'},
                {text: `${attributes.LugarExpedicion}\n`, style: 'encabezadoTexto'},
                {text: "\n", style: 'espacios'},
                {text: `FECHA Y HORA DE EXPEDICIÓN: `, style: 'encabezadoDomicilio'},
                {text: `${attributes.Fecha}`, style: 'encabezadoTexto'},
            ]
        }

        var paramsTipoComprobante = {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.TipoDeComprobante,
            table: "SAT_Cat_Receipt_Types"
        }

        var resTipoTraslado = await dbcatcatalogs.getCatalogIdDescription(paramsTipoComprobante)

        var paramsRegimenFiscal = {
            pvOptionCRUD: "R",
            pvIdCatalog: emisor.attributes.RegimenFiscal,
            table: "SAT_Cat_Tax_Regimens"
        }

        var resRegimenFiscal = await dbcatcatalogs.getCatalogIdDescription(paramsRegimenFiscal)

        var encabezado =
        {
            columns: [
                [
                    {text: "\n", style: 'espacios'},
                    {text: "\n", style: 'espacios'},
                    { image: pathLogo, width: 140, height: 70, alignment: 'center'},
                    {text: "\n", style: 'espacios'},
                ],
                [
                    {text: datosEmisor}
                ],
                [
                    {
                        table: {
                            body: [
                                [
                                    {border: [false, false, false, false], fillColor: '#eaa01b', text: 'TRASLADO', alignment: 'center', style: 'textoTablaTrasladoHeader'},
                                ],
                                [
                                    {border: [true, false, true, false], text:[
                                            {text: "SERIE: ", style: 'textotablaboldblack'},
                                            {text: attributes.Serie, style: 'textotabla' },
                                            {text: " FOLIO: ", style: 'textotablaboldblack'},
                                            {text: attributes.Folio, style: 'textotabla' },
                                        ] 
                                    },
                                ],
                                [
                                    { border: [true, false, true, false], text: [
                                            {text: "VERSIÓN: ", style: 'textotablaboldblack'},
                                            {text: attributes.Version, style: 'textotabla' },
                                        ]
                                    }, 
                                ],
                                [
                                    { border: [true, false, true, false], text: [
                                            {text: "FOLIO FISCAL: ", style: 'textotablaboldblack'},
                                            {text: timbreFiscal.attributes.UUID, style: 'textotabla' },
                                        ]
                                    },
                                ],
                                [
                                    { border: [true, false, true, false], text: [
                                            {text: "FECHA Y HORA DE CERTIFICACIÓN: ", style: 'textotablaboldblack'},
                                            {text: timbreFiscal.attributes.FechaTimbrado, style: 'textotabla' },
                                        ] 
                                    },
                                ],
                                [
                                    {border: [true, false, true, false], text: [
                                            {text: "FECHA Y HORA DE EMISIÓN: ", style: 'textotablaboldblack'},
                                            {text: attributes.Fecha, style: 'textotabla' },
                                        ]
                                    },
                                ],
                                [
                                    {border: [true, false, true, true], text: [
                                            {text: "TIPO DE COMPROBANTE: ", style: 'textotablaboldblack'},
                                            {text: attributes.TipoDeComprobante + " - " + resTipoTraslado, style: 'textotabla' },
                                        ]
                                    },
                                ],
                            ]
                        },
                        layout: {
                            hLineWidth: function () {
                                return  0.7;
                            },
                            vLineWidth: function () {
                                return 0.7;
                            },
                            hLineColor: function () {
                                return 'gray';
                            },
                            vLineColor: function () {
                                return 'gray';
                            },
                        }	
                    }
                ]
            ]
        }
        
        var eEmisor = {
            table: {
                widths: ["*", 130, 90],
                body: [
                    [
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'EMISOR', alignment: 'center', style: 'textoTablaClienteHeader', colSpan:3},
                        {},
                        {}
                    ],
                    [
                        {text: `NOMBRE`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                        {text: `R.F.C.:`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                        {text: `REGIMEN FISCAL`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                    ],
                    [
                        {text: `${emisor.attributes.Nombre}`, style: 'textoTablaCliente', alignment: 'center'}, 
                        {text: `${emisor.attributes.Rfc}`, style: 'textoTablaCliente', alignment: 'center'}, 
                        {text: `${emisor.attributes.RegimenFiscal} - ${resRegimenFiscal}`, style: 'textoTablaCliente', alignment: 'center'}, 
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'gray';
                },
                vLineColor: function () {
                    return 'gray';
                },
            }	
        }

        var paramsUsoCFDI = {
            pvOptionCRUD: "R",
            pvIdCatalog: receptor.attributes.UsoCFDI,
            table: "SAT_Cat_CFDI_Uses"
        }

        var resUsoCFDI = await dbcatcatalogs.getCatalogIdDescription(paramsUsoCFDI)

        var cliente = {
            table: {
                widths: ["*", 130, 90],
                body: [
                    [
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'RECEPTOR', alignment: 'center', style: 'textoTablaClienteHeader', colSpan:3},
                        {},
                        {}
                    ],
                    [
                        {text: `NOMBRE`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                        {text: `R.F.C.:`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                        {text: `USO DE CFDI:`, style: 'textoTablaClienteBoldblack',  alignment: 'center'},
                    ],
                    [
                        {text: `${receptor.attributes.Nombre}`, style: 'textoTablaCliente', alignment: 'center'}, 
                        {text: `${receptor.attributes.Rfc}`, style: 'textoTablaCliente', alignment: 'center'}, 
                        {text: `${receptor.attributes.UsoCFDI} - ${resUsoCFDI}`, style: 'textoTablaCliente', alignment: 'center'}, 
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'gray';
                },
                vLineColor: function () {
                    return 'gray';
                },
            }	
        }

        var conceptosArray = []
        var cCount = 0

        conceptosArray[cCount] = [
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Clave Producto / Servicio', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Cantidad', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Clave Unidad', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Unidad', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Descripción', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Valor Unitario', alignment: 'center', style: 'textoTablaTrasladoHeader'},
            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'Importe', alignment: 'center', style: 'textoTablaTrasladoHeader'},
        ]

        cCount++

        for(var i=0; i<conceptos.elements.length; i++)
        {
            var paramsClaveUnidad= {
                pvOptionCRUD: "R",
                pvIdCatalog: conceptos.elements[i].attributes.ClaveUnidad,
                table: "SAT_Cat_UoM_Codes"
            }
        
            var resClaveUnidad = await dbcatcatalogs.getCatalogIdDescription(paramsClaveUnidad)

            var paramsClaveProd= {
                pvOptionCRUD: "R",
                pvIdCatalog: conceptos.elements[i].attributes.ClaveProdServ,
                table: "SAT_Cat_Product_Service_Codes"
            }
        
            var resClaveProd = await dbcatcatalogs.getCatalogIdDescription(paramsClaveProd)

            conceptosArray[cCount] = [
                {text: `${conceptos.elements[i].attributes.ClaveProdServ} - ${resClaveProd}`, alignment: 'center', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.Cantidad}`, alignment: 'center', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.ClaveUnidad} - ${resClaveUnidad}`, alignment: 'center', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.Unidad}`, alignment: 'center', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.Descripcion}`, alignment: 'left', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.ValorUnitario}`, alignment: 'center', style: 'textoTablaCliente'},
                {text: `${conceptos.elements[i].attributes.Importe}`, alignment: 'center', style: 'textoTablaCliente'},
            ]
            cCount++
        }

        var conceptos = {
            table: {
                headerRows: 1,
                widths: [80, 40, 50, 60, "*", 60, 40],
                body: conceptosArray
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'gray';
                },
                vLineColor: function () {
                    return 'gray';
                },
            }	
        }

        var paramsMoneda= {
            pvOptionCRUD: "R",
            pvIdCatalog: attributes.Moneda,
            table: "SAT_Cat_Currencies"
        }

        var resMoneda = await dbcatcatalogs.getCatalogIdDescription(paramsMoneda)

        var totales = 
        {
            columns: [
                {
                    width: "*",
                    text: `Moneda: ${attributes.Moneda} - ${resMoneda}`,
                    style: 'moneda'
                },
                {
                    width: 200,
                    table: {
                        widths: ["*", 50],
                        body: [
                            [
                                {text: 'SUBTOTAL', alignment: 'right', style: 'textotablabold'},
                                {text: `${attributes.SubTotal}`, alignment: 'right', style: 'textotablabold'},
                            ],
                            [
                                {border: [false, false, false, false], fillColor: '#eaa01b', text: 'TOTAL', alignment: 'right', style: 'textoTablaTrasladoHeader'},
                                {border: [false, false, false, false], fillColor: '#eaa01b', text: `${attributes.Total}`, alignment: 'right', style: 'textoTablaTrasladoHeader'},
                            ],
                        ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                },
            ]
        }

        //Se arma la CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACIÓN DIGITAL DEL SAT
        var version = timbreFiscal.attributes.Version 
        if(version === undefined)
        {
            version = ""
        }
        else {
            version = version + "|"
        }

        var uuid = timbreFiscal.attributes.UUID
        if(uuid === undefined)
        {
            uuid = ""
        }
        else {
            uuid = uuid + "|"
        }

        var fechaTimbrado = timbreFiscal.attributes.FechaTimbrado
        if(fechaTimbrado === undefined)
        {
            fechaTimbrado = ""
        }
        else {
            fechaTimbrado = fechaTimbrado + "|"
        }

        var rfcProvCertif = timbreFiscal.attributes.RfcProvCertif
        if(rfcProvCertif === undefined)
        {
            rfcProvCertif = ""
        }
        else{ 
            rfcProvCertif = rfcProvCertif + "|"
        }

        var selloCFD = timbreFiscal.attributes.SelloCFD
        if(selloCFD === undefined)
        {
            selloCFD = ""
        }
        else {
            selloCFD = selloCFD + "|"
        }

        var noCertificadoSAT = timbreFiscal.attributes.NoCertificadoSAT 
        if(noCertificadoSAT == undefined)
        {
            noCertificadoSAT = ""
        }
        
        var complementoCertificacionSAT = "||" + version + uuid + fechaTimbrado + rfcProvCertif + selloCFD + noCertificadoSAT + "||"

        var cadenaCodigo = {
            text: [
                {text: "NÚMERO DE SERIE DEL CERTIFICADO DEL SAT: ", style: 'textoTablaCodigoBold'},
                {text: `${timbreFiscal.attributes.NoCertificadoSAT}\n`, style: 'textoTablaCodigo'},
                {text: "\n", style: 'espacios'},
                {text: "NÚMERO DE SERIE DEL CSD DEL EMISOR: ", style: 'textoTablaCodigoBold'},
                {text: `${attributes.NoCertificado}\n`, style: 'textoTablaCodigo'},
                {text: "\n", style: 'espacios'},
                {text: "SELLO DIGITAL DEL SAT:\n", style: 'textoTablaCodigoBold'},
                {text: `${timbreFiscal.attributes.SelloSAT}\n`, style: 'textoTablaCodigo'},
                {text: "\n", style: 'espacios'},
                {text: "SELLO DIGITAL DEL CFDI:\n", style: 'textoTablaCodigoBold'},
                {text: `${timbreFiscal.attributes.SelloCFD}\n`, style: 'textoTablaCodigo'},
                {text: "\n", style: 'espacios'},
                {text: "CADENA ORIGINAL DEL COMPLEMENTO DE CERTIFICACIÓN DIGITAL DEL SAT:\n", style: 'textoTablaCodigoBold'},
                {text: `${complementoCertificacionSAT}\n`, style: 'textoTablaCodigo'},
            ]
        }

        //Se arma el url para el código QR
        var finSelloDig = timbreFiscal.attributes.SelloCFD.substr(-8);
        var url = "https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx" + "?&id=" +
                    timbreFiscal.attributes.UUID + "&re=" + emisor.attributes.Rfc + "&rr=" + receptor.attributes.Rfc + "&tt=" + attributes.Total  + "&fe=" + finSelloDig

        var paramsTemporalFiles = {
            pvOptionCRUD: "R",
            piIdParameter: "20",
        }

        var resTemporalFiles = await dbcatgeneralparameters.getGeneralParametersbyID(paramsTemporalFiles)
        //console.log((resTemporalFiles[0])[0].Value)

        var imageQR = timbreFiscal.attributes.UUID + ".png"
        //console.log(imageQR)

        const buffer = await new AwesomeQR({
            text: url,
            size: 500,
        }).draw();

        var temporalFilesPath = (resTemporalFiles[0])[0].Value
        //console.log(temporalFilesPath)
        
        fs.writeFileSync(temporalFilesPath + imageQR, buffer);
        
        var codigos = {
            table: {
                widths: [110, 430],
                body: [
                    [
                        {image: temporalFilesPath + imageQR, width: 120, height: 120, alignment: 'center', verticalAlign: 'middle'},
                        {border: [false, true, true, true], text: cadenaCodigo, alignment: 'left'},
                    ],
                ]
            },
            layout: {
                hLineWidth: function () {
                    return  0.7;
                },
                vLineWidth: function () {
                    return 0.7;
                },
                hLineColor: function () {
                    return 'gray';
                },
                vLineColor: function () {
                    return 'gray';
                },
            }	
        }

        var cartaPorte = {}
        var ubicaciones = {}
        var mercanciasEncabezado = {}
        var mercancias = {}
        var autotransporte = {}
        var identificacionVehicular = {}
        var seguros = {}

        if(cartaP !== undefined)
        {
            if(cartaP.attributes.TranspInternac === "Si" || cartaP.attributes.TranspInternac === "Sí" || cartaP.attributes.TranspInternac === "SI" || cartaP.attributes.TranspInternac === "si" || cartaP.attributes.TranspInternac === "sí")
            {
                var paramsPaisOrigenDestino= {
                    pvOptionCRUD: "R",
                    pvIdCatalog: cartaP.attributes.PaisOrigenDestino,
                    table: "SAT_Cat_Countries"
                }
        
                var resPaisOrigenDestino = await dbcatcatalogs.getCatalogIdDescription(paramsPaisOrigenDestino)

                cartaPorte = {
                    table: {
                        dontBreakRows: true, 
                        widths: [170, "*", 170],
                                body: [
                                    [
                                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'COMPLEMENTO CARTA PORTE ' + cartaP.attributes.Version, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:3},
                                        {},
                                        {},
                                    ],
                                    [
                                        {text: 'VERSIÓN', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "TRANSPORTE INTERNACIONAL", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "TOTAL DE DISTANCIA RECORRIDA", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                    ],
                                    [
                                        {text: cartaP.attributes.Version, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.TranspInternac, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.TotalDistRec, alignment: 'center', style: 'textoTablaCliente'},
                                    ],
                                    [
                                        {text: 'ENTRADA - SALIDA MERCANCÍA', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "PAÍS ORIGEN - DESTINO", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "VÍA ENTRADA - SALIDA", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                    ],
                                    [
                                        {text: cartaP.attributes.EntradaSalidaMerc, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.PaisOrigenDestino + " - " + resPaisOrigenDestino, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.ViaEntradaSalida, alignment: 'center', style: 'textoTablaCliente'},
                                    ],
                                ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                }
            }
            else {
                cartaPorte = {
                    table: {
                        dontBreakRows: true, 
                        widths: [170, "*", 170],
                                body: [
                                    [
                                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'COMPLEMENTO CARTA PORTE ' + cartaP.attributes.Version, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:3},
                                        {},
                                        {},
                                    ],
                                    [
                                        {text: 'VERSIÓN', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "TRANSPORTE INTERNACIONAL", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                        {text: "TOTAL DE DISTANCIA RECORRIDA", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                                    ],
                                    [
                                        {text: cartaP.attributes.Version, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.TranspInternac, alignment: 'center', style: 'textoTablaCliente'},
                                        {text: cartaP.attributes.TotalDistRec, alignment: 'center', style: 'textoTablaCliente'},
                                    ]
                                ]
                    },
                    layout: {
                        hLineWidth: function () {
                            return  0.7;
                        },
                        vLineWidth: function () {
                            return 0.7;
                        },
                        hLineColor: function () {
                            return 'gray';
                        },
                        vLineColor: function () {
                            return 'gray';
                        },
                    }	
                }
            }
            
    
            var ubicacionesCP = cartaP.elements.find( o => o.name === "cartaporte20:Ubicaciones")
    
            var ubicacionesArray = []
            var uCount = 0
    
            ubicacionesArray[uCount] = [
                {border: [false, false, false, false], fillColor: '#eaa01b', text: 'UBICACIONES', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                {},
                {},
                {},
                {},
                {},
                {},
            ]
    
            uCount++
    
            ubicacionesArray[uCount] = [
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
            ]
            
            uCount++ 
    
            for(var i=0; i<ubicacionesCP.elements.length; i++)
            {
                //console.log(ubicacionesCP.elements[i].elements[0].attributes)
                var noC = i+1
                if(ubicacionesCP.elements[i].attributes.TipoUbicacion === "Origen")
                {
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, true], fillColor: '#eaa01b', text: 'UBICACIÓN ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    uCount++
            
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'TIPO DE UBICACIÓN', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'ID DE UBICACIÓN', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'RFC REMITENTE', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'NOMBRE DEL REMITENTE O DESTINATARIO', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'FECHA Y HORA DE SALIDA O DE LLEGADA', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'DISTANCIA RECORRIDA', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'DOMICILIO', alignment: 'center', style: 'textotablacolor'},
                    ]
                
                    uCount++
    
                    var calle = ubicacionesCP.elements[i].elements[0].attributes.Calle
                    if(calle === undefined)
                    {
                        calle = ""
                    }
    
                    var noExterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroExterior;
                    if(noExterior === undefined)
                    {
                        noExterior = ""
                    }
    
                    var noInterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroInterior;
                    if(noInterior === undefined)
                    {
                        noInterior = ""
                    }
    
                    var referencia = ubicacionesCP.elements[i].elements[0].attributes.Referencia;
                    if(referencia === undefined)
                    {
                        referencia = ""
                    }
    
                    var estado = ubicacionesCP.elements[i].elements[0].attributes.Estado;
                    if(estado === undefined)
                    {
                        estado = ""
                    }
    
                    var pais = ubicacionesCP.elements[i].elements[0].attributes.Pais;
                    if(pais === undefined)
                    {
                        pais = ""
                    }
    
                    var codigoPostal = ubicacionesCP.elements[i].elements[0].attributes.CodigoPostal;
                    if(codigoPostal === undefined)
                    {
                        codigoPostal = ""
                    }
    
                    var colonia = ubicacionesCP.elements[i].elements[0].attributes.Colonia;
                    var localidad;
                    var municipio;
                    if(colonia === undefined)
                    {
                        colonia = ""
                    }
                    else {
                        const params = {
                            pvIdState: estado,
                            pvIdCounty : colonia,
                        }
                        const res = await dbcatcatalogs.getUbicZipCodeCounty(params)
                        
                        if((res[0])[0].Description !== undefined)
                        {
                            colonia = "(" + colonia + ") " + (res[0])[0].Description
                        }
                        else {
                            colonia = "(" + colonia + ") Code Not Found!" 
                        }
                        
    
                        var localidad = ubicacionesCP.elements[i].elements[0].attributes.Localidad;
                        if(localidad === undefined)
                        {
                            localidad = ""
                        }
                        else {
                            if((res[0])[0].Location_Desc !== undefined)
                            {
                                localidad = "(" + localidad + ") " + (res[0])[0].Location_Desc
                            }
                            else {
                                localidad = "(" + localidad + ") Code Not Found!"
                            }
                        }
    
                        var municipio = ubicacionesCP.elements[i].elements[0].attributes.Municipio;
                        if(municipio === undefined)
                        {
                            municipio = ""
                        }
                        else {
                            if((res[0])[0].Municipality_Desc !== undefined)
                            {
                                municipio = "(" + municipio + ") " + (res[0])[0].Municipality_Desc
                            }
                            else {
                                municipio = "(" + municipio + ") Code Not Found!"
                            }
                        }
                    }
    
                    var domicilio = calle + " " + noExterior + " " + noInterior + " " +  "Col. " + colonia + ", " + localidad + ", " + referencia + municipio + ", " + estado + ", " + pais  + ", " + "C.P. " + codigoPostal
            
                    ubicacionesArray[uCount] = [
                        {text: `${ubicacionesCP.elements[i].attributes.TipoUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.IDUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.RFCRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.NombreRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.FechaHoraSalidaLlegada}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {text: "0", alignment: 'center', style: 'ubicacionesTexto'},
                        {text: domicilio, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
            
                    uCount++ 
    
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
    
                    uCount++ 
                }
                else 
                {
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, true], fillColor: '#eaa01b', text: 'UBICACIÓN ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    uCount++
            
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'TIPO DE UBICACIÓN', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'ID DE UBICACIÓN', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'RFC REMITENTE', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'NOMBRE DEL REMITENTE O DESTINATARIO', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'FECHA Y HORA DE SALIDA O DE LLEGADA', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'DISTANCIA RECORRIDA', alignment: 'center', style: 'textotablacolor'},
                        {border: [false, false, false, false], fillColor: '#eaa01b', text: 'DOMICILIO', alignment: 'center', style: 'textotablacolor'},
                    ]
                
                    uCount++
    
                    var calle = ubicacionesCP.elements[i].elements[0].attributes.Calle
                    if(calle === undefined)
                    {
                        calle = ""
                    }
    
                    var noExterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroExterior;
                    if(noExterior === undefined)
                    {
                        noExterior = ""
                    }
    
                    var noInterior = ubicacionesCP.elements[i].elements[0].attributes.NumeroInterior;
                    if(noInterior === undefined)
                    {
                        noInterior = ""
                    }
    
                    var referencia = ubicacionesCP.elements[i].elements[0].attributes.Referencia;
                    if(referencia === undefined)
                    {
                        referencia = ""
                    }
    
                    var estado = ubicacionesCP.elements[i].elements[0].attributes.Estado;
                
                    if(estado === undefined)
                    {
                        estado = ""
                    }
    
                    var pais = ubicacionesCP.elements[i].elements[0].attributes.Pais;
                    if(pais === undefined)
                    {
                        pais = ""
                    }
    
                    var codigoPostal = ubicacionesCP.elements[i].elements[0].attributes.CodigoPostal;
                    if(codigoPostal === undefined)
                    {
                        codigoPostal = ""
                    }
    
                    var colonia = ubicacionesCP.elements[i].elements[0].attributes.Colonia;
                    var localidad;
                    var municipio;
                    if(colonia === undefined)
                    {
                        colonia = ""
                    }
                    else {
                        const params = {
                            pvIdState: estado,
                            pvIdCounty : colonia,
                        }
                        const res = await dbcatcatalogs.getUbicZipCodeCounty(params)
                        
                        colonia = "(" + colonia + ") " + (res[0])[0].Description
    
                        var localidad = ubicacionesCP.elements[i].elements[0].attributes.Localidad;
                        if(localidad === undefined)
                        {
                            localidad = ""
                        }
                        else {
                            localidad = "(" + localidad + ") " + (res[0])[0].Location_Desc
                        }
    
                        var municipio = ubicacionesCP.elements[i].elements[0].attributes.Municipio;
                        if(municipio === undefined)
                        {
                            municipio = ""
                        }
                        else {
                            municipio = "(" + municipio + ") " + (res[0])[0].Municipality_Desc
                        }
                    }
    
                    var domicilio = calle + " " + noExterior + " " + noInterior + " " +  "Col. " + colonia + ", " + localidad + ", " + referencia + municipio + ", " + estado + ", " + pais  + ", " + "C.P. " + codigoPostal
            
                    ubicacionesArray[uCount] = [
                        {text: `${ubicacionesCP.elements[i].attributes.TipoUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.IDUbicacion}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.RFCRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.NombreRemitenteDestinatario}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.FechaHoraSalidaLlegada}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {text: `${ubicacionesCP.elements[i].attributes.DistanciaRecorrida}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: domicilio, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
            
                    uCount++
    
                    ubicacionesArray[uCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
                
                    uCount++
                }
            }
    
            ubicaciones = {
                table: {
                    dontBreakRows: true, 
                    headerRows: 1,
                    widths: [40, 50, 50, 80, 60, 50, "*"],
                    body: ubicacionesArray
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
    
            var mercanciasCP = cartaP.elements.find( o => o.name === "cartaporte20:Mercancias")
    
            mercanciasEncabezado = {
                table: {
                    headerRows: 3,
                    widths: [120, 120, "*"],
                    body: [
                        [
                            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'MERCANCÍAS', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:3},
                            {},
                            {},
                        ],
                        [
                            {text: 'PESO BRUTO TOTAL', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            {text: "UNIDAD DE PESO", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            {text: "NÚMERO TOTAL DE MERCANCÍAS", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                        ],
                        [
                            {text: mercanciasCP.attributes.PesoBrutoTotal, alignment: 'center', style: 'textoTablaCliente'},
                            {text: mercanciasCP.attributes.UnidadPeso, alignment: 'center', style: 'textoTablaCliente'},
                            {text: mercanciasCP.attributes.NumTotalMercancias, alignment: 'center', style: 'textoTablaCliente'},
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
    
            var mercanciasArray = []
            var mCount = 0

            mercanciasArray[mCount] = [
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
            ]
        
            mCount++
    
            //Para guardar solo las mercancias
            var mercanciasAux = []
            var mAuxC = 0
            for(var y=0; y< mercanciasCP.elements.length; y++)
            {
                if(mercanciasCP.elements[y].name === "cartaporte20:Mercancia")
                {
                    mercanciasAux[mAuxC] = mercanciasCP.elements[y]
                    mAuxC++
                }
            }
    
            for(var i=0; i<mercanciasAux.length; i++)
            {
                if(cartaP.attributes.TranspInternac === "Si" || cartaP.attributes.TranspInternac === "Sí" || cartaP.attributes.TranspInternac === "SI" || cartaP.attributes.TranspInternac === "si" || cartaP.attributes.TranspInternac === "sí")
                {
                    if(cartaP.attributes.EntradaSalidaMerc === "Entrada")
                    {
                        var noC = i+1
                        mercanciasArray[mCount] = [
                            {fillColor: '#eaa01b', text: 'MERCANCÍA ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
                    
                        mCount++
            
                        mercanciasArray[mCount] = [
                            {fillColor: '#eaa01b', text: 'BIENES TRANSPORTADOS', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'DESCRIPCIÓN', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'CANTIDAD', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'CLAVE UNIDAD', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'PESO EN KILOGRAMOS', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'VALOR DE LA MERCANCÍA', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'MONEDA', alignment: 'center', style: 'textotablacolor'},
                        ]
                    
                        mCount++
            
                        var paramsBienesTransportados= {
                            pvOptionCRUD: "R",
                            pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                            table: "SAT_Cat_Product_Service_Codes"
                        }
                    
                        var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
            
                        mercanciasArray[mCount] = [
                            {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                        ]
            
                        mCount++

                        var materialPeligroso = mercanciasAux[i].attributes.MaterialPeligroso
                        var claveMaterialPeligroso = mercanciasAux[i].attributes.CveMaterialPeligroso
                        var embalaje = mercanciasAux[i].attributes.Embalaje
                        var descripcionEmbalaje = mercanciasAux[i].attributes.DescripEmbalaje

                        var eMaterialPeligroso;
                        var eClaveMaterialPeligroso;
                        var eEmbalaje;
                        var eDescripcionEmbalaje;

                        if(materialPeligroso === undefined)
                        {
                            materialPeligroso = ""
                            eMaterialPeligroso = ""
                        }
                        else {
                            materialPeligroso = materialPeligroso + "\n"
                            eMaterialPeligroso = "MATERIAL PELIGROSO: "
                        }
                        if(claveMaterialPeligroso === undefined)
                        {
                            claveMaterialPeligroso = ""
                            eClaveMaterialPeligroso = ""
                        }
                        else {
                            claveMaterialPeligroso = claveMaterialPeligroso + "\n"
                            eClaveMaterialPeligroso = "CLAVE MATERIAL PELIGROSO: "
                        }
                        if(embalaje === undefined)
                        {
                            embalaje = ""
                            eEmbalaje = ""
                        }
                        else {
                            embalaje = embalaje + "\n"
                            eEmbalaje = "EMBALAJE: "
                        }
                        if(descripcionEmbalaje === undefined)
                        {
                            descripcionEmbalaje = ""
                            eDescripcionEmbalaje = ""
                        }
                        else {
                            eDescripcionEmbalaje = "DESCRIPCIÓN EMBALAJE: "
                        }
        

                        mercanciasArray[mCount] = [
                            {   text: [
                                    {text: "FRACCIÓN ARANCELARIA:  ", style: "textotablabold"},
                                    {text: mercanciasAux[i].attributes.FraccionArancelaria + "\n", style: "ubicacionesTexto"},
                                    {text: eMaterialPeligroso, style: "textotablabold" },
                                    {text: materialPeligroso, style: "ubicacionesTexto"},
                                    {text: eClaveMaterialPeligroso, style: "textotablabold" },
                                    {text: claveMaterialPeligroso, style: "ubicacionesTexto"},
                                    {text: eEmbalaje, style: "textotablabold" },
                                    {text: embalaje, style: "ubicacionesTexto"},
                                    {text: eDescripcionEmbalaje, style: "textotablabold" },
                                    {text: descripcionEmbalaje, style: "ubicacionesTexto"},
                                ], 
                                alignment: 'left', 
                                colSpan: 7
                            },
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
            
                        mCount++

                        var mercanciasElements = mercanciasAux[i].elements
                        if(mercanciasElements !== undefined)
                        {
                            var pedimentosAux = []
                            var pECount = 0
                            for(var mE = 0; mE< mercanciasElements.length; mE++)
                            {
                                if(mercanciasElements[mE].name === "cartaporte20:Pedimentos")
                                {
                                    pedimentosAux[pECount] = mercanciasElements[mE];
                                    pECount++
                                }
                            }
                            //console.log(pedimentosAux)

                            //console.log(pedimentos)
                            if(pedimentosAux.length > 0)
                            {
                                var pCount = 1
                                for(var p = 0; p< pedimentosAux.length; p++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: '#eaa01b', text: 'PEDIMENTO ' + pCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: `${pedimentosAux[p].attributes.Pedimento}`, alignment: 'center', style: 'ubicacionesTexto', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                }
                            }

                            var cantidadTransportaAux = []
                            var cTECount = 0
                            for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                            {
                                if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                                {
                                    cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                    cTECount++
                                }
                            }
                            //console.log(cantidadTransportaAux)

                            if(cantidadTransportaAux.length > 0)
                            {
                                var cTCount = 1
                                for(var c = 0; c< cantidadTransportaAux.length; c++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: '#eaa01b', text: 'CANTIDAD TRANSPORTA ' + cTCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: [
                                            {text: "CANTIDAD: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                            {text: "ID ORIGEN: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                            {text: "ID DESTINO: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                        ], colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                }
                            }
                        }
                        

                        //console.log(mercanciasAux[i].elements)
            
                        mercanciasArray[mCount] = [
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        ]
                    
                        mCount++
                    }
                    else {
                        var noC = i+1
                        mercanciasArray[mCount] = [
                            {fillColor: '#eaa01b', text: 'MERCANCÍA ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
                    
                        mCount++
            
                        mercanciasArray[mCount] = [
                            {fillColor: '#eaa01b', text: 'BIENES TRANSPORTADOS', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'DESCRIPCIÓN', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'CANTIDAD', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'CLAVE UNIDAD', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'PESO EN KILOGRAMOS', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'VALOR DE LA MERCANCÍA', alignment: 'center', style: 'textotablacolor'},
                            {fillColor: '#eaa01b', text: 'MONEDA', alignment: 'center', style: 'textotablacolor'},
                        ]
                    
                        mCount++
            
                        var paramsBienesTransportados= {
                            pvOptionCRUD: "R",
                            pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                            table: "SAT_Cat_Product_Service_Codes"
                        }
                    
                        var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
            
                        mercanciasArray[mCount] = [
                            {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                            {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                        ]
            
                        mCount++

                        var materialPeligroso = mercanciasAux[i].attributes.MaterialPeligroso
                        var claveMaterialPeligroso = mercanciasAux[i].attributes.CveMaterialPeligroso
                        var embalaje = mercanciasAux[i].attributes.Embalaje
                        var descripcionEmbalaje = mercanciasAux[i].attributes.DescripEmbalaje

                        var eMaterialPeligroso;
                        var eClaveMaterialPeligroso;
                        var eEmbalaje;
                        var eDescripcionEmbalaje;

                        if(materialPeligroso === undefined)
                        {
                            materialPeligroso = ""
                            eMaterialPeligroso = ""
                        }
                        else {
                            materialPeligroso = materialPeligroso + "\n"
                            eMaterialPeligroso = "MATERIAL PELIGROSO: "
                        }
                        if(claveMaterialPeligroso === undefined)
                        {
                            claveMaterialPeligroso = ""
                            eClaveMaterialPeligroso = ""
                        }
                        else {
                            claveMaterialPeligroso = claveMaterialPeligroso + "\n"
                            eClaveMaterialPeligroso = "CLAVE MATERIAL PELIGROSO: "
                        }
                        if(embalaje === undefined)
                        {
                            embalaje = ""
                            eEmbalaje = ""
                        }
                        else {
                            eEmbalaje = "EMBALAJE: "
                        }
                        if(descripcionEmbalaje === undefined)
                        {
                            descripcionEmbalaje = ""
                            eDescripcionEmbalaje = ""
                        }
                        else {
                            eDescripcionEmbalaje = "DESCRIPCIÓN EMBALAJE: "
                        }
        

                        mercanciasArray[mCount] = [
                            {   text: [
                                    {text: "FRACCIÓN ARANCELARIA:  ", style: "textotablabold"},
                                    {text: mercanciasAux[i].attributes.FraccionArancelaria + "\n", style: "ubicacionesTexto"},
                                    {text: "UUID COMERCIO EXTERIOR:  ", style: "textotablabold" },
                                    {text: mercanciasAux[i].attributes.UUIDComercioExt + "\n", style: "ubicacionesTexto"},
                                    {text: eMaterialPeligroso, style: "textotablabold" },
                                    {text: materialPeligroso, style: "ubicacionesTexto"},
                                    {text: eClaveMaterialPeligroso, style: "textotablabold" },
                                    {text: claveMaterialPeligroso, style: "ubicacionesTexto"},
                                    {text: eEmbalaje, style: "textotablabold" },
                                    {text: embalaje, style: "ubicacionesTexto"},
                                ], 
                                alignment: 'left', 
                                colSpan: 7
                            },
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ]
            
                        mCount++

                        var mercanciasElements = mercanciasAux[i].elements
                        if(mercanciasElements !== undefined)
                        {
                            //console.log(mercanciasElements)
                            var cantidadTransportaAux = []
                            var cTECount = 0
                            for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                            {
                                if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                                {
                                    cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                    cTECount++
                                }
                            }
                            //console.log(cantidadTransportaAux)

                            if(cantidadTransportaAux.length > 0)
                            {
                                var cTCount = 1
                                for(var c = 0; c< cantidadTransportaAux.length; c++)
                                {
                                    mercanciasArray[mCount] = [
                                        {fillColor: '#eaa01b', text: 'CANTIDAD TRANSPORTA ' + cTCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                                
                                    mCount++

                                    mercanciasArray[mCount] = [
                                        {text: [
                                            {text: "CANTIDAD: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                            {text: "ID ORIGEN: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                            {text: "ID DESTINO: ", style: 'textotablabold'},
                                            {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                        ], colSpan: 7},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                        {},
                                    ]
                        
                                    mCount++
                                    cTCount++
                                }
                            }
                        }
            
                        mercanciasArray[mCount] = [
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                            {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        ]
                    
                        mCount++
                    }
                }
                else {
                    var noC = i+1
                    mercanciasArray[mCount] = [
                        {fillColor: '#eaa01b', text: 'MERCANCÍA ' + noC, alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                        {},
                        {},
                        {},
                        {},
                        {},
                        {},
                    ]
                
                    mCount++
        
                    mercanciasArray[mCount] = [
                        {fillColor: '#eaa01b', text: 'BIENES TRANSPORTADOS', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'DESCRIPCIÓN', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'CANTIDAD', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'CLAVE UNIDAD', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'PESO EN KILOGRAMOS', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'VALOR DE LA MERCANCÍA', alignment: 'center', style: 'textotablacolor'},
                        {fillColor: '#eaa01b', text: 'MONEDA', alignment: 'center', style: 'textotablacolor'},
                    ]
                
                    mCount++
        
                    var paramsBienesTransportados= {
                        pvOptionCRUD: "R",
                        pvIdCatalog: mercanciasAux[i].attributes.BienesTransp,
                        table: "SAT_Cat_Product_Service_Codes"
                    }
                
                    var resBienesTransportados = await dbcatcatalogs.getCatalogIdDescription(paramsBienesTransportados)
        
                    mercanciasArray[mCount] = [
                        {text: `${mercanciasAux[i].attributes.BienesTransp} - ${resBienesTransportados}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Descripcion}`, alignment: 'left', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Cantidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.ClaveUnidad}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.PesoEnKg}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.ValorMercancia}`, alignment: 'center', style: 'ubicacionesTexto'},
                        {text: `${mercanciasAux[i].attributes.Moneda}`, alignment: 'center', style: 'ubicacionesTexto'},
                    ]
        
                    mCount++

                    var mercanciasElements = mercanciasAux[i].elements
                    if(mercanciasElements !== undefined)
                    {
                        //console.log(mercanciasElements)
                        var cantidadTransportaAux = []
                        var cTECount = 0
                        for(var cTE = 0; cTE< mercanciasElements.length; cTE++)
                        {
                            if(mercanciasElements[cTE].name === "cartaporte20:CantidadTransporta")
                            {
                                cantidadTransportaAux[cTECount] = mercanciasElements[cTE];
                                cTECount++
                            }
                        }
                        //console.log(cantidadTransportaAux)

                        if(cantidadTransportaAux.length > 0)
                        {
                            var cTCount = 1
                            for(var c = 0; c< cantidadTransportaAux.length; c++)
                            {
                                mercanciasArray[mCount] = [
                                    {fillColor: '#eaa01b', text: 'CANTIDAD TRANSPORTA ' + cTCount, alignment: 'center', style: 'textotablacolor', colSpan: 7},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                ]
                            
                                mCount++

                                mercanciasArray[mCount] = [
                                    {text: [
                                        {text: "CANTIDAD: ", style: 'textotablabold'},
                                        {text: cantidadTransportaAux[c].attributes.Cantidad + "\n", style: 'ubicacionesTexto'},
                                        {text: "ID ORIGEN: ", style: 'textotablabold'},
                                        {text: cantidadTransportaAux[c].attributes.IDOrigen + "\n", style: 'ubicacionesTexto'},
                                        {text: "ID DESTINO: ", style: 'textotablabold'},
                                        {text: cantidadTransportaAux[c].attributes.IDDestino + "\n", style: 'ubicacionesTexto'},
                                    ], colSpan: 7},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                    {},
                                ]
                    
                                mCount++
                                cTCount++
                            }
                        }
                    }
        
                    mercanciasArray[mCount] = [
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                        {border: [false, false, false, false], text: "", style: 'textoTablaTrasladoHeader'},
                    ]
                
                    mCount++
                }
            }
    
            mercancias = {
                table: {
                    headerRows: 3,
                    widths: [70, "*", 50, 60, 60, 50, 50],
                    body: mercanciasArray
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
    
            var autotransporteAux = []
            var mAuxT = 0
            for(var y=0; y< mercanciasCP.elements.length; y++)
            {
                if(mercanciasCP.elements[y].name === "cartaporte20:Autotransporte")
                {
                    autotransporteAux[mAuxT] = mercanciasCP.elements[y]
                    mAuxT++
                }
            }
    
            autotransporte = {
                table: {
                    headerRows: 3,
                    widths: [265, "*"],
                    body: [
                        [
                            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'AUTOTRANSPORTE', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:2},
                            {},
                        ],
                        [
                            {text: 'PERMISO SCT', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            {text: "NÚMERO DE PERMISO", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                        ],
                        [
                            {text: autotransporteAux[0].attributes.PermSCT, alignment: 'center', style: 'textoTablaCliente'},
                            {text: autotransporteAux[0].attributes.NumPermisoSCT, alignment: 'center', style: 'textoTablaCliente'},
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
    
            //console.log(autotransporteAux[0].elements)
    
            var identificacionVehicularCP = autotransporteAux[0].elements.find( o => o.name === "cartaporte20:IdentificacionVehicular")
            //console.log(identificacionVehicularCP)
    
            identificacionVehicular = {
                table: {
                    headerRows: 3,
                    widths: [150, "*", 150],
                    body: [
                        [
                            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'IDENTIFICACIÓN VEHICULAR', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:3},
                            {},
                            {},
                        ],
                        [
                            {text: 'CONFIGURACIÓN VEHICULAR', alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            {text: "PLACA VEHÍCULO MOTOR", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                            {text: "AÑO MODELO", alignment: 'center', style: 'textoTablaClienteBoldblack'},
                        ],
                        [
                            {text: identificacionVehicularCP.attributes.ConfigVehicular, alignment: 'center', style: 'textoTablaCliente'},
                            {text: identificacionVehicularCP.attributes.PlacaVM, alignment: 'center', style: 'textoTablaCliente'},
                            {text: identificacionVehicularCP.attributes.AnioModeloVM, alignment: 'center', style: 'textoTablaCliente'},
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
    
            var segurosCP = autotransporteAux[0].elements.find( o => o.name === "cartaporte20:Seguros")
            //console.log(segurosCP)
    
            seguros = {
                table: {
                    headerRows: 3,
                    widths: ["*", 60, 60, 60, 60, 60, 60],
                    body: [
                        [
                            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'SEGUROS', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan:7},
                            {},
                            {},
                            {},
                            {},
                            {},
                            {},
                        ],
                        [
                            {text: 'ASEGURADORA DE RESPONSABILIDAD CIVIL', alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "NÚMERO DE PÓLIZA DE SEGURO POR RESPONSABILIDAD CIVIL", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "ASEGURADORA DE MEDIO AMBIENTE", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "NÚMERO DE PÓLIZA DE SEGURO POR MEDIO AMBIENTE", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "ASEGURADORA DE LA CARGA TRANSPORTADA", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "NÚMERO DE PÓLIZA DE LA CARGA TRANSPORTADA", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "VALOR DE LA PRIMA DEL SEGURO", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                        ],
                        [
                            {text: segurosCP.attributes.AseguraRespCivil, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.PolizaRespCivil, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.AseguraMedAmbiente, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.PolizaMedAmbiente, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.AseguraCarga, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.PolizaCarga, alignment: 'center', style: 'textoTablaCliente'},
                            {text: segurosCP.attributes.PrimaSeguro, alignment: 'center', style: 'textoTablaCliente'},
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }

            var figuraTransporteCP = cartaP.elements.find( o => o.name === "cartaporte20:FiguraTransporte")
            //console.log(figuraTransporteCP)

            var figuraTransporte = {
                table: {
                    headerRows: 3,
                    widths: [80, 80, 80, "*"],
                    body: [
                        [
                            {border: [false, false, false, false], fillColor: '#eaa01b', text: 'FIGURA TRANSPORTE', alignment: 'center', style: 'textoTablaTrasladoHeader', colSpan: 4},
                            {},
                            {},
                            {}
                        ],
                        [
                            {text: 'TIPO FIGURA', alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "RFC FIGURA", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "NÚMERO DE LICENCIA", alignment: 'center', style: 'textoTablaClienteBoldblack2'},
                            {text: "NOMBRE FIGURA", alignment: 'center', style: 'textoTablaClienteBoldblack2'}
                        ],
                        [
                            {text: figuraTransporteCP.elements[0].attributes.TipoFigura, alignment: 'center', style: 'textoTablaCliente'},
                            {text: figuraTransporteCP.elements[0].attributes.RFCFigura, alignment: 'center', style: 'textoTablaCliente'},
                            {text: figuraTransporteCP.elements[0].attributes.NumLicencia, alignment: 'center', style: 'textoTablaCliente'},
                            {text: figuraTransporteCP.elements[0].attributes.NombreFigura, alignment: 'center', style: 'textoTablaCliente'}
                        ]
                    ]
                },
                layout: {
                    hLineWidth: function () {
                        return  0.7;
                    },
                    vLineWidth: function () {
                        return 0.7;
                    },
                    hLineColor: function () {
                        return 'gray';
                    },
                    vLineColor: function () {
                        return 'gray';
                    },
                }	
            }
        }

        var docDefinition = {
            pageMargins: [ 20, 30, 20, 50 ],
            footer: function(currentPage, pageCount) {
                return {
                    margin: [ 30, 0, 30, 30 ],
                    columns: [
                        {
                            text: 'ESTE DOCUMENTO ES UNA REPRESENTACIÓN IMPRESA DE UN CFDI 3.3\n PDF creado por Garantía Total en Consultoría Tecnológica Avanzada S.A. de C.V. \n www.gtcta.mx', style: 'footer', alignment: 'left'
                        },
                        {
                            text: 'Página ' + currentPage.toString() + ' de ' + pageCount, style: 'footer', alignment: 'right'
                        },
                    ]
                }
            },
            content: [
                encabezado,
                "\n",
                eEmisor,
                "\n",
                cliente, 
                "\n",
                conceptos,
                "\n",
                totales,
                "\n",
                codigos,
                "\n",
                cartaPorte,
                "\n",
                ubicaciones,
                "\n",
                mercanciasEncabezado,
                mercancias,
                {text: "\n", style: "textotabla"},
                autotransporte,
                identificacionVehicular,
                seguros,
                "\n",
                figuraTransporte
                
            ],
            pageBreakBefore: function(currentNode, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage) {
                return currentNode.headlineLevel === 1 && followingNodesOnPage.length === 0;
            },
            styles: {
                encabezadoRfc: {
                    fontSize: 10,
                    bold: true,
                    color: '#bd8635',
                },
                encabezadoDomicilio: {
                    fontSize: 7,
                    bold: true,
                    color: '#bd8635',
                },
                encabezadoTexto: {
                    fontSize: 7,
                },
                textoTablaTrasladoHeader: {
                    fontSize: 8,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteHeader: {
                    fontSize: 11,
                    color: '#ffffff',
                    bold: true,
                },
                textoTablaClienteBoldblack: {
                    fontSize: 9,
                    bold: true,
                    color: '#000000',
                },
                textoTablaClienteBoldblack2: {
                    fontSize: 6,
                    bold: true,
                    color: '#000000',
                },
                textoTablaCliente: {
                    fontSize: 8,
                },
                textoTablaCodigo: {
                    fontSize: 6,
                },
                textoTablaCodigoBold: {
                    fontSize: 6,
                    bold: true,
                },
                espacios: {
                    fontSize: 5,
                },
                moneda: {
                    fontSize: 8,
                },
                ubicacionesTexto: {
                    fontSize: 6,
                },
                header: {
                    fontSize: 15,
                    bold: true,
                    color: '#d82b26',
                },
                index: {
                    fontSize: 11,
                    color: '#d82b26',
                },
                indexbackground: {
                    fontSize: 11,
                    color: '#d82b26',
                    bold: true,
                    background: '#eaa01b'
                },
                subheader: {
                    fontSize: 13,
                    bold: true,
                    color: '#d82b26',
                },
                textosubrayado: {
                    fontSize: 9,
                },
                textolista: {
                    fontSize: 7,
                },
                textolista2: {
                    fontSize: 8,
                },
                textotabla: {
                    fontSize: 6.5,
                },
                textotablabold: {
                    fontSize: 6.5,
                    bold: true,
                    color: '#bd8635',
                },
                textotablaboldlarge: {
                    fontSize: 12,
                    bold: true,
                    color: '#bd8635',
                },
                textotablaboldblack: {
                    fontSize: 7,
                    bold: true,
                    color: '#000000',
                },
                textotablacolor: {
                    fontSize: 6.5,
                    color: '#ffffff',
                    bold: true,
                },
                parrafo: {
                    fontSize: 8,
                },
                parrafoBold: {
                    fontSize: 8,
                    bold: true,
                },
                parrafoItalic: {
                    fontSize: 8,
                    italics: true,
                },
                footer: {
                    fontSize: 6,
                },
                quote: {
                    italics: true
                },
                small: {
                    fontSize: 8
                },
                minispace: {
                    fontSize: 3
                }
            }   
        };

        /*var nameF = nameFile + ".pdf"
        var pdfDoc = printer.createPdfKitDocument(docDefinition);
        pdfDoc.pipe(fs.createWriteStream(/*temporalFilesPath  "Documento.pdf"));
        pdfDoc.end();*/


        return new Promise( ( resolve, reject ) => {

            var pdfDoc = printer.createPdfKitDocument(docDefinition);
            fs.unlinkSync(temporalFilesPath + imageQR)

            var chunks = [];
            var result;
            var base64 = '';

            pdfDoc.on('data', function (chunk) {
                chunks.push(chunk);
            });
            
            pdfDoc.on('end', function () {

                result = Buffer.concat(chunks);

                base64 = result.toString('base64');

                resolve(base64);

            });

            pdfDoc.on('error', (error) => {
                
                console.log(error);
                
                reject('')

            });

            pdfDoc.end();

        });

    } catch (err) {

        console.error('Error: ', err)

    }
    
}

//getPDFCasaDiaz(xml646, "/Users/alexishernandezolvera/Desktop/GTC/PROYECTOS/gtc-services-portal-api/utils/images/Logo_Casa_Diaz.jpg", "./Documento" , "DOMICILIO DEL CLIENTE", "CASA DÍAZ MÁQUINAS DE COSER S.A. DE C.V.")

module.exports = {
    getPDFCasaDiaz : getPDFCasaDiaz
}